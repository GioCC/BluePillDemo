
BluePillDemo_SPI_2.4GHz_Radio_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001e78  08001e78  00011e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e9c  08001e9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e9c  08001e9c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e9c  08001e9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e9c  08001e9c  00011e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ea0  08001ea0  00011ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08001eb0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08001eb0  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063ad  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001314  00000000  00000000  000263e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000808  00000000  00000000  000276f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000760  00000000  00000000  00027f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000132a9  00000000  00000000  00028660  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005725  00000000  00000000  0003b909  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006769c  00000000  00000000  0004102e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a86ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f54  00000000  00000000  000a8748  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e60 	.word	0x08001e60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001e60 	.word	0x08001e60

0800014c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_8)
 8000156:	88fb      	ldrh	r3, [r7, #6]
 8000158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800015c:	d10c      	bne.n	8000178 <HAL_GPIO_EXTI_Callback+0x2c>
  {
	uint8_t data;

	// read the data from the radio chip
	(void)nrf24l01_read_rx_payload((uint8_t *)&data, 1U);
 800015e:	f107 030f 	add.w	r3, r7, #15
 8000162:	2101      	movs	r1, #1
 8000164:	4618      	mov	r0, r3
 8000166:	f000 fb3d 	bl	80007e4 <nrf24l01_read_rx_payload>

	// acknowledge the interrupt on the radio chip
	nrf24l01_irq_clear_all();
 800016a:	f000 fad3 	bl	8000714 <nrf24l01_irq_clear_all>

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800016e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000172:	4803      	ldr	r0, [pc, #12]	; (8000180 <HAL_GPIO_EXTI_Callback+0x34>)
 8000174:	f000 ffa2 	bl	80010bc <HAL_GPIO_TogglePin>
  }
}
 8000178:	bf00      	nop
 800017a:	3710      	adds	r7, #16
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	40011000 	.word	0x40011000

08000184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b092      	sub	sp, #72	; 0x48
 8000188:	af12      	add	r7, sp, #72	; 0x48
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018a:	f000 fc93 	bl	8000ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018e:	f000 f82d 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000192:	f000 f8a7 	bl	80002e4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000196:	f000 f86f 	bl	8000278 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  nrf24l01_initialize(nrf24l01_CONFIG_DEFAULT_VAL | nrf24l01_CONFIG_PWR_UP | nrf24l01_CONFIG_PRIM_RX,
 800019a:	2300      	movs	r3, #0
 800019c:	9310      	str	r3, [sp, #64]	; 0x40
 800019e:	2300      	movs	r3, #0
 80001a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80001a2:	2300      	movs	r3, #0
 80001a4:	930e      	str	r3, [sp, #56]	; 0x38
 80001a6:	2300      	movs	r3, #0
 80001a8:	930d      	str	r3, [sp, #52]	; 0x34
 80001aa:	2300      	movs	r3, #0
 80001ac:	930c      	str	r3, [sp, #48]	; 0x30
 80001ae:	2301      	movs	r3, #1
 80001b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80001b2:	2300      	movs	r3, #0
 80001b4:	930a      	str	r3, [sp, #40]	; 0x28
 80001b6:	23c6      	movs	r3, #198	; 0xc6
 80001b8:	9309      	str	r3, [sp, #36]	; 0x24
 80001ba:	23c5      	movs	r3, #197	; 0xc5
 80001bc:	9308      	str	r3, [sp, #32]
 80001be:	23c4      	movs	r3, #196	; 0xc4
 80001c0:	9307      	str	r3, [sp, #28]
 80001c2:	23c3      	movs	r3, #195	; 0xc3
 80001c4:	9306      	str	r3, [sp, #24]
 80001c6:	2300      	movs	r3, #0
 80001c8:	9305      	str	r3, [sp, #20]
 80001ca:	2300      	movs	r3, #0
 80001cc:	9304      	str	r3, [sp, #16]
 80001ce:	230f      	movs	r3, #15
 80001d0:	9303      	str	r3, [sp, #12]
 80001d2:	2302      	movs	r3, #2
 80001d4:	9302      	str	r3, [sp, #8]
 80001d6:	2303      	movs	r3, #3
 80001d8:	9301      	str	r3, [sp, #4]
 80001da:	2303      	movs	r3, #3
 80001dc:	9300      	str	r3, [sp, #0]
 80001de:	2303      	movs	r3, #3
 80001e0:	2200      	movs	r2, #0
 80001e2:	2101      	movs	r1, #1
 80001e4:	200b      	movs	r0, #11
 80001e6:	f000 f909 	bl	80003fc <nrf24l01_initialize>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ea:	e7fe      	b.n	80001ea <main+0x66>

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b090      	sub	sp, #64	; 0x40
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0318 	add.w	r3, r7, #24
 80001f6:	2228      	movs	r2, #40	; 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 fe28 	bl	8001e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
 8000206:	605a      	str	r2, [r3, #4]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	60da      	str	r2, [r3, #12]
 800020c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800020e:	2301      	movs	r3, #1
 8000210:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000216:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021c:	2301      	movs	r3, #1
 800021e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000220:	2302      	movs	r3, #2
 8000222:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000228:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800022a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800022e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000230:	f107 0318 	add.w	r3, r7, #24
 8000234:	4618      	mov	r0, r3
 8000236:	f000 ff71 	bl	800111c <HAL_RCC_OscConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000240:	f000 f8d6 	bl	80003f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000244:	230f      	movs	r3, #15
 8000246:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000248:	2302      	movs	r3, #2
 800024a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2102      	movs	r1, #2
 800025e:	4618      	mov	r0, r3
 8000260:	f001 f9dc 	bl	800161c <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800026a:	f000 f8c1 	bl	80003f0 <Error_Handler>
  }
}
 800026e:	bf00      	nop
 8000270:	3740      	adds	r7, #64	; 0x40
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
	...

08000278 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800027c:	4b17      	ldr	r3, [pc, #92]	; (80002dc <MX_SPI2_Init+0x64>)
 800027e:	4a18      	ldr	r2, [pc, #96]	; (80002e0 <MX_SPI2_Init+0x68>)
 8000280:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000282:	4b16      	ldr	r3, [pc, #88]	; (80002dc <MX_SPI2_Init+0x64>)
 8000284:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000288:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800028a:	4b14      	ldr	r3, [pc, #80]	; (80002dc <MX_SPI2_Init+0x64>)
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <MX_SPI2_Init+0x64>)
 8000292:	2200      	movs	r2, #0
 8000294:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000296:	4b11      	ldr	r3, [pc, #68]	; (80002dc <MX_SPI2_Init+0x64>)
 8000298:	2200      	movs	r2, #0
 800029a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <MX_SPI2_Init+0x64>)
 800029e:	2200      	movs	r2, #0
 80002a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <MX_SPI2_Init+0x64>)
 80002a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <MX_SPI2_Init+0x64>)
 80002ac:	2238      	movs	r2, #56	; 0x38
 80002ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <MX_SPI2_Init+0x64>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <MX_SPI2_Init+0x64>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <MX_SPI2_Init+0x64>)
 80002be:	2200      	movs	r2, #0
 80002c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80002c2:	4b06      	ldr	r3, [pc, #24]	; (80002dc <MX_SPI2_Init+0x64>)
 80002c4:	220a      	movs	r2, #10
 80002c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80002c8:	4804      	ldr	r0, [pc, #16]	; (80002dc <MX_SPI2_Init+0x64>)
 80002ca:	f001 fb11 	bl	80018f0 <HAL_SPI_Init>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80002d4:	f000 f88c 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	2000002c 	.word	0x2000002c
 80002e0:	40003800 	.word	0x40003800

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <MX_GPIO_Init+0xfc>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a38      	ldr	r2, [pc, #224]	; (80003e0 <MX_GPIO_Init+0xfc>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <MX_GPIO_Init+0xfc>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0310 	and.w	r3, r3, #16
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000310:	4b33      	ldr	r3, [pc, #204]	; (80003e0 <MX_GPIO_Init+0xfc>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a32      	ldr	r2, [pc, #200]	; (80003e0 <MX_GPIO_Init+0xfc>)
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b30      	ldr	r3, [pc, #192]	; (80003e0 <MX_GPIO_Init+0xfc>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0320 	and.w	r3, r3, #32
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000328:	4b2d      	ldr	r3, [pc, #180]	; (80003e0 <MX_GPIO_Init+0xfc>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a2c      	ldr	r2, [pc, #176]	; (80003e0 <MX_GPIO_Init+0xfc>)
 800032e:	f043 0308 	orr.w	r3, r3, #8
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b2a      	ldr	r3, [pc, #168]	; (80003e0 <MX_GPIO_Init+0xfc>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0308 	and.w	r3, r3, #8
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000340:	4b27      	ldr	r3, [pc, #156]	; (80003e0 <MX_GPIO_Init+0xfc>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <MX_GPIO_Init+0xfc>)
 8000346:	f043 0304 	orr.w	r3, r3, #4
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b24      	ldr	r3, [pc, #144]	; (80003e0 <MX_GPIO_Init+0xfc>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0304 	and.w	r3, r3, #4
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000358:	2201      	movs	r2, #1
 800035a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035e:	4821      	ldr	r0, [pc, #132]	; (80003e4 <MX_GPIO_Init+0x100>)
 8000360:	f000 fe94 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_9, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800036a:	481f      	ldr	r0, [pc, #124]	; (80003e8 <MX_GPIO_Init+0x104>)
 800036c:	f000 fe8e 	bl	800108c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000370:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000376:	2301      	movs	r3, #1
 8000378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037a:	2300      	movs	r3, #0
 800037c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800037e:	2303      	movs	r3, #3
 8000380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	4619      	mov	r1, r3
 8000388:	4816      	ldr	r0, [pc, #88]	; (80003e4 <MX_GPIO_Init+0x100>)
 800038a:	f000 fd25 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9;
 800038e:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000394:	2301      	movs	r3, #1
 8000396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800039c:	2303      	movs	r3, #3
 800039e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003a0:	f107 0310 	add.w	r3, r7, #16
 80003a4:	4619      	mov	r1, r3
 80003a6:	4810      	ldr	r0, [pc, #64]	; (80003e8 <MX_GPIO_Init+0x104>)
 80003a8:	f000 fd16 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80003ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_GPIO_Init+0x108>)
 80003b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ba:	f107 0310 	add.w	r3, r7, #16
 80003be:	4619      	mov	r1, r3
 80003c0:	4809      	ldr	r0, [pc, #36]	; (80003e8 <MX_GPIO_Init+0x104>)
 80003c2:	f000 fd09 	bl	8000dd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2100      	movs	r1, #0
 80003ca:	2017      	movs	r0, #23
 80003cc:	f000 fccd 	bl	8000d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003d0:	2017      	movs	r0, #23
 80003d2:	f000 fce6 	bl	8000da2 <HAL_NVIC_EnableIRQ>

}
 80003d6:	bf00      	nop
 80003d8:	3720      	adds	r7, #32
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40011000 	.word	0x40011000
 80003e8:	40010c00 	.word	0x40010c00
 80003ec:	10210000 	.word	0x10210000

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr

080003fc <nrf24l01_initialize>:
						 unsigned char rx_pw_p1,
						 unsigned char rx_pw_p2,
						 unsigned char rx_pw_p3,
						 unsigned char rx_pw_p4,
						 unsigned char rx_pw_p5)
{
 80003fc:	b590      	push	{r4, r7, lr}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	4604      	mov	r4, r0
 8000404:	4608      	mov	r0, r1
 8000406:	4611      	mov	r1, r2
 8000408:	461a      	mov	r2, r3
 800040a:	4623      	mov	r3, r4
 800040c:	71fb      	strb	r3, [r7, #7]
 800040e:	4603      	mov	r3, r0
 8000410:	71bb      	strb	r3, [r7, #6]
 8000412:	460b      	mov	r3, r1
 8000414:	717b      	strb	r3, [r7, #5]
 8000416:	4613      	mov	r3, r2
 8000418:	713b      	strb	r3, [r7, #4]
	unsigned char data[5];

	data[0] = en_aa;
 800041a:	797b      	ldrb	r3, [r7, #5]
 800041c:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_EN_AA, data, 1);
 800041e:	f107 0308 	add.w	r3, r7, #8
 8000422:	2201      	movs	r2, #1
 8000424:	4619      	mov	r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	f000 f935 	bl	8000696 <nrf24l01_write_register>

	data[0] = en_rxaddr;
 800042c:	793b      	ldrb	r3, [r7, #4]
 800042e:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_EN_RXADDR, data, 1);
 8000430:	f107 0308 	add.w	r3, r7, #8
 8000434:	2201      	movs	r2, #1
 8000436:	4619      	mov	r1, r3
 8000438:	2002      	movs	r0, #2
 800043a:	f000 f92c 	bl	8000696 <nrf24l01_write_register>

	data[0] = setup_aw;
 800043e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000442:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_SETUP_AW, data, 1);
 8000444:	f107 0308 	add.w	r3, r7, #8
 8000448:	2201      	movs	r2, #1
 800044a:	4619      	mov	r1, r3
 800044c:	2003      	movs	r0, #3
 800044e:	f000 f922 	bl	8000696 <nrf24l01_write_register>

	data[0] = setup_retr;
 8000452:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000456:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_SETUP_RETR, data, 1);
 8000458:	f107 0308 	add.w	r3, r7, #8
 800045c:	2201      	movs	r2, #1
 800045e:	4619      	mov	r1, r3
 8000460:	2004      	movs	r0, #4
 8000462:	f000 f918 	bl	8000696 <nrf24l01_write_register>

	data[0] = rf_ch;
 8000466:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800046a:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_RF_CH, data, 1);
 800046c:	f107 0308 	add.w	r3, r7, #8
 8000470:	2201      	movs	r2, #1
 8000472:	4619      	mov	r1, r3
 8000474:	2005      	movs	r0, #5
 8000476:	f000 f90e 	bl	8000696 <nrf24l01_write_register>

	data[0] = rf_setup;
 800047a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800047e:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_RF_SETUP, data, 1);
 8000480:	f107 0308 	add.w	r3, r7, #8
 8000484:	2201      	movs	r2, #1
 8000486:	4619      	mov	r1, r3
 8000488:	2006      	movs	r0, #6
 800048a:	f000 f904 	bl	8000696 <nrf24l01_write_register>

	if(rx_addr_p0 != NULL)
 800048e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000490:	2b00      	cmp	r3, #0
 8000492:	d005      	beq.n	80004a0 <nrf24l01_initialize+0xa4>
		nrf24l01_set_rx_addr(rx_addr_p0, 5, 0);
 8000494:	2200      	movs	r2, #0
 8000496:	2105      	movs	r1, #5
 8000498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800049a:	f000 f924 	bl	80006e6 <nrf24l01_set_rx_addr>
 800049e:	e010      	b.n	80004c2 <nrf24l01_initialize+0xc6>
	else
	{
		data[0] = nrf24l01_RX_ADDR_P0_B0_DEFAULT_VAL;
 80004a0:	23e7      	movs	r3, #231	; 0xe7
 80004a2:	723b      	strb	r3, [r7, #8]
		data[1] = nrf24l01_RX_ADDR_P0_B1_DEFAULT_VAL;
 80004a4:	23e7      	movs	r3, #231	; 0xe7
 80004a6:	727b      	strb	r3, [r7, #9]
		data[2] = nrf24l01_RX_ADDR_P0_B2_DEFAULT_VAL;
 80004a8:	23e7      	movs	r3, #231	; 0xe7
 80004aa:	72bb      	strb	r3, [r7, #10]
		data[3] = nrf24l01_RX_ADDR_P0_B3_DEFAULT_VAL;
 80004ac:	23e7      	movs	r3, #231	; 0xe7
 80004ae:	72fb      	strb	r3, [r7, #11]
		data[4] = nrf24l01_RX_ADDR_P0_B4_DEFAULT_VAL;
 80004b0:	23e7      	movs	r3, #231	; 0xe7
 80004b2:	733b      	strb	r3, [r7, #12]

		nrf24l01_set_rx_addr(data, 5, 0);
 80004b4:	f107 0308 	add.w	r3, r7, #8
 80004b8:	2200      	movs	r2, #0
 80004ba:	2105      	movs	r1, #5
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 f912 	bl	80006e6 <nrf24l01_set_rx_addr>
	}

	if(rx_addr_p1 != NULL)
 80004c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d005      	beq.n	80004d4 <nrf24l01_initialize+0xd8>
		nrf24l01_set_rx_addr(rx_addr_p1, 5, 1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2105      	movs	r1, #5
 80004cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80004ce:	f000 f90a 	bl	80006e6 <nrf24l01_set_rx_addr>
 80004d2:	e010      	b.n	80004f6 <nrf24l01_initialize+0xfa>
	else
	{
		data[0] = nrf24l01_RX_ADDR_P1_B0_DEFAULT_VAL;
 80004d4:	23c2      	movs	r3, #194	; 0xc2
 80004d6:	723b      	strb	r3, [r7, #8]
		data[1] = nrf24l01_RX_ADDR_P1_B1_DEFAULT_VAL;
 80004d8:	23c2      	movs	r3, #194	; 0xc2
 80004da:	727b      	strb	r3, [r7, #9]
		data[2] = nrf24l01_RX_ADDR_P1_B2_DEFAULT_VAL;
 80004dc:	23c2      	movs	r3, #194	; 0xc2
 80004de:	72bb      	strb	r3, [r7, #10]
		data[3] = nrf24l01_RX_ADDR_P1_B3_DEFAULT_VAL;
 80004e0:	23c2      	movs	r3, #194	; 0xc2
 80004e2:	72fb      	strb	r3, [r7, #11]
		data[4] = nrf24l01_RX_ADDR_P1_B4_DEFAULT_VAL;
 80004e4:	23c2      	movs	r3, #194	; 0xc2
 80004e6:	733b      	strb	r3, [r7, #12]

		nrf24l01_set_rx_addr(data, 5, 1);
 80004e8:	f107 0308 	add.w	r3, r7, #8
 80004ec:	2201      	movs	r2, #1
 80004ee:	2105      	movs	r1, #5
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 f8f8 	bl	80006e6 <nrf24l01_set_rx_addr>
	}

	data[0] = rx_addr_p2;
 80004f6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80004fa:	723b      	strb	r3, [r7, #8]
	nrf24l01_set_rx_addr(data, 1, 2);
 80004fc:	f107 0308 	add.w	r3, r7, #8
 8000500:	2202      	movs	r2, #2
 8000502:	2101      	movs	r1, #1
 8000504:	4618      	mov	r0, r3
 8000506:	f000 f8ee 	bl	80006e6 <nrf24l01_set_rx_addr>

	data[0] = rx_addr_p3;
 800050a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800050e:	723b      	strb	r3, [r7, #8]
	nrf24l01_set_rx_addr(data, 1, 3);
 8000510:	f107 0308 	add.w	r3, r7, #8
 8000514:	2203      	movs	r2, #3
 8000516:	2101      	movs	r1, #1
 8000518:	4618      	mov	r0, r3
 800051a:	f000 f8e4 	bl	80006e6 <nrf24l01_set_rx_addr>

	data[0] = rx_addr_p4;
 800051e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000522:	723b      	strb	r3, [r7, #8]
	nrf24l01_set_rx_addr(data, 1, 4);
 8000524:	f107 0308 	add.w	r3, r7, #8
 8000528:	2204      	movs	r2, #4
 800052a:	2101      	movs	r1, #1
 800052c:	4618      	mov	r0, r3
 800052e:	f000 f8da 	bl	80006e6 <nrf24l01_set_rx_addr>

	data[0] = rx_addr_p5;
 8000532:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000536:	723b      	strb	r3, [r7, #8]
	nrf24l01_set_rx_addr(data, 1, 5);
 8000538:	f107 0308 	add.w	r3, r7, #8
 800053c:	2205      	movs	r2, #5
 800053e:	2101      	movs	r1, #1
 8000540:	4618      	mov	r0, r3
 8000542:	f000 f8d0 	bl	80006e6 <nrf24l01_set_rx_addr>

	if(tx_addr != NULL)
 8000546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000548:	2b00      	cmp	r3, #0
 800054a:	d004      	beq.n	8000556 <nrf24l01_initialize+0x15a>
		nrf24l01_set_tx_addr(tx_addr, 5);
 800054c:	2105      	movs	r1, #5
 800054e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000550:	f000 f8bb 	bl	80006ca <nrf24l01_set_tx_addr>
 8000554:	e00f      	b.n	8000576 <nrf24l01_initialize+0x17a>
	else
	{
		data[0] = nrf24l01_TX_ADDR_B0_DEFAULT_VAL;
 8000556:	23e7      	movs	r3, #231	; 0xe7
 8000558:	723b      	strb	r3, [r7, #8]
		data[1] = nrf24l01_TX_ADDR_B1_DEFAULT_VAL;
 800055a:	23e7      	movs	r3, #231	; 0xe7
 800055c:	727b      	strb	r3, [r7, #9]
		data[2] = nrf24l01_TX_ADDR_B2_DEFAULT_VAL;
 800055e:	23e7      	movs	r3, #231	; 0xe7
 8000560:	72bb      	strb	r3, [r7, #10]
		data[3] = nrf24l01_TX_ADDR_B3_DEFAULT_VAL;
 8000562:	23e7      	movs	r3, #231	; 0xe7
 8000564:	72fb      	strb	r3, [r7, #11]
		data[4] = nrf24l01_TX_ADDR_B4_DEFAULT_VAL;
 8000566:	23e7      	movs	r3, #231	; 0xe7
 8000568:	733b      	strb	r3, [r7, #12]

		nrf24l01_set_tx_addr(data, 5);
 800056a:	f107 0308 	add.w	r3, r7, #8
 800056e:	2105      	movs	r1, #5
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f8aa 	bl	80006ca <nrf24l01_set_tx_addr>
	}

	data[0] = rx_pw_p0;
 8000576:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800057a:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_RX_PW_P0, data, 1);
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	2201      	movs	r2, #1
 8000582:	4619      	mov	r1, r3
 8000584:	2011      	movs	r0, #17
 8000586:	f000 f886 	bl	8000696 <nrf24l01_write_register>

	data[0] = rx_pw_p1;
 800058a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800058e:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_RX_PW_P1, data, 1);
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	2201      	movs	r2, #1
 8000596:	4619      	mov	r1, r3
 8000598:	2012      	movs	r0, #18
 800059a:	f000 f87c 	bl	8000696 <nrf24l01_write_register>

	data[0] = rx_pw_p2;
 800059e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80005a2:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_RX_PW_P2, data, 1);
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	2201      	movs	r2, #1
 80005aa:	4619      	mov	r1, r3
 80005ac:	2013      	movs	r0, #19
 80005ae:	f000 f872 	bl	8000696 <nrf24l01_write_register>

	data[0] = rx_pw_p3;
 80005b2:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80005b6:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_RX_PW_P3, data, 1);
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	2201      	movs	r2, #1
 80005be:	4619      	mov	r1, r3
 80005c0:	2014      	movs	r0, #20
 80005c2:	f000 f868 	bl	8000696 <nrf24l01_write_register>

	data[0] = rx_pw_p4;
 80005c6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80005ca:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_RX_PW_P4, data, 1);
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	2015      	movs	r0, #21
 80005d6:	f000 f85e 	bl	8000696 <nrf24l01_write_register>

	data[0] = rx_pw_p5;
 80005da:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80005de:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_RX_PW_P5, data, 1);
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	2201      	movs	r2, #1
 80005e6:	4619      	mov	r1, r3
 80005e8:	2016      	movs	r0, #22
 80005ea:	f000 f854 	bl	8000696 <nrf24l01_write_register>

	if((config & nrf24l01_CONFIG_PWR_UP) != 0)
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f003 0302 	and.w	r3, r3, #2
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d006      	beq.n	8000606 <nrf24l01_initialize+0x20a>
		nrf24l01_power_up_param(opt_rx_active_mode, config);
 80005f8:	79fa      	ldrb	r2, [r7, #7]
 80005fa:	79bb      	ldrb	r3, [r7, #6]
 80005fc:	4611      	mov	r1, r2
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 f809 	bl	8000616 <nrf24l01_power_up_param>
	else
		nrf24l01_power_down_param(config);
}
 8000604:	e003      	b.n	800060e <nrf24l01_initialize+0x212>
		nrf24l01_power_down_param(config);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	4618      	mov	r0, r3
 800060a:	f000 f82e 	bl	800066a <nrf24l01_power_down_param>
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	bd90      	pop	{r4, r7, pc}

08000616 <nrf24l01_power_up_param>:
//  24L01 as a receiver.  If the argument is false, the receiver will remain in
//  standby mode and not monitor for packets.  If the argument is true, the CE
//  pin will be set and the 24L01 will monitor for packets.  In TX mode, the value
//  of this argument is insignificant.
void nrf24l01_power_up_param(bool rx_active_mode, unsigned char config)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	4603      	mov	r3, r0
 800061e:	460a      	mov	r2, r1
 8000620:	71fb      	strb	r3, [r7, #7]
 8000622:	4613      	mov	r3, r2
 8000624:	71bb      	strb	r3, [r7, #6]
	config |= nrf24l01_CONFIG_PWR_UP;
 8000626:	79bb      	ldrb	r3, [r7, #6]
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	b2db      	uxtb	r3, r3
 800062e:	71bb      	strb	r3, [r7, #6]

	nrf24l01_write_register(nrf24l01_CONFIG, &config, 1);
 8000630:	1dbb      	adds	r3, r7, #6
 8000632:	2201      	movs	r2, #1
 8000634:	4619      	mov	r1, r3
 8000636:	2000      	movs	r0, #0
 8000638:	f000 f82d 	bl	8000696 <nrf24l01_write_register>

	HAL_Delay(2U);
 800063c:	2002      	movs	r0, #2
 800063e:	f000 fa9b 	bl	8000b78 <HAL_Delay>

	if((config & nrf24l01_CONFIG_PRIM_RX) == 0)
 8000642:	79bb      	ldrb	r3, [r7, #6]
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	2b00      	cmp	r3, #0
 800064a:	d102      	bne.n	8000652 <nrf24l01_power_up_param+0x3c>
		nrf24l01_clear_ce();
 800064c:	f000 f8e0 	bl	8000810 <nrf24l01_clear_ce>
		if(rx_active_mode != false)
			nrf24l01_set_ce();
		else
			nrf24l01_clear_ce();
	}
}
 8000650:	e007      	b.n	8000662 <nrf24l01_power_up_param+0x4c>
		if(rx_active_mode != false)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d002      	beq.n	800065e <nrf24l01_power_up_param+0x48>
			nrf24l01_set_ce();
 8000658:	f000 f8ec 	bl	8000834 <nrf24l01_set_ce>
}
 800065c:	e001      	b.n	8000662 <nrf24l01_power_up_param+0x4c>
			nrf24l01_clear_ce();
 800065e:	f000 f8d7 	bl	8000810 <nrf24l01_clear_ce>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <nrf24l01_power_down_param>:

//powers down the 24L01
//this function allows the user to set the contents of the CONFIG register, but the function
//  clears the PWR_UP bit in the CONFIG register, so the user does not need to.
void nrf24l01_power_down_param(unsigned char config)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	4603      	mov	r3, r0
 8000672:	71fb      	strb	r3, [r7, #7]
	config &= (~nrf24l01_CONFIG_PWR_UP);
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	f023 0302 	bic.w	r3, r3, #2
 800067a:	b2db      	uxtb	r3, r3
 800067c:	71fb      	strb	r3, [r7, #7]

	nrf24l01_write_register(nrf24l01_CONFIG, &config, 1);
 800067e:	1dfb      	adds	r3, r7, #7
 8000680:	2201      	movs	r2, #1
 8000682:	4619      	mov	r1, r3
 8000684:	2000      	movs	r0, #0
 8000686:	f000 f806 	bl	8000696 <nrf24l01_write_register>

	nrf24l01_clear_ce();
 800068a:	f000 f8c1 	bl	8000810 <nrf24l01_clear_ce>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <nrf24l01_write_register>:
//  length for the register the address is being sent to.
//unsigned int len is always the size of unsigned char * data.  For example, if data is declared as
//  data[6], len should equal 6.
//returns the value of the STATUS register
unsigned char nrf24l01_write_register(unsigned char regnumber, unsigned char * data, unsigned int len)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b084      	sub	sp, #16
 800069a:	af00      	add	r7, sp, #0
 800069c:	4603      	mov	r3, r0
 800069e:	60b9      	str	r1, [r7, #8]
 80006a0:	607a      	str	r2, [r7, #4]
 80006a2:	73fb      	strb	r3, [r7, #15]
	return nrf24l01_execute_command(nrf24l01_W_REGISTER | (regnumber & nrf24l01_W_REGISTER_DATA), data, len, false);
 80006a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006a8:	f003 031f 	and.w	r3, r3, #31
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	f043 0320 	orr.w	r3, r3, #32
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	b2d8      	uxtb	r0, r3
 80006b6:	2300      	movs	r3, #0
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	68b9      	ldr	r1, [r7, #8]
 80006bc:	f000 f839 	bl	8000732 <nrf24l01_execute_command>
 80006c0:	4603      	mov	r3, r0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <nrf24l01_set_tx_addr>:
//unsigned char * address is the actual address to be used.  It should be sized
//	according to the tx_addr length specified to the nrf24l01.
//unsigned int len is the length of the address.  Its value should be specified
//	according to the tx_addr length specified to the nrf24l01.
void nrf24l01_set_tx_addr(unsigned char * address, unsigned int len)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b082      	sub	sp, #8
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
 80006d2:	6039      	str	r1, [r7, #0]
	nrf24l01_write_register(nrf24l01_TX_ADDR, address, len);
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	2010      	movs	r0, #16
 80006da:	f7ff ffdc 	bl	8000696 <nrf24l01_write_register>
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <nrf24l01_set_rx_addr>:
//	according to the rx_addr length specified to the nrf24l01.
//unsigned char rxpipenum is the pipe number (zero to five) whose address is being
//	specified.  If an invalid address (greater than five) is supplied, the function
//  does nothing.
void nrf24l01_set_rx_addr(unsigned char * address, unsigned int len, unsigned char rxpipenum)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b084      	sub	sp, #16
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	60f8      	str	r0, [r7, #12]
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71fb      	strb	r3, [r7, #7]
	if(rxpipenum > 5)
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d808      	bhi.n	800070c <nrf24l01_set_rx_addr+0x26>
		return;

	nrf24l01_write_register(nrf24l01_RX_ADDR_P0 + rxpipenum, address, len);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	330a      	adds	r3, #10
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	68ba      	ldr	r2, [r7, #8]
 8000702:	68f9      	ldr	r1, [r7, #12]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ffc6 	bl	8000696 <nrf24l01_write_register>
 800070a:	e000      	b.n	800070e <nrf24l01_set_rx_addr+0x28>
		return;
 800070c:	bf00      	nop
}
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <nrf24l01_irq_clear_all>:

//clear all interrupts in the status register
void nrf24l01_irq_clear_all()
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
	unsigned char data = nrf24l01_STATUS_RX_DR | nrf24l01_STATUS_TX_DS | nrf24l01_STATUS_MAX_RT;
 800071a:	2370      	movs	r3, #112	; 0x70
 800071c:	71fb      	strb	r3, [r7, #7]

	nrf24l01_write_register(nrf24l01_STATUS, &data, 1);
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	2201      	movs	r2, #1
 8000722:	4619      	mov	r1, r3
 8000724:	2007      	movs	r0, #7
 8000726:	f7ff ffb6 	bl	8000696 <nrf24l01_write_register>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <nrf24l01_execute_command>:

//low-level spi send function for library use
//the user should not call this function directly, but rather use one of the 8 SPI data instructions
unsigned char nrf24l01_execute_command(unsigned char instruction, unsigned char * data, unsigned int len, bool copydata)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b086      	sub	sp, #24
 8000736:	af00      	add	r7, sp, #0
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
 800073c:	461a      	mov	r2, r3
 800073e:	4603      	mov	r3, r0
 8000740:	73fb      	strb	r3, [r7, #15]
 8000742:	4613      	mov	r3, r2
 8000744:	73bb      	strb	r3, [r7, #14]
	unsigned char status;

	nrf24l01_clear_csn();
 8000746:	f000 f887 	bl	8000858 <nrf24l01_clear_csn>

	status = instruction;
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	75fb      	strb	r3, [r7, #23]
	nrf24l01_spi_send_read(&status, 1, true);
 800074e:	f107 0317 	add.w	r3, r7, #23
 8000752:	2201      	movs	r2, #1
 8000754:	2101      	movs	r1, #1
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f80e 	bl	8000778 <nrf24l01_spi_send_read>
	nrf24l01_spi_send_read(data, len, copydata);
 800075c:	7bbb      	ldrb	r3, [r7, #14]
 800075e:	461a      	mov	r2, r3
 8000760:	6879      	ldr	r1, [r7, #4]
 8000762:	68b8      	ldr	r0, [r7, #8]
 8000764:	f000 f808 	bl	8000778 <nrf24l01_spi_send_read>

	nrf24l01_set_csn();
 8000768:	f000 f888 	bl	800087c <nrf24l01_set_csn>

	return status;
 800076c:	7dfb      	ldrb	r3, [r7, #23]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <nrf24l01_spi_send_read>:

//low-level spi send function for library use
//the user should not call this function directly, but rather use one of the 8 SPI data instructions
void nrf24l01_spi_send_read(unsigned char * data, unsigned int len, bool copydata)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af02      	add	r7, sp, #8
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	4613      	mov	r3, r2
 8000784:	71fb      	strb	r3, [r7, #7]
	unsigned int count;
	unsigned char tempbyte;

	for(count = 0; count < len; count++)
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	e021      	b.n	80007d0 <nrf24l01_spi_send_read+0x58>
	{
		if(copydata != false)
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d00c      	beq.n	80007ac <nrf24l01_spi_send_read+0x34>
			HAL_SPI_TransmitReceive(&hspi2, &data[count], &data[count], 1U, 100U);
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	18d1      	adds	r1, r2, r3
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	441a      	add	r2, r3
 800079e:	2364      	movs	r3, #100	; 0x64
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	2301      	movs	r3, #1
 80007a4:	480e      	ldr	r0, [pc, #56]	; (80007e0 <nrf24l01_spi_send_read+0x68>)
 80007a6:	f001 f904 	bl	80019b2 <HAL_SPI_TransmitReceive>
 80007aa:	e00e      	b.n	80007ca <nrf24l01_spi_send_read+0x52>
		else
		{
			uint8_t dummy;
			tempbyte = data[count];
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	74fb      	strb	r3, [r7, #19]
			HAL_SPI_TransmitReceive(&hspi2, &tempbyte, &dummy, 1U, 100U);
 80007b6:	f107 0212 	add.w	r2, r7, #18
 80007ba:	f107 0113 	add.w	r1, r7, #19
 80007be:	2364      	movs	r3, #100	; 0x64
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	2301      	movs	r3, #1
 80007c4:	4806      	ldr	r0, [pc, #24]	; (80007e0 <nrf24l01_spi_send_read+0x68>)
 80007c6:	f001 f8f4 	bl	80019b2 <HAL_SPI_TransmitReceive>
	for(count = 0; count < len; count++)
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	3301      	adds	r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d3d9      	bcc.n	800078c <nrf24l01_spi_send_read+0x14>
		}
	}
}
 80007d8:	bf00      	nop
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000002c 	.word	0x2000002c

080007e4 <nrf24l01_read_rx_payload>:
//	initialized by the user.
//unsigned int len is the length of the payload being clocked out of the nrf24l01 (this
//	should be sized according to the payload length specified to the nrf24l01).
//returns the value of the STATUS register
unsigned char nrf24l01_read_rx_payload(unsigned char * data, unsigned int len)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
	unsigned char status;

	nrf24l01_clear_ce();
 80007ee:	f000 f80f 	bl	8000810 <nrf24l01_clear_ce>
	status = nrf24l01_execute_command(nrf24l01_R_RX_PAYLOAD, data, len, true);
 80007f2:	2301      	movs	r3, #1
 80007f4:	683a      	ldr	r2, [r7, #0]
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	2061      	movs	r0, #97	; 0x61
 80007fa:	f7ff ff9a 	bl	8000732 <nrf24l01_execute_command>
 80007fe:	4603      	mov	r3, r0
 8000800:	73fb      	strb	r3, [r7, #15]
	nrf24l01_set_ce();
 8000802:	f000 f817 	bl	8000834 <nrf24l01_set_ce>

	return status;
 8000806:	7bfb      	ldrb	r3, [r7, #15]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <nrf24l01_clear_ce>:

//clears the pin on the host microcontroller that is attached to the 24l01's CE pin
void nrf24l01_clear_ce()
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 7100 	mov.w	r1, #512	; 0x200
 800081a:	4804      	ldr	r0, [pc, #16]	; (800082c <nrf24l01_clear_ce+0x1c>)
 800081c:	f000 fc36 	bl	800108c <HAL_GPIO_WritePin>
	ce_active = true;
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <nrf24l01_clear_ce+0x20>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40010c00 	.word	0x40010c00
 8000830:	20000029 	.word	0x20000029

08000834 <nrf24l01_set_ce>:

//sets the pin on the host microcontroller that is attached to the 24l01's CE pin
void nrf24l01_set_ce()
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083e:	4804      	ldr	r0, [pc, #16]	; (8000850 <nrf24l01_set_ce+0x1c>)
 8000840:	f000 fc24 	bl	800108c <HAL_GPIO_WritePin>
	ce_active = false;
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <nrf24l01_set_ce+0x20>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40010c00 	.word	0x40010c00
 8000854:	20000029 	.word	0x20000029

08000858 <nrf24l01_clear_csn>:

//sets the pin on the host microcontroller that is attached to the 24l01's CSN pin
void nrf24l01_clear_csn()
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000862:	4804      	ldr	r0, [pc, #16]	; (8000874 <nrf24l01_clear_csn+0x1c>)
 8000864:	f000 fc12 	bl	800108c <HAL_GPIO_WritePin>
	csn_active = true;
 8000868:	4b03      	ldr	r3, [pc, #12]	; (8000878 <nrf24l01_clear_csn+0x20>)
 800086a:	2201      	movs	r2, #1
 800086c:	701a      	strb	r2, [r3, #0]
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40010c00 	.word	0x40010c00
 8000878:	20000028 	.word	0x20000028

0800087c <nrf24l01_set_csn>:

//clears the pin on the host microcontroller that is attached to the 24l01's CSN pin
void nrf24l01_set_csn()
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <nrf24l01_set_csn+0x1c>)
 8000888:	f000 fc00 	bl	800108c <HAL_GPIO_WritePin>
	csn_active = false;
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <nrf24l01_set_csn+0x20>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40010c00 	.word	0x40010c00
 800089c:	20000028 	.word	0x20000028

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <HAL_MspInit+0x5c>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	4a14      	ldr	r2, [pc, #80]	; (80008fc <HAL_MspInit+0x5c>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6193      	str	r3, [r2, #24]
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_MspInit+0x5c>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x5c>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <HAL_MspInit+0x5c>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	61d3      	str	r3, [r2, #28]
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <HAL_MspInit+0x5c>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <HAL_MspInit+0x60>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	4a04      	ldr	r2, [pc, #16]	; (8000900 <HAL_MspInit+0x60>)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010000 	.word	0x40010000

08000904 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a1c      	ldr	r2, [pc, #112]	; (8000990 <HAL_SPI_MspInit+0x8c>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d131      	bne.n	8000988 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <HAL_SPI_MspInit+0x90>)
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	4a1a      	ldr	r2, [pc, #104]	; (8000994 <HAL_SPI_MspInit+0x90>)
 800092a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092e:	61d3      	str	r3, [r2, #28]
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <HAL_SPI_MspInit+0x90>)
 8000932:	69db      	ldr	r3, [r3, #28]
 8000934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_SPI_MspInit+0x90>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a14      	ldr	r2, [pc, #80]	; (8000994 <HAL_SPI_MspInit+0x90>)
 8000942:	f043 0308 	orr.w	r3, r3, #8
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_SPI_MspInit+0x90>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0308 	and.w	r3, r3, #8
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000954:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000958:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	4619      	mov	r1, r3
 8000968:	480b      	ldr	r0, [pc, #44]	; (8000998 <HAL_SPI_MspInit+0x94>)
 800096a:	f000 fa35 	bl	8000dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800096e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	4619      	mov	r1, r3
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <HAL_SPI_MspInit+0x94>)
 8000984:	f000 fa28 	bl	8000dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000988:	bf00      	nop
 800098a:	3720      	adds	r7, #32
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40003800 	.word	0x40003800
 8000994:	40021000 	.word	0x40021000
 8000998:	40010c00 	.word	0x40010c00

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <HardFault_Handler+0x4>

080009ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <MemManage_Handler+0x4>

080009b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <BusFault_Handler+0x4>

080009ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <UsageFault_Handler+0x4>

080009c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e8:	f000 f8aa 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80009f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009f8:	f000 fb78 	bl	80010ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a04:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <SystemInit+0x5c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a14      	ldr	r2, [pc, #80]	; (8000a5c <SystemInit+0x5c>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000a10:	4b12      	ldr	r3, [pc, #72]	; (8000a5c <SystemInit+0x5c>)
 8000a12:	685a      	ldr	r2, [r3, #4]
 8000a14:	4911      	ldr	r1, [pc, #68]	; (8000a5c <SystemInit+0x5c>)
 8000a16:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <SystemInit+0x60>)
 8000a18:	4013      	ands	r3, r2
 8000a1a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <SystemInit+0x5c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <SystemInit+0x5c>)
 8000a22:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a2a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <SystemInit+0x5c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <SystemInit+0x5c>)
 8000a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a36:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <SystemInit+0x5c>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <SystemInit+0x5c>)
 8000a3e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a42:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <SystemInit+0x5c>)
 8000a46:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a4a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <SystemInit+0x64>)
 8000a4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a52:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	f8ff0000 	.word	0xf8ff0000
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a68:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a6a:	e003      	b.n	8000a74 <LoopCopyDataInit>

08000a6c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a6e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a70:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a72:	3104      	adds	r1, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a74:	480a      	ldr	r0, [pc, #40]	; (8000aa0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a78:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a7a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a7c:	d3f6      	bcc.n	8000a6c <CopyDataInit>
  ldr r2, =_sbss
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a80:	e002      	b.n	8000a88 <LoopFillZerobss>

08000a82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a84:	f842 3b04 	str.w	r3, [r2], #4

08000a88 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a8a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a8c:	d3f9      	bcc.n	8000a82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a8e:	f7ff ffb7 	bl	8000a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a92:	f001 f9b9 	bl	8001e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a96:	f7ff fb75 	bl	8000184 <main>
  bx lr
 8000a9a:	4770      	bx	lr
  ldr r3, =_sidata
 8000a9c:	08001ea4 	.word	0x08001ea4
  ldr r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000aa4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000aa8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000aac:	20000088 	.word	0x20000088

08000ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_2_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_Init+0x28>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_Init+0x28>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 f945 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f000 f808 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f7ff fee6 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40022000 	.word	0x40022000

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x54>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x58>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f95d 	bl	8000dbe <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00e      	b.n	8000b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d80a      	bhi.n	8000b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f000 f925 	bl	8000d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <HAL_InitTick+0x5c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x1c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x20>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <HAL_IncTick+0x20>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000084 	.word	0x20000084

08000b64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <HAL_GetTick+0x10>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	20000084 	.word	0x20000084

08000b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff fff0 	bl	8000b64 <HAL_GetTick>
 8000b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_Delay+0x40>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9e:	bf00      	nop
 8000ba0:	f7ff ffe0 	bl	8000b64 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000008 	.word	0x20000008

08000bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db0b      	blt.n	8000c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	4906      	ldr	r1, [pc, #24]	; (8000c54 <__NVIC_EnableIRQ+0x34>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	; 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f7ff ff90 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff2d 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff42 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff90 	bl	8000cac <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5f 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff35 	bl	8000c20 <__NVIC_EnableIRQ>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ffa2 	bl	8000d10 <SysTick_Config>
 8000dcc:	4603      	mov	r3, r0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b08b      	sub	sp, #44	; 0x2c
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dea:	e127      	b.n	800103c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dec:	2201      	movs	r2, #1
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	69fa      	ldr	r2, [r7, #28]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	f040 8116 	bne.w	8001036 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b12      	cmp	r3, #18
 8000e10:	d034      	beq.n	8000e7c <HAL_GPIO_Init+0xa4>
 8000e12:	2b12      	cmp	r3, #18
 8000e14:	d80d      	bhi.n	8000e32 <HAL_GPIO_Init+0x5a>
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d02b      	beq.n	8000e72 <HAL_GPIO_Init+0x9a>
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d804      	bhi.n	8000e28 <HAL_GPIO_Init+0x50>
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d031      	beq.n	8000e86 <HAL_GPIO_Init+0xae>
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d01c      	beq.n	8000e60 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e26:	e048      	b.n	8000eba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d043      	beq.n	8000eb4 <HAL_GPIO_Init+0xdc>
 8000e2c:	2b11      	cmp	r3, #17
 8000e2e:	d01b      	beq.n	8000e68 <HAL_GPIO_Init+0x90>
          break;
 8000e30:	e043      	b.n	8000eba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e32:	4a89      	ldr	r2, [pc, #548]	; (8001058 <HAL_GPIO_Init+0x280>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d026      	beq.n	8000e86 <HAL_GPIO_Init+0xae>
 8000e38:	4a87      	ldr	r2, [pc, #540]	; (8001058 <HAL_GPIO_Init+0x280>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d806      	bhi.n	8000e4c <HAL_GPIO_Init+0x74>
 8000e3e:	4a87      	ldr	r2, [pc, #540]	; (800105c <HAL_GPIO_Init+0x284>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d020      	beq.n	8000e86 <HAL_GPIO_Init+0xae>
 8000e44:	4a86      	ldr	r2, [pc, #536]	; (8001060 <HAL_GPIO_Init+0x288>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d01d      	beq.n	8000e86 <HAL_GPIO_Init+0xae>
          break;
 8000e4a:	e036      	b.n	8000eba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e4c:	4a85      	ldr	r2, [pc, #532]	; (8001064 <HAL_GPIO_Init+0x28c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d019      	beq.n	8000e86 <HAL_GPIO_Init+0xae>
 8000e52:	4a85      	ldr	r2, [pc, #532]	; (8001068 <HAL_GPIO_Init+0x290>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d016      	beq.n	8000e86 <HAL_GPIO_Init+0xae>
 8000e58:	4a84      	ldr	r2, [pc, #528]	; (800106c <HAL_GPIO_Init+0x294>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d013      	beq.n	8000e86 <HAL_GPIO_Init+0xae>
          break;
 8000e5e:	e02c      	b.n	8000eba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	623b      	str	r3, [r7, #32]
          break;
 8000e66:	e028      	b.n	8000eba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	623b      	str	r3, [r7, #32]
          break;
 8000e70:	e023      	b.n	8000eba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	3308      	adds	r3, #8
 8000e78:	623b      	str	r3, [r7, #32]
          break;
 8000e7a:	e01e      	b.n	8000eba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	330c      	adds	r3, #12
 8000e82:	623b      	str	r3, [r7, #32]
          break;
 8000e84:	e019      	b.n	8000eba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d102      	bne.n	8000e94 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e8e:	2304      	movs	r3, #4
 8000e90:	623b      	str	r3, [r7, #32]
          break;
 8000e92:	e012      	b.n	8000eba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d105      	bne.n	8000ea8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69fa      	ldr	r2, [r7, #28]
 8000ea4:	611a      	str	r2, [r3, #16]
          break;
 8000ea6:	e008      	b.n	8000eba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ea8:	2308      	movs	r3, #8
 8000eaa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69fa      	ldr	r2, [r7, #28]
 8000eb0:	615a      	str	r2, [r3, #20]
          break;
 8000eb2:	e002      	b.n	8000eba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
          break;
 8000eb8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	2bff      	cmp	r3, #255	; 0xff
 8000ebe:	d801      	bhi.n	8000ec4 <HAL_GPIO_Init+0xec>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	e001      	b.n	8000ec8 <HAL_GPIO_Init+0xf0>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	2bff      	cmp	r3, #255	; 0xff
 8000ece:	d802      	bhi.n	8000ed6 <HAL_GPIO_Init+0xfe>
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_Init+0x104>
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	3b08      	subs	r3, #8
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	401a      	ands	r2, r3
 8000eee:	6a39      	ldr	r1, [r7, #32]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 8096 	beq.w	8001036 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f0a:	4b59      	ldr	r3, [pc, #356]	; (8001070 <HAL_GPIO_Init+0x298>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	4a58      	ldr	r2, [pc, #352]	; (8001070 <HAL_GPIO_Init+0x298>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6193      	str	r3, [r2, #24]
 8000f16:	4b56      	ldr	r3, [pc, #344]	; (8001070 <HAL_GPIO_Init+0x298>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f22:	4a54      	ldr	r2, [pc, #336]	; (8001074 <HAL_GPIO_Init+0x29c>)
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	4013      	ands	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4b      	ldr	r2, [pc, #300]	; (8001078 <HAL_GPIO_Init+0x2a0>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d013      	beq.n	8000f76 <HAL_GPIO_Init+0x19e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4a      	ldr	r2, [pc, #296]	; (800107c <HAL_GPIO_Init+0x2a4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00d      	beq.n	8000f72 <HAL_GPIO_Init+0x19a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a49      	ldr	r2, [pc, #292]	; (8001080 <HAL_GPIO_Init+0x2a8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d007      	beq.n	8000f6e <HAL_GPIO_Init+0x196>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a48      	ldr	r2, [pc, #288]	; (8001084 <HAL_GPIO_Init+0x2ac>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d101      	bne.n	8000f6a <HAL_GPIO_Init+0x192>
 8000f66:	2303      	movs	r3, #3
 8000f68:	e006      	b.n	8000f78 <HAL_GPIO_Init+0x1a0>
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	e004      	b.n	8000f78 <HAL_GPIO_Init+0x1a0>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	e002      	b.n	8000f78 <HAL_GPIO_Init+0x1a0>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <HAL_GPIO_Init+0x1a0>
 8000f76:	2300      	movs	r3, #0
 8000f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f7a:	f002 0203 	and.w	r2, r2, #3
 8000f7e:	0092      	lsls	r2, r2, #2
 8000f80:	4093      	lsls	r3, r2
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f88:	493a      	ldr	r1, [pc, #232]	; (8001074 <HAL_GPIO_Init+0x29c>)
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d006      	beq.n	8000fb0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fa2:	4b39      	ldr	r3, [pc, #228]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4938      	ldr	r1, [pc, #224]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	600b      	str	r3, [r1, #0]
 8000fae:	e006      	b.n	8000fbe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fb0:	4b35      	ldr	r3, [pc, #212]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	4933      	ldr	r1, [pc, #204]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 8000fba:	4013      	ands	r3, r2
 8000fbc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d006      	beq.n	8000fd8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fca:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	492e      	ldr	r1, [pc, #184]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	604b      	str	r3, [r1, #4]
 8000fd6:	e006      	b.n	8000fe6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	4929      	ldr	r1, [pc, #164]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d006      	beq.n	8001000 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	4924      	ldr	r1, [pc, #144]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	608b      	str	r3, [r1, #8]
 8000ffe:	e006      	b.n	800100e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001000:	4b21      	ldr	r3, [pc, #132]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	43db      	mvns	r3, r3
 8001008:	491f      	ldr	r1, [pc, #124]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 800100a:	4013      	ands	r3, r2
 800100c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d006      	beq.n	8001028 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800101a:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	491a      	ldr	r1, [pc, #104]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	60cb      	str	r3, [r1, #12]
 8001026:	e006      	b.n	8001036 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	43db      	mvns	r3, r3
 8001030:	4915      	ldr	r1, [pc, #84]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 8001032:	4013      	ands	r3, r2
 8001034:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	3301      	adds	r3, #1
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	fa22 f303 	lsr.w	r3, r2, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	f47f aed0 	bne.w	8000dec <HAL_GPIO_Init+0x14>
  }
}
 800104c:	bf00      	nop
 800104e:	372c      	adds	r7, #44	; 0x2c
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	10210000 	.word	0x10210000
 800105c:	10110000 	.word	0x10110000
 8001060:	10120000 	.word	0x10120000
 8001064:	10310000 	.word	0x10310000
 8001068:	10320000 	.word	0x10320000
 800106c:	10220000 	.word	0x10220000
 8001070:	40021000 	.word	0x40021000
 8001074:	40010000 	.word	0x40010000
 8001078:	40010800 	.word	0x40010800
 800107c:	40010c00 	.word	0x40010c00
 8001080:	40011000 	.word	0x40011000
 8001084:	40011400 	.word	0x40011400
 8001088:	40010400 	.word	0x40010400

0800108c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800109c:	787b      	ldrb	r3, [r7, #1]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010a8:	e003      	b.n	80010b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	041a      	lsls	r2, r3, #16
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	611a      	str	r2, [r3, #16]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010d4:	887a      	ldrh	r2, [r7, #2]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80010da:	e002      	b.n	80010e2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010dc:	887a      	ldrh	r2, [r7, #2]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	611a      	str	r2, [r3, #16]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010f8:	695a      	ldr	r2, [r3, #20]
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	4013      	ands	r3, r2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d006      	beq.n	8001110 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f81e 	bl	800014c <HAL_GPIO_EXTI_Callback>
  }
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e26c      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 8087 	beq.w	800124a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800113c:	4b92      	ldr	r3, [pc, #584]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 030c 	and.w	r3, r3, #12
 8001144:	2b04      	cmp	r3, #4
 8001146:	d00c      	beq.n	8001162 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001148:	4b8f      	ldr	r3, [pc, #572]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 030c 	and.w	r3, r3, #12
 8001150:	2b08      	cmp	r3, #8
 8001152:	d112      	bne.n	800117a <HAL_RCC_OscConfig+0x5e>
 8001154:	4b8c      	ldr	r3, [pc, #560]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001160:	d10b      	bne.n	800117a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001162:	4b89      	ldr	r3, [pc, #548]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d06c      	beq.n	8001248 <HAL_RCC_OscConfig+0x12c>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d168      	bne.n	8001248 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e246      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001182:	d106      	bne.n	8001192 <HAL_RCC_OscConfig+0x76>
 8001184:	4b80      	ldr	r3, [pc, #512]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a7f      	ldr	r2, [pc, #508]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 800118a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	e02e      	b.n	80011f0 <HAL_RCC_OscConfig+0xd4>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10c      	bne.n	80011b4 <HAL_RCC_OscConfig+0x98>
 800119a:	4b7b      	ldr	r3, [pc, #492]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a7a      	ldr	r2, [pc, #488]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	4b78      	ldr	r3, [pc, #480]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a77      	ldr	r2, [pc, #476]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e01d      	b.n	80011f0 <HAL_RCC_OscConfig+0xd4>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011bc:	d10c      	bne.n	80011d8 <HAL_RCC_OscConfig+0xbc>
 80011be:	4b72      	ldr	r3, [pc, #456]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a71      	ldr	r2, [pc, #452]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	4b6f      	ldr	r3, [pc, #444]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a6e      	ldr	r2, [pc, #440]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	e00b      	b.n	80011f0 <HAL_RCC_OscConfig+0xd4>
 80011d8:	4b6b      	ldr	r3, [pc, #428]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a6a      	ldr	r2, [pc, #424]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b68      	ldr	r3, [pc, #416]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a67      	ldr	r2, [pc, #412]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d013      	beq.n	8001220 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f8:	f7ff fcb4 	bl	8000b64 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff fcb0 	bl	8000b64 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b64      	cmp	r3, #100	; 0x64
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e1fa      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	4b5d      	ldr	r3, [pc, #372]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0xe4>
 800121e:	e014      	b.n	800124a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fca0 	bl	8000b64 <HAL_GetTick>
 8001224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001228:	f7ff fc9c 	bl	8000b64 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	; 0x64
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e1e6      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123a:	4b53      	ldr	r3, [pc, #332]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x10c>
 8001246:	e000      	b.n	800124a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d063      	beq.n	800131e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001256:	4b4c      	ldr	r3, [pc, #304]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00b      	beq.n	800127a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001262:	4b49      	ldr	r3, [pc, #292]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b08      	cmp	r3, #8
 800126c:	d11c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x18c>
 800126e:	4b46      	ldr	r3, [pc, #280]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d116      	bne.n	80012a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127a:	4b43      	ldr	r3, [pc, #268]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <HAL_RCC_OscConfig+0x176>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d001      	beq.n	8001292 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e1ba      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	00db      	lsls	r3, r3, #3
 80012a0:	4939      	ldr	r1, [pc, #228]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a6:	e03a      	b.n	800131e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d020      	beq.n	80012f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012b0:	4b36      	ldr	r3, [pc, #216]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b6:	f7ff fc55 	bl	8000b64 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012be:	f7ff fc51 	bl	8000b64 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e19b      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d0:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0f0      	beq.n	80012be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012dc:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4927      	ldr	r1, [pc, #156]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]
 80012f0:	e015      	b.n	800131e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fc34 	bl	8000b64 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001300:	f7ff fc30 	bl	8000b64 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e17a      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d03a      	beq.n	80013a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d019      	beq.n	8001366 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <HAL_RCC_OscConfig+0x274>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001338:	f7ff fc14 	bl	8000b64 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001340:	f7ff fc10 	bl	8000b64 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e15a      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001352:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <HAL_RCC_OscConfig+0x26c>)
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800135e:	2001      	movs	r0, #1
 8001360:	f000 faa8 	bl	80018b4 <RCC_Delay>
 8001364:	e01c      	b.n	80013a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_RCC_OscConfig+0x274>)
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136c:	f7ff fbfa 	bl	8000b64 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001372:	e00f      	b.n	8001394 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001374:	f7ff fbf6 	bl	8000b64 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d908      	bls.n	8001394 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e140      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	42420000 	.word	0x42420000
 8001390:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001394:	4b9e      	ldr	r3, [pc, #632]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1e9      	bne.n	8001374 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80a6 	beq.w	80014fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013b2:	4b97      	ldr	r3, [pc, #604]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10d      	bne.n	80013da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b94      	ldr	r3, [pc, #592]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	4a93      	ldr	r2, [pc, #588]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	61d3      	str	r3, [r2, #28]
 80013ca:	4b91      	ldr	r3, [pc, #580]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013d6:	2301      	movs	r3, #1
 80013d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013da:	4b8e      	ldr	r3, [pc, #568]	; (8001614 <HAL_RCC_OscConfig+0x4f8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d118      	bne.n	8001418 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013e6:	4b8b      	ldr	r3, [pc, #556]	; (8001614 <HAL_RCC_OscConfig+0x4f8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a8a      	ldr	r2, [pc, #552]	; (8001614 <HAL_RCC_OscConfig+0x4f8>)
 80013ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fbb7 	bl	8000b64 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fa:	f7ff fbb3 	bl	8000b64 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b64      	cmp	r3, #100	; 0x64
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e0fd      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140c:	4b81      	ldr	r3, [pc, #516]	; (8001614 <HAL_RCC_OscConfig+0x4f8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d106      	bne.n	800142e <HAL_RCC_OscConfig+0x312>
 8001420:	4b7b      	ldr	r3, [pc, #492]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	4a7a      	ldr	r2, [pc, #488]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6213      	str	r3, [r2, #32]
 800142c:	e02d      	b.n	800148a <HAL_RCC_OscConfig+0x36e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10c      	bne.n	8001450 <HAL_RCC_OscConfig+0x334>
 8001436:	4b76      	ldr	r3, [pc, #472]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	4a75      	ldr	r2, [pc, #468]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 800143c:	f023 0301 	bic.w	r3, r3, #1
 8001440:	6213      	str	r3, [r2, #32]
 8001442:	4b73      	ldr	r3, [pc, #460]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4a72      	ldr	r2, [pc, #456]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001448:	f023 0304 	bic.w	r3, r3, #4
 800144c:	6213      	str	r3, [r2, #32]
 800144e:	e01c      	b.n	800148a <HAL_RCC_OscConfig+0x36e>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b05      	cmp	r3, #5
 8001456:	d10c      	bne.n	8001472 <HAL_RCC_OscConfig+0x356>
 8001458:	4b6d      	ldr	r3, [pc, #436]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	4a6c      	ldr	r2, [pc, #432]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	6213      	str	r3, [r2, #32]
 8001464:	4b6a      	ldr	r3, [pc, #424]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4a69      	ldr	r2, [pc, #420]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6213      	str	r3, [r2, #32]
 8001470:	e00b      	b.n	800148a <HAL_RCC_OscConfig+0x36e>
 8001472:	4b67      	ldr	r3, [pc, #412]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	4a66      	ldr	r2, [pc, #408]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	6213      	str	r3, [r2, #32]
 800147e:	4b64      	ldr	r3, [pc, #400]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4a63      	ldr	r2, [pc, #396]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	f023 0304 	bic.w	r3, r3, #4
 8001488:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d015      	beq.n	80014be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001492:	f7ff fb67 	bl	8000b64 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001498:	e00a      	b.n	80014b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800149a:	f7ff fb63 	bl	8000b64 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e0ab      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b0:	4b57      	ldr	r3, [pc, #348]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0ee      	beq.n	800149a <HAL_RCC_OscConfig+0x37e>
 80014bc:	e014      	b.n	80014e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014be:	f7ff fb51 	bl	8000b64 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c4:	e00a      	b.n	80014dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c6:	f7ff fb4d 	bl	8000b64 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e095      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014dc:	4b4c      	ldr	r3, [pc, #304]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1ee      	bne.n	80014c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d105      	bne.n	80014fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ee:	4b48      	ldr	r3, [pc, #288]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	4a47      	ldr	r2, [pc, #284]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80014f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8081 	beq.w	8001606 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001504:	4b42      	ldr	r3, [pc, #264]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 030c 	and.w	r3, r3, #12
 800150c:	2b08      	cmp	r3, #8
 800150e:	d061      	beq.n	80015d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d146      	bne.n	80015a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001518:	4b3f      	ldr	r3, [pc, #252]	; (8001618 <HAL_RCC_OscConfig+0x4fc>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151e:	f7ff fb21 	bl	8000b64 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001526:	f7ff fb1d 	bl	8000b64 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e067      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001538:	4b35      	ldr	r3, [pc, #212]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1f0      	bne.n	8001526 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800154c:	d108      	bne.n	8001560 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800154e:	4b30      	ldr	r3, [pc, #192]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	492d      	ldr	r1, [pc, #180]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a19      	ldr	r1, [r3, #32]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	430b      	orrs	r3, r1
 8001572:	4927      	ldr	r1, [pc, #156]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <HAL_RCC_OscConfig+0x4fc>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff faf1 	bl	8000b64 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001586:	f7ff faed 	bl	8000b64 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e037      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x46a>
 80015a4:	e02f      	b.n	8001606 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a6:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <HAL_RCC_OscConfig+0x4fc>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fada 	bl	8000b64 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff fad6 	bl	8000b64 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e020      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x498>
 80015d2:	e018      	b.n	8001606 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e013      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_RCC_OscConfig+0x4f4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d106      	bne.n	8001602 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fe:	429a      	cmp	r2, r3
 8001600:	d001      	beq.n	8001606 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40021000 	.word	0x40021000
 8001614:	40007000 	.word	0x40007000
 8001618:	42420060 	.word	0x42420060

0800161c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0d0      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001630:	4b6a      	ldr	r3, [pc, #424]	; (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d910      	bls.n	8001660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163e:	4b67      	ldr	r3, [pc, #412]	; (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f023 0207 	bic.w	r2, r3, #7
 8001646:	4965      	ldr	r1, [pc, #404]	; (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	4313      	orrs	r3, r2
 800164c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800164e:	4b63      	ldr	r3, [pc, #396]	; (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d001      	beq.n	8001660 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e0b8      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d020      	beq.n	80016ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001678:	4b59      	ldr	r3, [pc, #356]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	4a58      	ldr	r2, [pc, #352]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001682:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001690:	4b53      	ldr	r3, [pc, #332]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	4a52      	ldr	r2, [pc, #328]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800169a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800169c:	4b50      	ldr	r3, [pc, #320]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	494d      	ldr	r1, [pc, #308]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d040      	beq.n	800173c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d107      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	4b47      	ldr	r3, [pc, #284]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d115      	bne.n	80016fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e07f      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d107      	bne.n	80016ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016da:	4b41      	ldr	r3, [pc, #260]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d109      	bne.n	80016fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e073      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ea:	4b3d      	ldr	r3, [pc, #244]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e06b      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016fa:	4b39      	ldr	r3, [pc, #228]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f023 0203 	bic.w	r2, r3, #3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	4936      	ldr	r1, [pc, #216]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800170c:	f7ff fa2a 	bl	8000b64 <HAL_GetTick>
 8001710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001712:	e00a      	b.n	800172a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001714:	f7ff fa26 	bl	8000b64 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001722:	4293      	cmp	r3, r2
 8001724:	d901      	bls.n	800172a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e053      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172a:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 020c 	and.w	r2, r3, #12
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	429a      	cmp	r2, r3
 800173a:	d1eb      	bne.n	8001714 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d210      	bcs.n	800176c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b24      	ldr	r3, [pc, #144]	; (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 0207 	bic.w	r2, r3, #7
 8001752:	4922      	ldr	r1, [pc, #136]	; (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	4b20      	ldr	r3, [pc, #128]	; (80017dc <HAL_RCC_ClockConfig+0x1c0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e032      	b.n	80017d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d008      	beq.n	800178a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	4916      	ldr	r1, [pc, #88]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001786:	4313      	orrs	r3, r2
 8001788:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d009      	beq.n	80017aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	490e      	ldr	r1, [pc, #56]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017aa:	f000 f821 	bl	80017f0 <HAL_RCC_GetSysClockFreq>
 80017ae:	4601      	mov	r1, r0
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <HAL_RCC_ClockConfig+0x1c8>)
 80017bc:	5cd3      	ldrb	r3, [r2, r3]
 80017be:	fa21 f303 	lsr.w	r3, r1, r3
 80017c2:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <HAL_RCC_ClockConfig+0x1cc>)
 80017c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_RCC_ClockConfig+0x1d0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff f988 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40022000 	.word	0x40022000
 80017e0:	40021000 	.word	0x40021000
 80017e4:	08001e8c 	.word	0x08001e8c
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f0:	b490      	push	{r4, r7}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017f6:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80017f8:	1d3c      	adds	r4, r7, #4
 80017fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001800:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
 800180a:	2300      	movs	r3, #0
 800180c:	61bb      	str	r3, [r7, #24]
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800181a:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b04      	cmp	r3, #4
 8001828:	d002      	beq.n	8001830 <HAL_RCC_GetSysClockFreq+0x40>
 800182a:	2b08      	cmp	r3, #8
 800182c:	d003      	beq.n	8001836 <HAL_RCC_GetSysClockFreq+0x46>
 800182e:	e02d      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001830:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001832:	623b      	str	r3, [r7, #32]
      break;
 8001834:	e02d      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	0c9b      	lsrs	r3, r3, #18
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001842:	4413      	add	r3, r2
 8001844:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001848:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d013      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	0c5b      	lsrs	r3, r3, #17
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001862:	4413      	add	r3, r2
 8001864:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001868:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	4a0f      	ldr	r2, [pc, #60]	; (80018ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800186e:	fb02 f203 	mul.w	r2, r2, r3
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	fbb2 f3f3 	udiv	r3, r2, r3
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
 800187a:	e004      	b.n	8001886 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	4a0c      	ldr	r2, [pc, #48]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001880:	fb02 f303 	mul.w	r3, r2, r3
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	623b      	str	r3, [r7, #32]
      break;
 800188a:	e002      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800188e:	623b      	str	r3, [r7, #32]
      break;
 8001890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001892:	6a3b      	ldr	r3, [r7, #32]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3728      	adds	r7, #40	; 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bc90      	pop	{r4, r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	08001e78 	.word	0x08001e78
 80018a4:	08001e88 	.word	0x08001e88
 80018a8:	40021000 	.word	0x40021000
 80018ac:	007a1200 	.word	0x007a1200
 80018b0:	003d0900 	.word	0x003d0900

080018b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <RCC_Delay+0x34>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <RCC_Delay+0x38>)
 80018c2:	fba2 2303 	umull	r2, r3, r2, r3
 80018c6:	0a5b      	lsrs	r3, r3, #9
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018d0:	bf00      	nop
  }
  while (Delay --);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1e5a      	subs	r2, r3, #1
 80018d6:	60fa      	str	r2, [r7, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f9      	bne.n	80018d0 <RCC_Delay+0x1c>
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000000 	.word	0x20000000
 80018ec:	10624dd3 	.word	0x10624dd3

080018f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e053      	b.n	80019aa <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d106      	bne.n	8001922 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7fe fff1 	bl	8000904 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2202      	movs	r2, #2
 8001926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001938:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	ea42 0103 	orr.w	r1, r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	0c1a      	lsrs	r2, r3, #16
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f002 0204 	and.w	r2, r2, #4
 8001988:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	69da      	ldr	r2, [r3, #28]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001998:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b08c      	sub	sp, #48	; 0x30
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80019c0:	2301      	movs	r3, #1
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d101      	bne.n	80019d8 <HAL_SPI_TransmitReceive+0x26>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e18a      	b.n	8001cee <HAL_SPI_TransmitReceive+0x33c>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019e0:	f7ff f8c0 	bl	8000b64 <HAL_GetTick>
 80019e4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80019f6:	887b      	ldrh	r3, [r7, #2]
 80019f8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80019fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d00f      	beq.n	8001a22 <HAL_SPI_TransmitReceive+0x70>
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a08:	d107      	bne.n	8001a1a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d103      	bne.n	8001a1a <HAL_SPI_TransmitReceive+0x68>
 8001a12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d003      	beq.n	8001a22 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a20:	e15b      	b.n	8001cda <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_SPI_TransmitReceive+0x82>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <HAL_SPI_TransmitReceive+0x82>
 8001a2e:	887b      	ldrh	r3, [r7, #2]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d103      	bne.n	8001a3c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a3a:	e14e      	b.n	8001cda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b04      	cmp	r3, #4
 8001a46:	d003      	beq.n	8001a50 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2205      	movs	r2, #5
 8001a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	887a      	ldrh	r2, [r7, #2]
 8001a66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	887a      	ldrh	r2, [r7, #2]
 8001a72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a90:	2b40      	cmp	r3, #64	; 0x40
 8001a92:	d007      	beq.n	8001aa4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001aac:	d178      	bne.n	8001ba0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <HAL_SPI_TransmitReceive+0x10a>
 8001ab6:	8b7b      	ldrh	r3, [r7, #26]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d166      	bne.n	8001b8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	881a      	ldrh	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	1c9a      	adds	r2, r3, #2
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ae0:	e053      	b.n	8001b8a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d11b      	bne.n	8001b28 <HAL_SPI_TransmitReceive+0x176>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d016      	beq.n	8001b28 <HAL_SPI_TransmitReceive+0x176>
 8001afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d113      	bne.n	8001b28 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	881a      	ldrh	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	1c9a      	adds	r2, r3, #2
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d119      	bne.n	8001b6a <HAL_SPI_TransmitReceive+0x1b8>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d014      	beq.n	8001b6a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4a:	b292      	uxth	r2, r2
 8001b4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b52:	1c9a      	adds	r2, r3, #2
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b66:	2301      	movs	r3, #1
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001b6a:	f7fe fffb 	bl	8000b64 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d807      	bhi.n	8001b8a <HAL_SPI_TransmitReceive+0x1d8>
 8001b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d003      	beq.n	8001b8a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001b88:	e0a7      	b.n	8001cda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1a6      	bne.n	8001ae2 <HAL_SPI_TransmitReceive+0x130>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1a1      	bne.n	8001ae2 <HAL_SPI_TransmitReceive+0x130>
 8001b9e:	e07c      	b.n	8001c9a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_SPI_TransmitReceive+0x1fc>
 8001ba8:	8b7b      	ldrh	r3, [r7, #26]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d16b      	bne.n	8001c86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	330c      	adds	r3, #12
 8001bb8:	7812      	ldrb	r2, [r2, #0]
 8001bba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bd4:	e057      	b.n	8001c86 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d11c      	bne.n	8001c1e <HAL_SPI_TransmitReceive+0x26c>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d017      	beq.n	8001c1e <HAL_SPI_TransmitReceive+0x26c>
 8001bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d114      	bne.n	8001c1e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	330c      	adds	r3, #12
 8001bfe:	7812      	ldrb	r2, [r2, #0]
 8001c00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	3b01      	subs	r3, #1
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d119      	bne.n	8001c60 <HAL_SPI_TransmitReceive+0x2ae>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d014      	beq.n	8001c60 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001c60:	f7fe ff80 	bl	8000b64 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d803      	bhi.n	8001c78 <HAL_SPI_TransmitReceive+0x2c6>
 8001c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c76:	d102      	bne.n	8001c7e <HAL_SPI_TransmitReceive+0x2cc>
 8001c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d103      	bne.n	8001c86 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001c84:	e029      	b.n	8001cda <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1a2      	bne.n	8001bd6 <HAL_SPI_TransmitReceive+0x224>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d19d      	bne.n	8001bd6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 f893 	bl	8001dca <SPI_EndRxTxTransaction>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d006      	beq.n	8001cb8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001cb6:	e010      	b.n	8001cda <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10b      	bne.n	8001cd8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	e000      	b.n	8001cda <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001cd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001cea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3730      	adds	r7, #48	; 0x30
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	4613      	mov	r3, r2
 8001d04:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d06:	e04c      	b.n	8001da2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0e:	d048      	beq.n	8001da2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001d10:	f7fe ff28 	bl	8000b64 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d902      	bls.n	8001d26 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d13d      	bne.n	8001da2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d3e:	d111      	bne.n	8001d64 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d48:	d004      	beq.n	8001d54 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d52:	d107      	bne.n	8001d64 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d6c:	d10f      	bne.n	8001d8e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e00f      	b.n	8001dc2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	4013      	ands	r3, r2
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	bf0c      	ite	eq
 8001db2:	2301      	moveq	r3, #1
 8001db4:	2300      	movne	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d1a3      	bne.n	8001d08 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af02      	add	r7, sp, #8
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2180      	movs	r1, #128	; 0x80
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f7ff ff88 	bl	8001cf6 <SPI_WaitFlagStateUntilTimeout>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df0:	f043 0220 	orr.w	r2, r3, #32
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e000      	b.n	8001dfe <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <__libc_init_array>:
 8001e08:	b570      	push	{r4, r5, r6, lr}
 8001e0a:	2500      	movs	r5, #0
 8001e0c:	4e0c      	ldr	r6, [pc, #48]	; (8001e40 <__libc_init_array+0x38>)
 8001e0e:	4c0d      	ldr	r4, [pc, #52]	; (8001e44 <__libc_init_array+0x3c>)
 8001e10:	1ba4      	subs	r4, r4, r6
 8001e12:	10a4      	asrs	r4, r4, #2
 8001e14:	42a5      	cmp	r5, r4
 8001e16:	d109      	bne.n	8001e2c <__libc_init_array+0x24>
 8001e18:	f000 f822 	bl	8001e60 <_init>
 8001e1c:	2500      	movs	r5, #0
 8001e1e:	4e0a      	ldr	r6, [pc, #40]	; (8001e48 <__libc_init_array+0x40>)
 8001e20:	4c0a      	ldr	r4, [pc, #40]	; (8001e4c <__libc_init_array+0x44>)
 8001e22:	1ba4      	subs	r4, r4, r6
 8001e24:	10a4      	asrs	r4, r4, #2
 8001e26:	42a5      	cmp	r5, r4
 8001e28:	d105      	bne.n	8001e36 <__libc_init_array+0x2e>
 8001e2a:	bd70      	pop	{r4, r5, r6, pc}
 8001e2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e30:	4798      	blx	r3
 8001e32:	3501      	adds	r5, #1
 8001e34:	e7ee      	b.n	8001e14 <__libc_init_array+0xc>
 8001e36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e3a:	4798      	blx	r3
 8001e3c:	3501      	adds	r5, #1
 8001e3e:	e7f2      	b.n	8001e26 <__libc_init_array+0x1e>
 8001e40:	08001e9c 	.word	0x08001e9c
 8001e44:	08001e9c 	.word	0x08001e9c
 8001e48:	08001e9c 	.word	0x08001e9c
 8001e4c:	08001ea0 	.word	0x08001ea0

08001e50 <memset>:
 8001e50:	4603      	mov	r3, r0
 8001e52:	4402      	add	r2, r0
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d100      	bne.n	8001e5a <memset+0xa>
 8001e58:	4770      	bx	lr
 8001e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e5e:	e7f9      	b.n	8001e54 <memset+0x4>

08001e60 <_init>:
 8001e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e62:	bf00      	nop
 8001e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e66:	bc08      	pop	{r3}
 8001e68:	469e      	mov	lr, r3
 8001e6a:	4770      	bx	lr

08001e6c <_fini>:
 8001e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e6e:	bf00      	nop
 8001e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e72:	bc08      	pop	{r3}
 8001e74:	469e      	mov	lr, r3
 8001e76:	4770      	bx	lr
