
BluePillDemo_I2C_MAX30102_Pulse_Oximeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f04  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08006018  08006018  00016018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060e8  080060e8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080060e8  080060e8  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060e8  080060e8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060e8  080060e8  000160e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060ec  080060ec  000160ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080060f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  2000007c  0800616c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  0800616c  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d973  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dce  00000000  00000000  0002da18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed0  00000000  00000000  0002f7e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df8  00000000  00000000  000306b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014e93  00000000  00000000  000314b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a33c  00000000  00000000  00046343  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000746b9  00000000  00000000  0005067f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4d38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004364  00000000  00000000  000c4db4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ffc 	.word	0x08005ffc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08005ffc 	.word	0x08005ffc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <rf_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	f5ad 7d5e 	sub.w	sp, sp, #888	; 0x378
 8001156:	af04      	add	r7, sp, #16
 8001158:	f107 040c 	add.w	r4, r7, #12
 800115c:	6020      	str	r0, [r4, #0]
 800115e:	f107 0008 	add.w	r0, r7, #8
 8001162:	6001      	str	r1, [r0, #0]
 8001164:	1d39      	adds	r1, r7, #4
 8001166:	600a      	str	r2, [r1, #0]
 8001168:	463a      	mov	r2, r7
 800116a:	6013      	str	r3, [r2, #0]
  float beta_ir, beta_red, x;
  float an_x[BUFFER_SIZE], *ptr_x; //ir
  float an_y[BUFFER_SIZE], *ptr_y; //red

  // calculates DC mean and subtracts DC from ir and red
  f_ir_mean=0.0;
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
  f_red_mean=0.0;
 8001174:	f04f 0300 	mov.w	r3, #0
 8001178:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
  for (k=0; k<n_ir_buffer_length; ++k) {
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8001182:	e02b      	b.n	80011dc <rf_heart_rate_and_oxygen_saturation+0x8c>
    f_ir_mean += pun_ir_buffer[k];
 8001184:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	f107 020c 	add.w	r2, r7, #12
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	4413      	add	r3, r2
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fd9d 	bl	8000cd4 <__aeabi_ui2f>
 800119a:	4603      	mov	r3, r0
 800119c:	4619      	mov	r1, r3
 800119e:	f8d7 0360 	ldr.w	r0, [r7, #864]	; 0x360
 80011a2:	f7ff fce7 	bl	8000b74 <__addsf3>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
    f_red_mean += pun_red_buffer[k];
 80011ac:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	1d3a      	adds	r2, r7, #4
 80011b4:	6812      	ldr	r2, [r2, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fd8a 	bl	8000cd4 <__aeabi_ui2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4619      	mov	r1, r3
 80011c4:	f8d7 035c 	ldr.w	r0, [r7, #860]	; 0x35c
 80011c8:	f7ff fcd4 	bl	8000b74 <__addsf3>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
  for (k=0; k<n_ir_buffer_length; ++k) {
 80011d2:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80011d6:	3301      	adds	r3, #1
 80011d8:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	dbcc      	blt.n	8001184 <rf_heart_rate_and_oxygen_saturation+0x34>
  }
  f_ir_mean=f_ir_mean/n_ir_buffer_length ;
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	f7ff fd74 	bl	8000cdc <__aeabi_i2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4619      	mov	r1, r3
 80011f8:	f8d7 0360 	ldr.w	r0, [r7, #864]	; 0x360
 80011fc:	f7ff fe76 	bl	8000eec <__aeabi_fdiv>
 8001200:	4603      	mov	r3, r0
 8001202:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
  f_red_mean=f_red_mean/n_ir_buffer_length ;
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	f7ff fd66 	bl	8000cdc <__aeabi_i2f>
 8001210:	4603      	mov	r3, r0
 8001212:	4619      	mov	r1, r3
 8001214:	f8d7 035c 	ldr.w	r0, [r7, #860]	; 0x35c
 8001218:	f7ff fe68 	bl	8000eec <__aeabi_fdiv>
 800121c:	4603      	mov	r3, r0
 800121e:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c

  // remove DC
  for (k=0,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++ptr_x,++ptr_y) {
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8001228:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800122c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8001238:	e039      	b.n	80012ae <rf_heart_rate_and_oxygen_saturation+0x15e>
    *ptr_x = pun_ir_buffer[k] - f_ir_mean;
 800123a:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	f107 020c 	add.w	r2, r7, #12
 8001244:	6812      	ldr	r2, [r2, #0]
 8001246:	4413      	add	r3, r2
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fd42 	bl	8000cd4 <__aeabi_ui2f>
 8001250:	4603      	mov	r3, r0
 8001252:	f8d7 1360 	ldr.w	r1, [r7, #864]	; 0x360
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fc8a 	bl	8000b70 <__aeabi_fsub>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001264:	601a      	str	r2, [r3, #0]
    *ptr_y = pun_red_buffer[k] - f_red_mean;
 8001266:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	1d3a      	adds	r2, r7, #4
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	4413      	add	r3, r2
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fd2d 	bl	8000cd4 <__aeabi_ui2f>
 800127a:	4603      	mov	r3, r0
 800127c:	f8d7 135c 	ldr.w	r1, [r7, #860]	; 0x35c
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fc75 	bl	8000b70 <__aeabi_fsub>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800128e:	601a      	str	r2, [r3, #0]
  for (k=0,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++ptr_x,++ptr_y) {
 8001290:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 8001294:	3301      	adds	r3, #1
 8001296:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800129a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800129e:	3304      	adds	r3, #4
 80012a0:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80012a4:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80012a8:	3304      	adds	r3, #4
 80012aa:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbbe      	blt.n	800123a <rf_heart_rate_and_oxygen_saturation+0xea>
  }

  // RF, remove linear trend (baseline leveling)
  beta_ir = rf_linear_regression_beta(an_x, mean_X, sum_X2);
 80012bc:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80012c0:	4ac5      	ldr	r2, [pc, #788]	; (80015d8 <rf_heart_rate_and_oxygen_saturation+0x488>)
 80012c2:	49c6      	ldr	r1, [pc, #792]	; (80015dc <rf_heart_rate_and_oxygen_saturation+0x48c>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 f995 	bl	80015f4 <rf_linear_regression_beta>
 80012ca:	f8c7 034c 	str.w	r0, [r7, #844]	; 0x34c
  beta_red = rf_linear_regression_beta(an_y, mean_X, sum_X2);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4ac1      	ldr	r2, [pc, #772]	; (80015d8 <rf_heart_rate_and_oxygen_saturation+0x488>)
 80012d4:	49c1      	ldr	r1, [pc, #772]	; (80015dc <rf_heart_rate_and_oxygen_saturation+0x48c>)
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f98c 	bl	80015f4 <rf_linear_regression_beta>
 80012dc:	f8c7 0348 	str.w	r0, [r7, #840]	; 0x348
  for(k=0,x=-mean_X,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++x,++ptr_x,++ptr_y) {
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 80012e6:	4bbe      	ldr	r3, [pc, #760]	; (80015e0 <rf_heart_rate_and_oxygen_saturation+0x490>)
 80012e8:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 80012ec:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80012f0:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80012fc:	e03d      	b.n	800137a <rf_heart_rate_and_oxygen_saturation+0x22a>
    *ptr_x -= beta_ir*x;
 80012fe:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001302:	681c      	ldr	r4, [r3, #0]
 8001304:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 8001308:	f8d7 034c 	ldr.w	r0, [r7, #844]	; 0x34c
 800130c:	f7ff fd3a 	bl	8000d84 <__aeabi_fmul>
 8001310:	4603      	mov	r3, r0
 8001312:	4619      	mov	r1, r3
 8001314:	4620      	mov	r0, r4
 8001316:	f7ff fc2b 	bl	8000b70 <__aeabi_fsub>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001322:	601a      	str	r2, [r3, #0]
    *ptr_y -= beta_red*x;
 8001324:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001328:	681c      	ldr	r4, [r3, #0]
 800132a:	f8d7 1358 	ldr.w	r1, [r7, #856]	; 0x358
 800132e:	f8d7 0348 	ldr.w	r0, [r7, #840]	; 0x348
 8001332:	f7ff fd27 	bl	8000d84 <__aeabi_fmul>
 8001336:	4603      	mov	r3, r0
 8001338:	4619      	mov	r1, r3
 800133a:	4620      	mov	r0, r4
 800133c:	f7ff fc18 	bl	8000b70 <__aeabi_fsub>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001348:	601a      	str	r2, [r3, #0]
  for(k=0,x=-mean_X,ptr_x=an_x,ptr_y=an_y; k<n_ir_buffer_length; ++k,++x,++ptr_x,++ptr_y) {
 800134a:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800134e:	3301      	adds	r3, #1
 8001350:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8001354:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001358:	f8d7 0358 	ldr.w	r0, [r7, #856]	; 0x358
 800135c:	f7ff fc0a 	bl	8000b74 <__addsf3>
 8001360:	4603      	mov	r3, r0
 8001362:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8001366:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800136a:	3304      	adds	r3, #4
 800136c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001370:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001374:	3304      	adds	r3, #4
 8001376:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	429a      	cmp	r2, r3
 8001386:	dbba      	blt.n	80012fe <rf_heart_rate_and_oxygen_saturation+0x1ae>
  }

    // For SpO2 calculate RMS of both AC signals. In addition, pulse detector needs raw sum of squares for IR
  f_y_ac=rf_rms(an_y,n_ir_buffer_length,&f_red_sumsq);
 8001388:	f507 724d 	add.w	r2, r7, #820	; 0x334
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	f107 0014 	add.w	r0, r7, #20
 8001394:	6819      	ldr	r1, [r3, #0]
 8001396:	f000 faa5 	bl	80018e4 <rf_rms>
 800139a:	f8c7 0344 	str.w	r0, [r7, #836]	; 0x344
  f_x_ac=rf_rms(an_x,n_ir_buffer_length,&f_ir_sumsq);
 800139e:	f507 724e 	add.w	r2, r7, #824	; 0x338
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	f507 70d2 	add.w	r0, r7, #420	; 0x1a4
 80013aa:	6819      	ldr	r1, [r3, #0]
 80013ac:	f000 fa9a 	bl	80018e4 <rf_rms>
 80013b0:	f8c7 0340 	str.w	r0, [r7, #832]	; 0x340

  // Calculate Pearson correlation between red and IR
  *correl=rf_Pcorrelation(an_x, an_y, n_ir_buffer_length)/sqrt(f_red_sumsq*f_ir_sumsq);
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	f107 0114 	add.w	r1, r7, #20
 80013bc:	f507 70d2 	add.w	r0, r7, #420	; 0x1a4
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	f000 fae0 	bl	8001986 <rf_Pcorrelation>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f82d 	bl	8000428 <__aeabi_f2d>
 80013ce:	4604      	mov	r4, r0
 80013d0:	460d      	mov	r5, r1
 80013d2:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80013d6:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fcd1 	bl	8000d84 <__aeabi_fmul>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f81f 	bl	8000428 <__aeabi_f2d>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f004 fd01 	bl	8005df8 <sqrt>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4620      	mov	r0, r4
 80013fc:	4629      	mov	r1, r5
 80013fe:	f7ff f995 	bl	800072c <__aeabi_ddiv>
 8001402:	4603      	mov	r3, r0
 8001404:	460c      	mov	r4, r1
 8001406:	4618      	mov	r0, r3
 8001408:	4621      	mov	r1, r4
 800140a:	f7ff fb5d 	bl	8000ac8 <__aeabi_d2f>
 800140e:	4602      	mov	r2, r0
 8001410:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8001414:	601a      	str	r2, [r3, #0]

  // Find signal periodicity
  if(*correl>=min_pearson_correlation) {
 8001416:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4971      	ldr	r1, [pc, #452]	; (80015e4 <rf_heart_rate_and_oxygen_saturation+0x494>)
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fe62 	bl	80010e8 <__aeabi_fcmpge>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d027      	beq.n	800147a <rf_heart_rate_and_oxygen_saturation+0x32a>
    // At the beginning of oximetry run the exact range of heart rate is unknown. This may lead to wrong rate if the next call does not find the _first_
    // peak of the autocorrelation function. E.g., second peak would yield only 50% of the true rate.
    if(LOWEST_PERIOD==n_last_peak_interval)
 800142a:	4b6f      	ldr	r3, [pc, #444]	; (80015e8 <rf_heart_rate_and_oxygen_saturation+0x498>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b08      	cmp	r3, #8
 8001430:	d10c      	bne.n	800144c <rf_heart_rate_and_oxygen_saturation+0x2fc>
      rf_initialize_periodicity_search(an_x, BUFFER_SIZE, &n_last_peak_interval, HIGHEST_PERIOD, min_autocorrelation_ratio, f_ir_sumsq);
 8001432:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8001436:	f507 70d2 	add.w	r0, r7, #420	; 0x1a4
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2325      	movs	r3, #37	; 0x25
 8001444:	4a68      	ldr	r2, [pc, #416]	; (80015e8 <rf_heart_rate_and_oxygen_saturation+0x498>)
 8001446:	2164      	movs	r1, #100	; 0x64
 8001448:	f000 f953 	bl	80016f2 <rf_initialize_periodicity_search>
    // RF, If correlation os good, then find average periodicity of the IR signal. If aperiodic, return periodicity of 0
    if(n_last_peak_interval!=0)
 800144c:	4b66      	ldr	r3, [pc, #408]	; (80015e8 <rf_heart_rate_and_oxygen_saturation+0x498>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d015      	beq.n	8001480 <rf_heart_rate_and_oxygen_saturation+0x330>
      rf_signal_periodicity(an_x, BUFFER_SIZE, &n_last_peak_interval, LOWEST_PERIOD, HIGHEST_PERIOD, min_autocorrelation_ratio, f_ir_sumsq, ratio);
 8001454:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8001458:	f507 70d2 	add.w	r0, r7, #420	; 0x1a4
 800145c:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 8001460:	9203      	str	r2, [sp, #12]
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	2325      	movs	r3, #37	; 0x25
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2308      	movs	r3, #8
 8001470:	4a5d      	ldr	r2, [pc, #372]	; (80015e8 <rf_heart_rate_and_oxygen_saturation+0x498>)
 8001472:	2164      	movs	r1, #100	; 0x64
 8001474:	f000 f9b0 	bl	80017d8 <rf_signal_periodicity>
 8001478:	e002      	b.n	8001480 <rf_heart_rate_and_oxygen_saturation+0x330>
  } else n_last_peak_interval=0;
 800147a:	4b5b      	ldr	r3, [pc, #364]	; (80015e8 <rf_heart_rate_and_oxygen_saturation+0x498>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]

  // Calculate heart rate if periodicity detector was successful. Otherwise, reset peak interval to its initial value and report error.
  if(n_last_peak_interval!=0) {
 8001480:	4b59      	ldr	r3, [pc, #356]	; (80015e8 <rf_heart_rate_and_oxygen_saturation+0x498>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d02f      	beq.n	80014e8 <rf_heart_rate_and_oxygen_saturation+0x398>
    *pn_heart_rate = (int32_t)(FS60/n_last_peak_interval);
 8001488:	4b57      	ldr	r3, [pc, #348]	; (80015e8 <rf_heart_rate_and_oxygen_saturation+0x498>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001490:	fb92 f2f3 	sdiv	r2, r2, r3
 8001494:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 8001498:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 1;
 800149a:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 800149e:	2201      	movs	r2, #1
 80014a0:	701a      	strb	r2, [r3, #0]
    *pch_spo2_valid  = 0;
    return;
  }

  // After trend removal, the mean represents DC level
  xy_ratio= (f_y_ac*f_ir_mean)/(f_x_ac*f_red_mean);  //formula is (f_y_ac*f_x_dc) / (f_x_ac*f_y_dc) ;
 80014a2:	f8d7 1360 	ldr.w	r1, [r7, #864]	; 0x360
 80014a6:	f8d7 0344 	ldr.w	r0, [r7, #836]	; 0x344
 80014aa:	f7ff fc6b 	bl	8000d84 <__aeabi_fmul>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461c      	mov	r4, r3
 80014b2:	f8d7 135c 	ldr.w	r1, [r7, #860]	; 0x35c
 80014b6:	f8d7 0340 	ldr.w	r0, [r7, #832]	; 0x340
 80014ba:	f7ff fc63 	bl	8000d84 <__aeabi_fmul>
 80014be:	4603      	mov	r3, r0
 80014c0:	4619      	mov	r1, r3
 80014c2:	4620      	mov	r0, r4
 80014c4:	f7ff fd12 	bl	8000eec <__aeabi_fdiv>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
  if(xy_ratio>0.02 && xy_ratio<1.84) { // Check boundaries of applicability
 80014ce:	f8d7 033c 	ldr.w	r0, [r7, #828]	; 0x33c
 80014d2:	f7fe ffa9 	bl	8000428 <__aeabi_f2d>
 80014d6:	a336      	add	r3, pc, #216	; (adr r3, 80015b0 <rf_heart_rate_and_oxygen_saturation+0x460>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7ff fa8c 	bl	80009f8 <__aeabi_dcmpgt>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d114      	bne.n	8001510 <rf_heart_rate_and_oxygen_saturation+0x3c0>
 80014e6:	e057      	b.n	8001598 <rf_heart_rate_and_oxygen_saturation+0x448>
    n_last_peak_interval=LOWEST_PERIOD;
 80014e8:	4b3f      	ldr	r3, [pc, #252]	; (80015e8 <rf_heart_rate_and_oxygen_saturation+0x498>)
 80014ea:	2208      	movs	r2, #8
 80014ec:	601a      	str	r2, [r3, #0]
    *pn_heart_rate = -999; // unable to calculate because signal looks aperiodic
 80014ee:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80014f2:	4a3e      	ldr	r2, [pc, #248]	; (80015ec <rf_heart_rate_and_oxygen_saturation+0x49c>)
 80014f4:	601a      	str	r2, [r3, #0]
    *pch_hr_valid  = 0;
 80014f6:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
    *pn_spo2 =  -999 ; // do not use SPO2 from this corrupt signal
 80014fe:	463b      	mov	r3, r7
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a3b      	ldr	r2, [pc, #236]	; (80015f0 <rf_heart_rate_and_oxygen_saturation+0x4a0>)
 8001504:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 8001506:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
 800150e:	e04b      	b.n	80015a8 <rf_heart_rate_and_oxygen_saturation+0x458>
  if(xy_ratio>0.02 && xy_ratio<1.84) { // Check boundaries of applicability
 8001510:	f8d7 033c 	ldr.w	r0, [r7, #828]	; 0x33c
 8001514:	f7fe ff88 	bl	8000428 <__aeabi_f2d>
 8001518:	a327      	add	r3, pc, #156	; (adr r3, 80015b8 <rf_heart_rate_and_oxygen_saturation+0x468>)
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	f7ff fa4d 	bl	80009bc <__aeabi_dcmplt>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d037      	beq.n	8001598 <rf_heart_rate_and_oxygen_saturation+0x448>
    *pn_spo2 = (-45.060*xy_ratio + 30.354)*xy_ratio + 94.845;
 8001528:	f8d7 033c 	ldr.w	r0, [r7, #828]	; 0x33c
 800152c:	f7fe ff7c 	bl	8000428 <__aeabi_f2d>
 8001530:	a323      	add	r3, pc, #140	; (adr r3, 80015c0 <rf_heart_rate_and_oxygen_saturation+0x470>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7fe ffcf 	bl	80004d8 <__aeabi_dmul>
 800153a:	4603      	mov	r3, r0
 800153c:	460c      	mov	r4, r1
 800153e:	4618      	mov	r0, r3
 8001540:	4621      	mov	r1, r4
 8001542:	a321      	add	r3, pc, #132	; (adr r3, 80015c8 <rf_heart_rate_and_oxygen_saturation+0x478>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7fe fe10 	bl	800016c <__adddf3>
 800154c:	4603      	mov	r3, r0
 800154e:	460c      	mov	r4, r1
 8001550:	4625      	mov	r5, r4
 8001552:	461c      	mov	r4, r3
 8001554:	f8d7 033c 	ldr.w	r0, [r7, #828]	; 0x33c
 8001558:	f7fe ff66 	bl	8000428 <__aeabi_f2d>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4620      	mov	r0, r4
 8001562:	4629      	mov	r1, r5
 8001564:	f7fe ffb8 	bl	80004d8 <__aeabi_dmul>
 8001568:	4603      	mov	r3, r0
 800156a:	460c      	mov	r4, r1
 800156c:	4618      	mov	r0, r3
 800156e:	4621      	mov	r1, r4
 8001570:	a317      	add	r3, pc, #92	; (adr r3, 80015d0 <rf_heart_rate_and_oxygen_saturation+0x480>)
 8001572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001576:	f7fe fdf9 	bl	800016c <__adddf3>
 800157a:	4603      	mov	r3, r0
 800157c:	460c      	mov	r4, r1
 800157e:	4618      	mov	r0, r3
 8001580:	4621      	mov	r1, r4
 8001582:	f7ff faa1 	bl	8000ac8 <__aeabi_d2f>
 8001586:	4602      	mov	r2, r0
 8001588:	463b      	mov	r3, r7
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid = 1;
 800158e:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
 8001596:	e007      	b.n	80015a8 <rf_heart_rate_and_oxygen_saturation+0x458>
  } else {
    *pn_spo2 =  -999 ; // do not use SPO2 since signal an_ratio is out of range
 8001598:	463b      	mov	r3, r7
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <rf_heart_rate_and_oxygen_saturation+0x4a0>)
 800159e:	601a      	str	r2, [r3, #0]
    *pch_spo2_valid  = 0;
 80015a0:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
  }
}
 80015a8:	f507 775a 	add.w	r7, r7, #872	; 0x368
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bdb0      	pop	{r4, r5, r7, pc}
 80015b0:	47ae147b 	.word	0x47ae147b
 80015b4:	3f947ae1 	.word	0x3f947ae1
 80015b8:	d70a3d71 	.word	0xd70a3d71
 80015bc:	3ffd70a3 	.word	0x3ffd70a3
 80015c0:	147ae148 	.word	0x147ae148
 80015c4:	c04687ae 	.word	0xc04687ae
 80015c8:	be76c8b4 	.word	0xbe76c8b4
 80015cc:	403e5a9f 	.word	0x403e5a9f
 80015d0:	7ae147ae 	.word	0x7ae147ae
 80015d4:	4057b614 	.word	0x4057b614
 80015d8:	47a2be80 	.word	0x47a2be80
 80015dc:	42460000 	.word	0x42460000
 80015e0:	c2460000 	.word	0xc2460000
 80015e4:	3f4ccccd 	.word	0x3f4ccccd
 80015e8:	20000000 	.word	0x20000000
 80015ec:	fffffc19 	.word	0xfffffc19
 80015f0:	c479c000 	.word	0xc479c000

080015f4 <rf_linear_regression_beta>:
*               point index values (0 to BUFFER_SIZE-1). xmean must equal to (BUFFER_SIZE-1)/2! sum_x2 is
*               the sum of squares of the mean-centered index values.
*               Robert Fraczkiewicz, 12/22/2017
* \retval       Beta
*/
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  float x,beta,*pn_ptr;
  beta=0.0;
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
  for(x=-xmean,pn_ptr=pn_x;x<=xmean;++x,++pn_ptr)
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	e016      	b.n	8001642 <rf_linear_regression_beta+0x4e>
    beta+=x*(*pn_ptr);
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	69f9      	ldr	r1, [r7, #28]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fbb2 	bl	8000d84 <__aeabi_fmul>
 8001620:	4603      	mov	r3, r0
 8001622:	4619      	mov	r1, r3
 8001624:	69b8      	ldr	r0, [r7, #24]
 8001626:	f7ff faa5 	bl	8000b74 <__addsf3>
 800162a:	4603      	mov	r3, r0
 800162c:	61bb      	str	r3, [r7, #24]
  for(x=-xmean,pn_ptr=pn_x;x<=xmean;++x,++pn_ptr)
 800162e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001632:	69f8      	ldr	r0, [r7, #28]
 8001634:	f7ff fa9e 	bl	8000b74 <__addsf3>
 8001638:	4603      	mov	r3, r0
 800163a:	61fb      	str	r3, [r7, #28]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	3304      	adds	r3, #4
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	69f8      	ldr	r0, [r7, #28]
 8001646:	f7ff fd45 	bl	80010d4 <__aeabi_fcmple>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1e1      	bne.n	8001614 <rf_linear_regression_beta+0x20>
  return beta/sum_x2;
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	69b8      	ldr	r0, [r7, #24]
 8001654:	f7ff fc4a 	bl	8000eec <__aeabi_fdiv>
 8001658:	4603      	mov	r3, r0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3720      	adds	r7, #32
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <rf_autocorrelation>:
* \par          Details
*               Compute autocorrelation sequence's n_lag's element for a given series pn_x
*               Robert Fraczkiewicz, 12/21/2017
* \retval       Autocorrelation sum
*/
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b088      	sub	sp, #32
 8001666:	af00      	add	r7, sp, #0
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
  int16_t i, n_temp=n_size-n_lag;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	b29a      	uxth	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	b29b      	uxth	r3, r3
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	b29b      	uxth	r3, r3
 800167a:	827b      	strh	r3, [r7, #18]
  float sum=0.0,*pn_ptr;
 800167c:	f04f 0300 	mov.w	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  if(n_temp<=0) return sum;
 8001682:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001686:	2b00      	cmp	r3, #0
 8001688:	dc01      	bgt.n	800168e <rf_autocorrelation+0x2c>
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	e02d      	b.n	80016ea <rf_autocorrelation+0x88>
  for (i=0,pn_ptr=pn_x; i<n_temp; ++i,++pn_ptr) {
 800168e:	2300      	movs	r3, #0
 8001690:	83fb      	strh	r3, [r7, #30]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	e017      	b.n	80016c8 <rf_autocorrelation+0x66>
    sum += (*pn_ptr)*(*(pn_ptr+n_lag));
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	4413      	add	r3, r2
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4619      	mov	r1, r3
 80016a8:	f7ff fb6c 	bl	8000d84 <__aeabi_fmul>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4619      	mov	r1, r3
 80016b0:	69b8      	ldr	r0, [r7, #24]
 80016b2:	f7ff fa5f 	bl	8000b74 <__addsf3>
 80016b6:	4603      	mov	r3, r0
 80016b8:	61bb      	str	r3, [r7, #24]
  for (i=0,pn_ptr=pn_x; i<n_temp; ++i,++pn_ptr) {
 80016ba:	8bfb      	ldrh	r3, [r7, #30]
 80016bc:	3301      	adds	r3, #1
 80016be:	b29b      	uxth	r3, r3
 80016c0:	83fb      	strh	r3, [r7, #30]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3304      	adds	r3, #4
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80016cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dbe1      	blt.n	8001698 <rf_autocorrelation+0x36>
  }
  return sum/n_temp;
 80016d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff faff 	bl	8000cdc <__aeabi_i2f>
 80016de:	4603      	mov	r3, r0
 80016e0:	4619      	mov	r1, r3
 80016e2:	69b8      	ldr	r0, [r7, #24]
 80016e4:	f7ff fc02 	bl	8000eec <__aeabi_fdiv>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3720      	adds	r7, #32
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <rf_initialize_periodicity_search>:
*               of the autocorrelation at lag=0, then the input signal is insufficiently
*               periodic and probably indicates motion artifacts.
*               Robert Fraczkiewicz, 04/25/2020
* \retval       Average distance between peaks
*/
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b088      	sub	sp, #32
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	603b      	str	r3, [r7, #0]
  int32_t n_lag;
  float aut,aut_right;
  // At this point, *p_last_periodicity = LOWEST_PERIOD. Start walking to the right,
  // two steps at a time, until lag ratio fulfills quality criteria or HIGHEST_PERIOD
  // is reached.
  n_lag=*p_last_periodicity;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	61fb      	str	r3, [r7, #28]
  aut_right=aut=rf_autocorrelation(pn_x, n_size, n_lag);
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f7ff ffa9 	bl	8001662 <rf_autocorrelation>
 8001710:	6178      	str	r0, [r7, #20]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	61bb      	str	r3, [r7, #24]
  // Check sanity
  if(aut/aut_lag0 >= min_aut_ratio) {
 8001716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001718:	6978      	ldr	r0, [r7, #20]
 800171a:	f7ff fbe7 	bl	8000eec <__aeabi_fdiv>
 800171e:	4603      	mov	r3, r0
 8001720:	4619      	mov	r1, r3
 8001722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001724:	f7ff fcd6 	bl	80010d4 <__aeabi_fcmple>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d02b      	beq.n	8001786 <rf_initialize_periodicity_search+0x94>
    // Either quality criterion, min_aut_ratio, is too low, or heart rate is too high.
    // Are we on autocorrelation's downward slope? If yes, continue to a local minimum.
    // If not, continue to the next block.
    do {
      aut=aut_right;
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	617b      	str	r3, [r7, #20]
      n_lag+=2;
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3302      	adds	r3, #2
 8001736:	61fb      	str	r3, [r7, #28]
      aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 8001738:	69fa      	ldr	r2, [r7, #28]
 800173a:	68b9      	ldr	r1, [r7, #8]
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f7ff ff90 	bl	8001662 <rf_autocorrelation>
 8001742:	61b8      	str	r0, [r7, #24]
    } while(aut_right/aut_lag0 >= min_aut_ratio && aut_right<aut && n_lag<=n_max_distance);
 8001744:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001746:	69b8      	ldr	r0, [r7, #24]
 8001748:	f7ff fbd0 	bl	8000eec <__aeabi_fdiv>
 800174c:	4603      	mov	r3, r0
 800174e:	4619      	mov	r1, r3
 8001750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001752:	f7ff fcbf 	bl	80010d4 <__aeabi_fcmple>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00a      	beq.n	8001772 <rf_initialize_periodicity_search+0x80>
 800175c:	6979      	ldr	r1, [r7, #20]
 800175e:	69b8      	ldr	r0, [r7, #24]
 8001760:	f7ff fcae 	bl	80010c0 <__aeabi_fcmplt>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <rf_initialize_periodicity_search+0x80>
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	dddd      	ble.n	800172e <rf_initialize_periodicity_search+0x3c>
    if(n_lag>n_max_distance) {
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	dd03      	ble.n	8001782 <rf_initialize_periodicity_search+0x90>
      // This should never happen, but if does return failure
      *p_last_periodicity=0;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
      return;
 8001780:	e027      	b.n	80017d2 <rf_initialize_periodicity_search+0xe0>
    }
    aut=aut_right;
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	617b      	str	r3, [r7, #20]
  }
  // Walk to the right.
  do {
    aut=aut_right;
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	617b      	str	r3, [r7, #20]
    n_lag+=2;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3302      	adds	r3, #2
 800178e:	61fb      	str	r3, [r7, #28]
    aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	68b9      	ldr	r1, [r7, #8]
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f7ff ff64 	bl	8001662 <rf_autocorrelation>
 800179a:	61b8      	str	r0, [r7, #24]
  } while(aut_right/aut_lag0 < min_aut_ratio && n_lag<=n_max_distance);
 800179c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800179e:	69b8      	ldr	r0, [r7, #24]
 80017a0:	f7ff fba4 	bl	8000eec <__aeabi_fdiv>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4619      	mov	r1, r3
 80017a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017aa:	f7ff fca7 	bl	80010fc <__aeabi_fcmpgt>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <rf_initialize_periodicity_search+0xca>
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	dde4      	ble.n	8001786 <rf_initialize_periodicity_search+0x94>
  if(n_lag>n_max_distance) {
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dd03      	ble.n	80017cc <rf_initialize_periodicity_search+0xda>
    // This should never happen, but if does return failure
    *p_last_periodicity=0;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	e002      	b.n	80017d2 <rf_initialize_periodicity_search+0xe0>
  } else
    *p_last_periodicity=n_lag;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	601a      	str	r2, [r3, #0]
}
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <rf_signal_periodicity>:
*               than min_aut_ratio fraction of the autocorrelation at lag=0, then the input
*               signal is insufficiently periodic and probably indicates motion artifacts.
*               Robert Fraczkiewicz, 01/07/2018
* \retval       Average distance between peaks
*/
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	603b      	str	r3, [r7, #0]
  int32_t n_lag;
  float aut,aut_left,aut_right,aut_save;
  bool left_limit_reached=false;
 80017e6:	2300      	movs	r3, #0
 80017e8:	75fb      	strb	r3, [r7, #23]
  // Start from the last periodicity computing the corresponding autocorrelation
  n_lag=*p_last_periodicity;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
  aut_save=aut=rf_autocorrelation(pn_x, n_size, n_lag);
 80017f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f2:	68b9      	ldr	r1, [r7, #8]
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f7ff ff34 	bl	8001662 <rf_autocorrelation>
 80017fa:	6238      	str	r0, [r7, #32]
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	613b      	str	r3, [r7, #16]
  // Is autocorrelation one lag to the left greater?
  aut_left=aut;
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	61fb      	str	r3, [r7, #28]
  do {
    aut=aut_left;
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	623b      	str	r3, [r7, #32]
    n_lag--;
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	3b01      	subs	r3, #1
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    aut_left=rf_autocorrelation(pn_x, n_size, n_lag);
 800180e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f7ff ff25 	bl	8001662 <rf_autocorrelation>
 8001818:	61f8      	str	r0, [r7, #28]
  } while(aut_left>aut && n_lag>=n_min_distance);
 800181a:	6a39      	ldr	r1, [r7, #32]
 800181c:	69f8      	ldr	r0, [r7, #28]
 800181e:	f7ff fc6d 	bl	80010fc <__aeabi_fcmpgt>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <rf_signal_periodicity+0x58>
 8001828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	dae9      	bge.n	8001804 <rf_signal_periodicity+0x2c>
  // Restore lag of the highest aut
  if(n_lag<n_min_distance) {
 8001830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	da07      	bge.n	8001848 <rf_signal_periodicity+0x70>
    left_limit_reached=true;
 8001838:	2301      	movs	r3, #1
 800183a:	75fb      	strb	r3, [r7, #23]
    n_lag=*p_last_periodicity;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
    aut=aut_save;
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	623b      	str	r3, [r7, #32]
 8001846:	e002      	b.n	800184e <rf_signal_periodicity+0x76>
  } else n_lag++;
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	3301      	adds	r3, #1
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  if(n_lag==*p_last_periodicity) {
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001854:	429a      	cmp	r2, r3
 8001856:	d12b      	bne.n	80018b0 <rf_signal_periodicity+0xd8>
    // Trip to the left made no progress. Walk to the right.
    aut_right=aut;
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	61bb      	str	r3, [r7, #24]
    do {
      aut=aut_right;
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	623b      	str	r3, [r7, #32]
      n_lag++;
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	3301      	adds	r3, #1
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
      aut_right=rf_autocorrelation(pn_x, n_size, n_lag);
 8001866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f7ff fef9 	bl	8001662 <rf_autocorrelation>
 8001870:	61b8      	str	r0, [r7, #24]
    } while(aut_right>aut && n_lag<=n_max_distance);
 8001872:	6a39      	ldr	r1, [r7, #32]
 8001874:	69b8      	ldr	r0, [r7, #24]
 8001876:	f7ff fc41 	bl	80010fc <__aeabi_fcmpgt>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <rf_signal_periodicity+0xb0>
 8001880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001884:	429a      	cmp	r2, r3
 8001886:	dde9      	ble.n	800185c <rf_signal_periodicity+0x84>
    // Restore lag of the highest aut
    if(n_lag>n_max_distance) n_lag=0; // Indicates failure
 8001888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188c:	429a      	cmp	r2, r3
 800188e:	dd02      	ble.n	8001896 <rf_signal_periodicity+0xbe>
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
 8001894:	e002      	b.n	800189c <rf_signal_periodicity+0xc4>
    else n_lag--;
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	3b01      	subs	r3, #1
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
    if(n_lag==*p_last_periodicity && left_limit_reached) n_lag=0; // Indicates failure
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d104      	bne.n	80018b0 <rf_signal_periodicity+0xd8>
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <rf_signal_periodicity+0xd8>
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  *ratio=aut/aut_lag0;
 80018b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018b2:	6a38      	ldr	r0, [r7, #32]
 80018b4:	f7ff fb1a 	bl	8000eec <__aeabi_fdiv>
 80018b8:	4603      	mov	r3, r0
 80018ba:	461a      	mov	r2, r3
 80018bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018be:	601a      	str	r2, [r3, #0]
  if(*ratio < min_aut_ratio) n_lag=0; // Indicates failure
 80018c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4619      	mov	r1, r3
 80018c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018c8:	f7ff fc18 	bl	80010fc <__aeabi_fcmpgt>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <rf_signal_periodicity+0xfe>
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  *p_last_periodicity=n_lag;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018da:	601a      	str	r2, [r3, #0]
}
 80018dc:	bf00      	nop
 80018de:	3728      	adds	r7, #40	; 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <rf_rms>:
* \par          Details
*               Compute root-mean-square variation for a given series pn_x
*               Robert Fraczkiewicz, 12/25/2017
* \retval       RMS value and raw sum of squares
*/
{
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  int16_t i;
  float r,*pn_ptr;
  (*sumsq)=0.0;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
  for (i=0,pn_ptr=pn_x; i<n_size; ++i,++pn_ptr) {
 80018f8:	2300      	movs	r3, #0
 80018fa:	83fb      	strh	r3, [r7, #30]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	61bb      	str	r3, [r7, #24]
 8001900:	e018      	b.n	8001934 <rf_rms+0x50>
    r=(*pn_ptr);
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	617b      	str	r3, [r7, #20]
    (*sumsq) += r*r;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681c      	ldr	r4, [r3, #0]
 800190c:	6979      	ldr	r1, [r7, #20]
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f7ff fa38 	bl	8000d84 <__aeabi_fmul>
 8001914:	4603      	mov	r3, r0
 8001916:	4619      	mov	r1, r3
 8001918:	4620      	mov	r0, r4
 800191a:	f7ff f92b 	bl	8000b74 <__addsf3>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	601a      	str	r2, [r3, #0]
  for (i=0,pn_ptr=pn_x; i<n_size; ++i,++pn_ptr) {
 8001926:	8bfb      	ldrh	r3, [r7, #30]
 8001928:	3301      	adds	r3, #1
 800192a:	b29b      	uxth	r3, r3
 800192c:	83fb      	strh	r3, [r7, #30]
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	3304      	adds	r3, #4
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	429a      	cmp	r2, r3
 800193c:	dce1      	bgt.n	8001902 <rf_rms+0x1e>
  }
  (*sumsq)/=n_size; // This corresponds to autocorrelation at lag=0
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681c      	ldr	r4, [r3, #0]
 8001942:	68b8      	ldr	r0, [r7, #8]
 8001944:	f7ff f9ca 	bl	8000cdc <__aeabi_i2f>
 8001948:	4603      	mov	r3, r0
 800194a:	4619      	mov	r1, r3
 800194c:	4620      	mov	r0, r4
 800194e:	f7ff facd 	bl	8000eec <__aeabi_fdiv>
 8001952:	4603      	mov	r3, r0
 8001954:	461a      	mov	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	601a      	str	r2, [r3, #0]
  return sqrt(*sumsq);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fd62 	bl	8000428 <__aeabi_f2d>
 8001964:	4603      	mov	r3, r0
 8001966:	460c      	mov	r4, r1
 8001968:	4618      	mov	r0, r3
 800196a:	4621      	mov	r1, r4
 800196c:	f004 fa44 	bl	8005df8 <sqrt>
 8001970:	4603      	mov	r3, r0
 8001972:	460c      	mov	r4, r1
 8001974:	4618      	mov	r0, r3
 8001976:	4621      	mov	r1, r4
 8001978:	f7ff f8a6 	bl	8000ac8 <__aeabi_d2f>
 800197c:	4603      	mov	r3, r0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	; 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd90      	pop	{r4, r7, pc}

08001986 <rf_Pcorrelation>:
* \par          Details
*               Compute scalar product between *pn_x and *pn_y vectors
*               Robert Fraczkiewicz, 12/25/2017
* \retval       Correlation product
*/
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b088      	sub	sp, #32
 800198a:	af00      	add	r7, sp, #0
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
  int16_t i;
  float r,*x_ptr,*y_ptr;
  r=0.0;
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
  for (i=0,x_ptr=pn_x,y_ptr=pn_y; i<n_size; ++i,++x_ptr,++y_ptr) {
 8001998:	2300      	movs	r3, #0
 800199a:	83fb      	strh	r3, [r7, #30]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	e018      	b.n	80019d8 <rf_Pcorrelation+0x52>
    r+=(*x_ptr)*(*y_ptr);
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4619      	mov	r1, r3
 80019b0:	4610      	mov	r0, r2
 80019b2:	f7ff f9e7 	bl	8000d84 <__aeabi_fmul>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4619      	mov	r1, r3
 80019ba:	69b8      	ldr	r0, [r7, #24]
 80019bc:	f7ff f8da 	bl	8000b74 <__addsf3>
 80019c0:	4603      	mov	r3, r0
 80019c2:	61bb      	str	r3, [r7, #24]
  for (i=0,x_ptr=pn_x,y_ptr=pn_y; i<n_size; ++i,++x_ptr,++y_ptr) {
 80019c4:	8bfb      	ldrh	r3, [r7, #30]
 80019c6:	3301      	adds	r3, #1
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	83fb      	strh	r3, [r7, #30]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3304      	adds	r3, #4
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	3304      	adds	r3, #4
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	429a      	cmp	r2, r3
 80019e0:	dce1      	bgt.n	80019a6 <rf_Pcorrelation+0x20>
  }
  r/=n_size;
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff f97a 	bl	8000cdc <__aeabi_i2f>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4619      	mov	r1, r3
 80019ec:	69b8      	ldr	r0, [r7, #24]
 80019ee:	f7ff fa7d 	bl	8000eec <__aeabi_fdiv>
 80019f2:	4603      	mov	r3, r0
 80019f4:	61bb      	str	r3, [r7, #24]
  return r;
 80019f6:	69bb      	ldr	r3, [r7, #24]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3720      	adds	r7, #32
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <DebugPrint>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void DebugPrint(const char *text)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)text, strlen(text), 100U);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7fe fba1 	bl	8000150 <strlen>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	2364      	movs	r3, #100	; 0x64
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4803      	ldr	r0, [pc, #12]	; (8001a24 <DebugPrint+0x24>)
 8001a18:	f003 ffff 	bl	8005a1a <HAL_UART_Transmit>
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000458 	.word	0x20000458

08001a28 <SetPwmDutyCycle>:

void SetPwmDutyCycle(uint8_t percent)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a32:	f107 030c 	add.w	r3, r7, #12
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	611a      	str	r2, [r3, #16]
 8001a42:	615a      	str	r2, [r3, #20]
 8001a44:	619a      	str	r2, [r3, #24]

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a46:	2360      	movs	r3, #96	; 0x60
 8001a48:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = percent * 5U;
 8001a4a:	79fa      	ldrb	r2, [r7, #7]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3);
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	2208      	movs	r2, #8
 8001a62:	4619      	mov	r1, r3
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <SetPwmDutyCycle+0x54>)
 8001a66:	f003 fc73 	bl	8005350 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001a6a:	2108      	movs	r1, #8
 8001a6c:	4803      	ldr	r0, [pc, #12]	; (8001a7c <SetPwmDutyCycle+0x54>)
 8001a6e:	f003 fc3d 	bl	80052ec <HAL_TIM_PWM_Start>
}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	; 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200003c4 	.word	0x200003c4

08001a80 <Max30102Setup>:

void Max30102Setup()
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
  uint8_t uch_dummy;

  maxim_max30102_reset();
 8001a86:	f000 fb8d 	bl	80021a4 <maxim_max30102_reset>
  maxim_max30102_read_reg(REG_INTR_STATUS_1, &uch_dummy);  // reads/clears the interrupt status register
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f000 facc 	bl	800202c <maxim_max30102_read_reg>
  maxim_max30102_init();
 8001a94:	f000 fae4 	bl	8002060 <maxim_max30102_init>
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <Max30102Loop>:

// Takes samples from MAX30102.  Heart rate and SpO2 are calculated every ST seconds
void Max30102Loop()
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b095      	sub	sp, #84	; 0x54
 8001aa4:	af06      	add	r7, sp, #24
  static uint32_t un_prev_data = 0UL;  	// variables to calculate the on-board LED brightness that reflects the heartbeats
  static float f_brightness = 0UL;
  float f_temp;

  // buffer length of BUFFER_SIZE stores ST seconds of samples running at FS sps
  for (i = 0U; i < BUFFER_SIZE; i++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001aac:	e0bf      	b.n	8001c2e <Max30102Loop+0x18e>
  {
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET);	// wait until the interrupt pin asserts
 8001aae:	bf00      	nop
 8001ab0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ab4:	489c      	ldr	r0, [pc, #624]	; (8001d28 <Max30102Loop+0x288>)
 8001ab6:	f002 f82b 	bl	8003b10 <HAL_GPIO_ReadPin>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d0f7      	beq.n	8001ab0 <Max30102Loop+0x10>

#ifdef FAKE_MAX30102_CLONE
    maxim_max30102_read_fifo((aun_ir_buffer + i), (aun_red_buffer + i));  // read from MAX30102 FIFO
 8001ac0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	4a99      	ldr	r2, [pc, #612]	; (8001d2c <Max30102Loop+0x28c>)
 8001ac8:	1898      	adds	r0, r3, r2
 8001aca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4a97      	ldr	r2, [pc, #604]	; (8001d30 <Max30102Loop+0x290>)
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f000 faf3 	bl	80020c0 <maxim_max30102_read_fifo>
#else
    maxim_max30102_read_fifo((aun_red_buffer + i), (aun_ir_buffer + i));  // read from MAX30102 FIFO
#endif
    // calculate LED brightness
    if (aun_red_buffer[i] > un_prev_data)
 8001ada:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ade:	4a94      	ldr	r2, [pc, #592]	; (8001d30 <Max30102Loop+0x290>)
 8001ae0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ae4:	4b93      	ldr	r3, [pc, #588]	; (8001d34 <Max30102Loop+0x294>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d940      	bls.n	8001b6e <Max30102Loop+0xce>
    {
      f_temp = aun_red_buffer[i] - un_prev_data;
 8001aec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001af0:	4a8f      	ldr	r2, [pc, #572]	; (8001d30 <Max30102Loop+0x290>)
 8001af2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001af6:	4b8f      	ldr	r3, [pc, #572]	; (8001d34 <Max30102Loop+0x294>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff f8e9 	bl	8000cd4 <__aeabi_ui2f>
 8001b02:	4603      	mov	r3, r0
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30
      f_temp /= (un_max - un_min);
 8001b06:	4b8c      	ldr	r3, [pc, #560]	; (8001d38 <Max30102Loop+0x298>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4b8c      	ldr	r3, [pc, #560]	; (8001d3c <Max30102Loop+0x29c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff f8df 	bl	8000cd4 <__aeabi_ui2f>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4619      	mov	r1, r3
 8001b1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b1c:	f7ff f9e6 	bl	8000eec <__aeabi_fdiv>
 8001b20:	4603      	mov	r3, r0
 8001b22:	633b      	str	r3, [r7, #48]	; 0x30
      f_temp *= MAX_BRIGHTNESS;
 8001b24:	4986      	ldr	r1, [pc, #536]	; (8001d40 <Max30102Loop+0x2a0>)
 8001b26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b28:	f7ff f92c 	bl	8000d84 <__aeabi_fmul>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	633b      	str	r3, [r7, #48]	; 0x30
      f_brightness -= 2.0f * f_temp;
 8001b30:	4b84      	ldr	r3, [pc, #528]	; (8001d44 <Max30102Loop+0x2a4>)
 8001b32:	681c      	ldr	r4, [r3, #0]
 8001b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b36:	4619      	mov	r1, r3
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff f81b 	bl	8000b74 <__addsf3>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4619      	mov	r1, r3
 8001b42:	4620      	mov	r0, r4
 8001b44:	f7ff f814 	bl	8000b70 <__aeabi_fsub>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4b7d      	ldr	r3, [pc, #500]	; (8001d44 <Max30102Loop+0x2a4>)
 8001b4e:	601a      	str	r2, [r3, #0]
      if (f_brightness < 0.0f)
 8001b50:	4b7c      	ldr	r3, [pc, #496]	; (8001d44 <Max30102Loop+0x2a4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f04f 0100 	mov.w	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fab1 	bl	80010c0 <__aeabi_fcmplt>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d043      	beq.n	8001bec <Max30102Loop+0x14c>
      {
        f_brightness = 0.0f;
 8001b64:	4b77      	ldr	r3, [pc, #476]	; (8001d44 <Max30102Loop+0x2a4>)
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	e03e      	b.n	8001bec <Max30102Loop+0x14c>
      }
    }
    else
    {
	  f_temp = un_prev_data - aun_red_buffer[i];
 8001b6e:	4b71      	ldr	r3, [pc, #452]	; (8001d34 <Max30102Loop+0x294>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001b76:	496e      	ldr	r1, [pc, #440]	; (8001d30 <Max30102Loop+0x290>)
 8001b78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff f8a8 	bl	8000cd4 <__aeabi_ui2f>
 8001b84:	4603      	mov	r3, r0
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
	  f_temp /= (un_max - un_min);
 8001b88:	4b6b      	ldr	r3, [pc, #428]	; (8001d38 <Max30102Loop+0x298>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b6b      	ldr	r3, [pc, #428]	; (8001d3c <Max30102Loop+0x29c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff f89e 	bl	8000cd4 <__aeabi_ui2f>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b9e:	f7ff f9a5 	bl	8000eec <__aeabi_fdiv>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	633b      	str	r3, [r7, #48]	; 0x30
	  f_temp *= MAX_BRIGHTNESS;
 8001ba6:	4966      	ldr	r1, [pc, #408]	; (8001d40 <Max30102Loop+0x2a0>)
 8001ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001baa:	f7ff f8eb 	bl	8000d84 <__aeabi_fmul>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
	  f_brightness += 2.0f * f_temp;
 8001bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe ffdc 	bl	8000b74 <__addsf3>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4b60      	ldr	r3, [pc, #384]	; (8001d44 <Max30102Loop+0x2a4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	f7fe ffd4 	bl	8000b74 <__addsf3>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4b5c      	ldr	r3, [pc, #368]	; (8001d44 <Max30102Loop+0x2a4>)
 8001bd2:	601a      	str	r2, [r3, #0]
	  if (f_brightness > (float)MAX_BRIGHTNESS)
 8001bd4:	4b5b      	ldr	r3, [pc, #364]	; (8001d44 <Max30102Loop+0x2a4>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4959      	ldr	r1, [pc, #356]	; (8001d40 <Max30102Loop+0x2a0>)
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fa8e 	bl	80010fc <__aeabi_fcmpgt>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <Max30102Loop+0x14c>
	  {
		f_brightness = (float)MAX_BRIGHTNESS;
 8001be6:	4b57      	ldr	r3, [pc, #348]	; (8001d44 <Max30102Loop+0x2a4>)
 8001be8:	4a55      	ldr	r2, [pc, #340]	; (8001d40 <Max30102Loop+0x2a0>)
 8001bea:	601a      	str	r2, [r3, #0]
	  }
    }

    SetPwmDutyCycle((uint8_t)(f_brightness * 100.0f / 256.0f));
 8001bec:	4b55      	ldr	r3, [pc, #340]	; (8001d44 <Max30102Loop+0x2a4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4955      	ldr	r1, [pc, #340]	; (8001d48 <Max30102Loop+0x2a8>)
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f8c6 	bl	8000d84 <__aeabi_fmul>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f974 	bl	8000eec <__aeabi_fdiv>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fa82 	bl	8001110 <__aeabi_f2uiz>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff09 	bl	8001a28 <SetPwmDutyCycle>
    un_prev_data = aun_red_buffer[i];
 8001c16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c1a:	4a45      	ldr	r2, [pc, #276]	; (8001d30 <Max30102Loop+0x290>)
 8001c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c20:	4a44      	ldr	r2, [pc, #272]	; (8001d34 <Max30102Loop+0x294>)
 8001c22:	6013      	str	r3, [r2, #0]
  for (i = 0U; i < BUFFER_SIZE; i++)
 8001c24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c28:	3301      	adds	r3, #1
 8001c2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c32:	2b63      	cmp	r3, #99	; 0x63
 8001c34:	f67f af3b 	bls.w	8001aae <Max30102Loop+0xe>
  }

  un_min = 0x3FFFFUL;
 8001c38:	4b40      	ldr	r3, [pc, #256]	; (8001d3c <Max30102Loop+0x29c>)
 8001c3a:	4a44      	ldr	r2, [pc, #272]	; (8001d4c <Max30102Loop+0x2ac>)
 8001c3c:	601a      	str	r2, [r3, #0]
  un_max = 0UL;
 8001c3e:	4b3e      	ldr	r3, [pc, #248]	; (8001d38 <Max30102Loop+0x298>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < BUFFER_SIZE; i++)
 8001c44:	2300      	movs	r3, #0
 8001c46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c4a:	e024      	b.n	8001c96 <Max30102Loop+0x1f6>
  {
    if (un_min > aun_red_buffer[i])
 8001c4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c50:	4a37      	ldr	r2, [pc, #220]	; (8001d30 <Max30102Loop+0x290>)
 8001c52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c56:	4b39      	ldr	r3, [pc, #228]	; (8001d3c <Max30102Loop+0x29c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d206      	bcs.n	8001c6c <Max30102Loop+0x1cc>
    {
      un_min = aun_red_buffer[i];    //update signal min for next cycle using values from this cycle
 8001c5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c62:	4a33      	ldr	r2, [pc, #204]	; (8001d30 <Max30102Loop+0x290>)
 8001c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c68:	4a34      	ldr	r2, [pc, #208]	; (8001d3c <Max30102Loop+0x29c>)
 8001c6a:	6013      	str	r3, [r2, #0]
    }
    if (un_max < aun_red_buffer[i])
 8001c6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c70:	4a2f      	ldr	r2, [pc, #188]	; (8001d30 <Max30102Loop+0x290>)
 8001c72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c76:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <Max30102Loop+0x298>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d906      	bls.n	8001c8c <Max30102Loop+0x1ec>
    {
      un_max = aun_red_buffer[i];    //update signal max for next cycle using values from this cycle
 8001c7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c82:	4a2b      	ldr	r2, [pc, #172]	; (8001d30 <Max30102Loop+0x290>)
 8001c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c88:	4a2b      	ldr	r2, [pc, #172]	; (8001d38 <Max30102Loop+0x298>)
 8001c8a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i < BUFFER_SIZE; i++)
 8001c8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c90:	3301      	adds	r3, #1
 8001c92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c9a:	2b63      	cmp	r3, #99	; 0x63
 8001c9c:	d9d6      	bls.n	8001c4c <Max30102Loop+0x1ac>
    }
  }

  // calculate heart rate and SpO2 after BUFFER_SIZE samples (ST seconds of samples) using Robert's method
  rf_heart_rate_and_oxygen_saturation(aun_ir_buffer, BUFFER_SIZE, aun_red_buffer, &n_spo2, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid, &ratio, &correl);
 8001c9e:	f107 0218 	add.w	r2, r7, #24
 8001ca2:	f107 0310 	add.w	r3, r7, #16
 8001ca6:	9304      	str	r3, [sp, #16]
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	9303      	str	r3, [sp, #12]
 8001cae:	1dfb      	adds	r3, r7, #7
 8001cb0:	9302      	str	r3, [sp, #8]
 8001cb2:	f107 0308 	add.w	r3, r7, #8
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	f107 030f 	add.w	r3, r7, #15
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	4a1b      	ldr	r2, [pc, #108]	; (8001d30 <Max30102Loop+0x290>)
 8001cc2:	2164      	movs	r1, #100	; 0x64
 8001cc4:	4819      	ldr	r0, [pc, #100]	; (8001d2c <Max30102Loop+0x28c>)
 8001cc6:	f7ff fa43 	bl	8001150 <rf_heart_rate_and_oxygen_saturation>

  // display results
  if (ch_hr_valid && ch_spo2_valid)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d023      	beq.n	8001d1a <Max30102Loop+0x27a>
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d01f      	beq.n	8001d1a <Max30102Loop+0x27a>
  {
    MY_SNPRINTF(buf, (size_t)20, "%3.1f\t", n_spo2);
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fba3 	bl	8000428 <__aeabi_f2d>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460c      	mov	r4, r1
 8001ce6:	f107 001c 	add.w	r0, r7, #28
 8001cea:	e9cd 3400 	strd	r3, r4, [sp]
 8001cee:	4a18      	ldr	r2, [pc, #96]	; (8001d50 <Max30102Loop+0x2b0>)
 8001cf0:	2114      	movs	r1, #20
 8001cf2:	f001 fac1 	bl	8003278 <snprintf_>
    DebugPrint(buf);
 8001cf6:	f107 031c 	add.w	r3, r7, #28
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fe80 	bl	8001a00 <DebugPrint>
    snprintf(buf, (size_t)20, "%d\r\n", n_heart_rate);
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f107 001c 	add.w	r0, r7, #28
 8001d06:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <Max30102Loop+0x2b4>)
 8001d08:	2114      	movs	r1, #20
 8001d0a:	f001 fab5 	bl	8003278 <snprintf_>
    DebugPrint(buf);
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fe74 	bl	8001a00 <DebugPrint>
 8001d18:	e002      	b.n	8001d20 <Max30102Loop+0x280>
  }
  else
  {
    DebugPrint("Not valid. Are you still alive?\r\n");
 8001d1a:	480f      	ldr	r0, [pc, #60]	; (8001d58 <Max30102Loop+0x2b8>)
 8001d1c:	f7ff fe70 	bl	8001a00 <DebugPrint>
  }
}
 8001d20:	bf00      	nop
 8001d22:	373c      	adds	r7, #60	; 0x3c
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd90      	pop	{r4, r7, pc}
 8001d28:	40010c00 	.word	0x40010c00
 8001d2c:	20000098 	.word	0x20000098
 8001d30:	20000228 	.word	0x20000228
 8001d34:	200003b8 	.word	0x200003b8
 8001d38:	200003bc 	.word	0x200003bc
 8001d3c:	20000004 	.word	0x20000004
 8001d40:	437f0000 	.word	0x437f0000
 8001d44:	200003c0 	.word	0x200003c0
 8001d48:	42c80000 	.word	0x42c80000
 8001d4c:	0003ffff 	.word	0x0003ffff
 8001d50:	08006018 	.word	0x08006018
 8001d54:	08006020 	.word	0x08006020
 8001d58:	08006028 	.word	0x08006028

08001d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d60:	f001 fc36 	bl	80035d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d64:	f000 f814 	bl	8001d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d68:	f000 f906 	bl	8001f78 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d6c:	f000 f852 	bl	8001e14 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001d70:	f000 f87e 	bl	8001e70 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001d74:	f000 f8d6 	bl	8001f24 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001d78:	2108      	movs	r1, #8
 8001d7a:	4804      	ldr	r0, [pc, #16]	; (8001d8c <main+0x30>)
 8001d7c:	f003 fab6 	bl	80052ec <HAL_TIM_PWM_Start>
  Max30102Setup();
 8001d80:	f7ff fe7e 	bl	8001a80 <Max30102Setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Max30102Loop();
 8001d84:	f7ff fe8c 	bl	8001aa0 <Max30102Loop>
 8001d88:	e7fc      	b.n	8001d84 <main+0x28>
 8001d8a:	bf00      	nop
 8001d8c:	200003c4 	.word	0x200003c4

08001d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b090      	sub	sp, #64	; 0x40
 8001d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d96:	f107 0318 	add.w	r3, r7, #24
 8001d9a:	2228      	movs	r2, #40	; 0x28
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f004 f822 	bl	8005de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]
 8001db0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001db2:	2302      	movs	r3, #2
 8001db4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001db6:	2301      	movs	r3, #1
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dba:	2310      	movs	r3, #16
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001dc6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dcc:	f107 0318 	add.w	r3, r7, #24
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f002 fe43 	bl	8004a5c <HAL_RCC_OscConfig>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001ddc:	f000 f904 	bl	8001fe8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de0:	230f      	movs	r3, #15
 8001de2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de4:	2302      	movs	r3, #2
 8001de6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001df0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	2102      	movs	r1, #2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f003 f8ae 	bl	8004f5c <HAL_RCC_ClockConfig>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001e06:	f000 f8ef 	bl	8001fe8 <Error_Handler>
  }
}
 8001e0a:	bf00      	nop
 8001e0c:	3740      	adds	r7, #64	; 0x40
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e1a:	4a13      	ldr	r2, [pc, #76]	; (8001e68 <MX_I2C1_Init+0x54>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e20:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <MX_I2C1_Init+0x58>)
 8001e22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e50:	4804      	ldr	r0, [pc, #16]	; (8001e64 <MX_I2C1_Init+0x50>)
 8001e52:	f001 fe75 	bl	8003b40 <HAL_I2C_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e5c:	f000 f8c4 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000404 	.word	0x20000404
 8001e68:	40005400 	.word	0x40005400
 8001e6c:	00061a80 	.word	0x00061a80

08001e70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	; 0x28
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e76:	f107 0320 	add.w	r3, r7, #32
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
 8001e8c:	611a      	str	r2, [r3, #16]
 8001e8e:	615a      	str	r2, [r3, #20]
 8001e90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e92:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <MX_TIM4_Init+0xac>)
 8001e94:	4a22      	ldr	r2, [pc, #136]	; (8001f20 <MX_TIM4_Init+0xb0>)
 8001e96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001e98:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <MX_TIM4_Init+0xac>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9e:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <MX_TIM4_Init+0xac>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <MX_TIM4_Init+0xac>)
 8001ea6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001eaa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <MX_TIM4_Init+0xac>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <MX_TIM4_Init+0xac>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001eb8:	4818      	ldr	r0, [pc, #96]	; (8001f1c <MX_TIM4_Init+0xac>)
 8001eba:	f003 f9eb 	bl	8005294 <HAL_TIM_PWM_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001ec4:	f000 f890 	bl	8001fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ed0:	f107 0320 	add.w	r3, r7, #32
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4811      	ldr	r0, [pc, #68]	; (8001f1c <MX_TIM4_Init+0xac>)
 8001ed8:	f003 fd0e 	bl	80058f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001ee2:	f000 f881 	bl	8001fe8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee6:	2360      	movs	r3, #96	; 0x60
 8001ee8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 350;
 8001eea:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8001eee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	2208      	movs	r2, #8
 8001efc:	4619      	mov	r1, r3
 8001efe:	4807      	ldr	r0, [pc, #28]	; (8001f1c <MX_TIM4_Init+0xac>)
 8001f00:	f003 fa26 	bl	8005350 <HAL_TIM_PWM_ConfigChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001f0a:	f000 f86d 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f0e:	4803      	ldr	r0, [pc, #12]	; (8001f1c <MX_TIM4_Init+0xac>)
 8001f10:	f001 fa5c 	bl	80033cc <HAL_TIM_MspPostInit>

}
 8001f14:	bf00      	nop
 8001f16:	3728      	adds	r7, #40	; 0x28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	200003c4 	.word	0x200003c4
 8001f20:	40000800 	.word	0x40000800

08001f24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f2a:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <MX_USART2_UART_Init+0x50>)
 8001f2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f42:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f5a:	4805      	ldr	r0, [pc, #20]	; (8001f70 <MX_USART2_UART_Init+0x4c>)
 8001f5c:	f003 fd10 	bl	8005980 <HAL_UART_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f66:	f000 f83f 	bl	8001fe8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000458 	.word	0x20000458
 8001f74:	40004400 	.word	0x40004400

08001f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7e:	f107 0308 	add.w	r3, r7, #8
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <MX_GPIO_Init+0x68>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	4a13      	ldr	r2, [pc, #76]	; (8001fe0 <MX_GPIO_Init+0x68>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6193      	str	r3, [r2, #24]
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <MX_GPIO_Init+0x68>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <MX_GPIO_Init+0x68>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	; (8001fe0 <MX_GPIO_Init+0x68>)
 8001faa:	f043 0308 	orr.w	r3, r3, #8
 8001fae:	6193      	str	r3, [r2, #24]
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <MX_GPIO_Init+0x68>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fca:	f107 0308 	add.w	r3, r7, #8
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4804      	ldr	r0, [pc, #16]	; (8001fe4 <MX_GPIO_Init+0x6c>)
 8001fd2:	f001 fc43 	bl	800385c <HAL_GPIO_Init>

}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40010c00 	.word	0x40010c00

08001fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <maxim_max30102_write_reg>:
*
* \param[in]    uch_addr    - register address
* \param[in]    uch_data    - register data
*/
void maxim_max30102_write_reg(uint8_t uch_addr, uint8_t uch_data)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af04      	add	r7, sp, #16
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	460a      	mov	r2, r1
 8001ffe:	71fb      	strb	r3, [r7, #7]
 8002000:	4613      	mov	r3, r2
 8002002:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, I2C_WRITE_ADDR, uch_addr, 1U, &uch_data, 1U, 100U);
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	b29a      	uxth	r2, r3
 8002008:	2364      	movs	r3, #100	; 0x64
 800200a:	9302      	str	r3, [sp, #8]
 800200c:	2301      	movs	r3, #1
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	1dbb      	adds	r3, r7, #6
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2301      	movs	r3, #1
 8002016:	21ae      	movs	r1, #174	; 0xae
 8002018:	4803      	ldr	r0, [pc, #12]	; (8002028 <maxim_max30102_write_reg+0x34>)
 800201a:	f001 feb9 	bl	8003d90 <HAL_I2C_Mem_Write>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000404 	.word	0x20000404

0800202c <maxim_max30102_read_reg>:
*
* \param[in]    uch_addr    - register address
* \param[out]   puch_data    - pointer that stores the register data
*/
void maxim_max30102_read_reg(uint8_t uch_addr, uint8_t *puch_data)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af04      	add	r7, sp, #16
 8002032:	4603      	mov	r3, r0
 8002034:	6039      	str	r1, [r7, #0]
 8002036:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, I2C_READ_ADDR, uch_addr, 1U, puch_data, 1U, 250U);
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	b29a      	uxth	r2, r3
 800203c:	23fa      	movs	r3, #250	; 0xfa
 800203e:	9302      	str	r3, [sp, #8]
 8002040:	2301      	movs	r3, #1
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2301      	movs	r3, #1
 800204a:	21af      	movs	r1, #175	; 0xaf
 800204c:	4803      	ldr	r0, [pc, #12]	; (800205c <maxim_max30102_read_reg+0x30>)
 800204e:	f001 ff99 	bl	8003f84 <HAL_I2C_Mem_Read>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000404 	.word	0x20000404

08002060 <maxim_max30102_init>:
* \par          Details
*               This function initializes the MAX30102
*
* \param        None
*/
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	maxim_max30102_write_reg(REG_INTR_ENABLE_1, 0xc0U); 	// INTR setting
 8002064:	21c0      	movs	r1, #192	; 0xc0
 8002066:	2002      	movs	r0, #2
 8002068:	f7ff ffc4 	bl	8001ff4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_INTR_ENABLE_2, 0x00U);
 800206c:	2100      	movs	r1, #0
 800206e:	2003      	movs	r0, #3
 8002070:	f7ff ffc0 	bl	8001ff4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_WR_PTR, 0x00U);  		//FIFO_WR_PTR[4:0]
 8002074:	2100      	movs	r1, #0
 8002076:	2004      	movs	r0, #4
 8002078:	f7ff ffbc 	bl	8001ff4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_OVF_COUNTER, 0x00U);  		//OVF_COUNTER[4:0]
 800207c:	2100      	movs	r1, #0
 800207e:	2005      	movs	r0, #5
 8002080:	f7ff ffb8 	bl	8001ff4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_RD_PTR, 0x00U);  		//FIFO_RD_PTR[4:0]
 8002084:	2100      	movs	r1, #0
 8002086:	2006      	movs	r0, #6
 8002088:	f7ff ffb4 	bl	8001ff4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_FIFO_CONFIG, 0x4fU);  		//sample avg = 4, fifo rollover=false, fifo almost full = 17
 800208c:	214f      	movs	r1, #79	; 0x4f
 800208e:	2008      	movs	r0, #8
 8002090:	f7ff ffb0 	bl	8001ff4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_MODE_CONFIG, 0x03U);   	//0x02 for Red only, 0x03 for SpO2 mode 0x07 multimode LED
 8002094:	2103      	movs	r1, #3
 8002096:	2009      	movs	r0, #9
 8002098:	f7ff ffac 	bl	8001ff4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_SPO2_CONFIG, 0x27U);  		// SPO2_ADC range = 4096nA, SPO2 sample rate (100 Hz), LED pulseWidth (411uS)
 800209c:	2127      	movs	r1, #39	; 0x27
 800209e:	200a      	movs	r0, #10
 80020a0:	f7ff ffa8 	bl	8001ff4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_LED1_PA, 0x24U);   		//Choose value for ~ 7mA for LED1
 80020a4:	2124      	movs	r1, #36	; 0x24
 80020a6:	200c      	movs	r0, #12
 80020a8:	f7ff ffa4 	bl	8001ff4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_LED2_PA, 0x24U);   		// Choose value for ~ 7mA for LED2
 80020ac:	2124      	movs	r1, #36	; 0x24
 80020ae:	200d      	movs	r0, #13
 80020b0:	f7ff ffa0 	bl	8001ff4 <maxim_max30102_write_reg>
	maxim_max30102_write_reg(REG_PILOT_PA, 0x7fU);   		// Choose value for ~ 25mA for Pilot LED
 80020b4:	217f      	movs	r1, #127	; 0x7f
 80020b6:	2010      	movs	r0, #16
 80020b8:	f7ff ff9c 	bl	8001ff4 <maxim_max30102_write_reg>
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}

080020c0 <maxim_max30102_read_fifo>:
*
* \param[out]   *pun_red_led   - pointer that stores the red LED reading data
* \param[out]   *pun_ir_led    - pointer that stores the IR LED reading data
*/
void maxim_max30102_read_fifo(uint32_t *pun_red_led, uint32_t *pun_ir_led)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af04      	add	r7, sp, #16
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t un_temp;
  uint8_t uch_temp;
  uint8_t uch_i2c_data[6];

  maxim_max30102_read_reg(REG_INTR_STATUS_1, &uch_temp);
 80020ca:	f107 0313 	add.w	r3, r7, #19
 80020ce:	4619      	mov	r1, r3
 80020d0:	2000      	movs	r0, #0
 80020d2:	f7ff ffab 	bl	800202c <maxim_max30102_read_reg>
  maxim_max30102_read_reg(REG_INTR_STATUS_2, &uch_temp);
 80020d6:	f107 0313 	add.w	r3, r7, #19
 80020da:	4619      	mov	r1, r3
 80020dc:	2001      	movs	r0, #1
 80020de:	f7ff ffa5 	bl	800202c <maxim_max30102_read_reg>

  HAL_I2C_Mem_Read(&hi2c1, I2C_READ_ADDR, REG_FIFO_DATA, 1U, uch_i2c_data, 6U, 250U);
 80020e2:	23fa      	movs	r3, #250	; 0xfa
 80020e4:	9302      	str	r3, [sp, #8]
 80020e6:	2306      	movs	r3, #6
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	f107 030c 	add.w	r3, r7, #12
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	2301      	movs	r3, #1
 80020f2:	2207      	movs	r2, #7
 80020f4:	21af      	movs	r1, #175	; 0xaf
 80020f6:	482a      	ldr	r0, [pc, #168]	; (80021a0 <maxim_max30102_read_fifo+0xe0>)
 80020f8:	f001 ff44 	bl	8003f84 <HAL_I2C_Mem_Read>

  *pun_ir_led = 0UL;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
  *pun_red_led = 0UL;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

  un_temp = (uint32_t)uch_i2c_data[0];
 8002108:	7b3b      	ldrb	r3, [r7, #12]
 800210a:	617b      	str	r3, [r7, #20]
  un_temp <<= 16;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	041b      	lsls	r3, r3, #16
 8002110:	617b      	str	r3, [r7, #20]
  *pun_red_led += un_temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	441a      	add	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[1];
 800211e:	7b7b      	ldrb	r3, [r7, #13]
 8002120:	617b      	str	r3, [r7, #20]
  un_temp <<= 8;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	021b      	lsls	r3, r3, #8
 8002126:	617b      	str	r3, [r7, #20]
  *pun_red_led += un_temp;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	441a      	add	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[2];
 8002134:	7bbb      	ldrb	r3, [r7, #14]
 8002136:	617b      	str	r3, [r7, #20]
  *pun_red_led += un_temp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	441a      	add	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[3];
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	617b      	str	r3, [r7, #20]
  un_temp <<= 16;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	041b      	lsls	r3, r3, #16
 800214c:	617b      	str	r3, [r7, #20]
  *pun_ir_led += un_temp;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	441a      	add	r2, r3
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[4];
 800215a:	7c3b      	ldrb	r3, [r7, #16]
 800215c:	617b      	str	r3, [r7, #20]
  un_temp <<= 8;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	617b      	str	r3, [r7, #20]
  *pun_ir_led += un_temp;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	441a      	add	r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	601a      	str	r2, [r3, #0]
  un_temp = (uint32_t)uch_i2c_data[5];
 8002170:	7c7b      	ldrb	r3, [r7, #17]
 8002172:	617b      	str	r3, [r7, #20]
  *pun_ir_led += un_temp;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	441a      	add	r2, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	601a      	str	r2, [r3, #0]
  *pun_red_led &= 0x03FFFF;  	// Mask MSB [23:18]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	601a      	str	r2, [r3, #0]
  *pun_ir_led &= 0x03FFFF;  	// Mask MSB [23:18]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	601a      	str	r2, [r3, #0]

}
 8002198:	bf00      	nop
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000404 	.word	0x20000404

080021a4 <maxim_max30102_reset>:
*               This function resets the MAX30102
*
* \param        None
*/
void maxim_max30102_reset()
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
	maxim_max30102_write_reg(REG_MODE_CONFIG, 0x40U);
 80021a8:	2140      	movs	r1, #64	; 0x40
 80021aa:	2009      	movs	r0, #9
 80021ac:	f7ff ff22 	bl	8001ff4 <maxim_max30102_write_reg>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	4603      	mov	r3, r0
 80021c2:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d204      	bcs.n	80021d6 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	7bfa      	ldrb	r2, [r7, #15]
 80021d4:	701a      	strb	r2, [r3, #0]
  }
}
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	4603      	mov	r3, r0
 80021ee:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	e002      	b.n	8002210 <_strnlen_s+0x16>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3301      	adds	r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d004      	beq.n	8002222 <_strnlen_s+0x28>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	1e5a      	subs	r2, r3, #1
 800221c:	603a      	str	r2, [r7, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f3      	bne.n	800220a <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	1ad3      	subs	r3, r2, r3
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	2b2f      	cmp	r3, #47	; 0x2f
 8002240:	d904      	bls.n	800224c <_is_digit+0x1a>
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	2b39      	cmp	r3, #57	; 0x39
 8002246:	d801      	bhi.n	800224c <_is_digit+0x1a>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <_is_digit+0x1c>
 800224c:	2300      	movs	r3, #0
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	b2db      	uxtb	r3, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800226a:	e00e      	b.n	800228a <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4618      	mov	r0, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	1c59      	adds	r1, r3, #1
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6011      	str	r1, [r2, #0]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4403      	add	r3, r0
 8002286:	3b30      	subs	r3, #48	; 0x30
 8002288:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ffce 	bl	8002232 <_is_digit>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1e7      	bne.n	800226c <_atoi+0xe>
  }
  return i;
 800229c:	68fb      	ldr	r3, [r7, #12]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80022a6:	b590      	push	{r4, r7, lr}
 80022a8:	b087      	sub	sp, #28
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80022b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d125      	bne.n	800230e <_out_rev+0x68>
 80022c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d120      	bne.n	800230e <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 80022cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	e00a      	b.n	80022e8 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	1c53      	adds	r3, r2, #1
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	68fc      	ldr	r4, [r7, #12]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	2020      	movs	r0, #32
 80022e0:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3301      	adds	r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d3f0      	bcc.n	80022d2 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80022f0:	e00d      	b.n	800230e <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80022f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f4:	3b01      	subs	r3, #1
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fc:	4413      	add	r3, r2
 80022fe:	7818      	ldrb	r0, [r3, #0]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	1c53      	adds	r3, r2, #1
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	68fc      	ldr	r4, [r7, #12]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	47a0      	blx	r4
  while (len) {
 800230e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1ee      	bne.n	80022f2 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00e      	beq.n	800233c <_out_rev+0x96>
    while (idx - start_idx < width) {
 800231e:	e007      	b.n	8002330 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	1c53      	adds	r3, r2, #1
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	68fc      	ldr	r4, [r7, #12]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68b9      	ldr	r1, [r7, #8]
 800232c:	2020      	movs	r0, #32
 800232e:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002338:	429a      	cmp	r2, r3
 800233a:	d8f1      	bhi.n	8002320 <_out_rev+0x7a>
    }
  }

  return idx;
 800233c:	687b      	ldr	r3, [r7, #4]
}
 800233e:	4618      	mov	r0, r3
 8002340:	371c      	adds	r7, #28
 8002342:	46bd      	mov	sp, r7
 8002344:	bd90      	pop	{r4, r7, pc}

08002346 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b088      	sub	sp, #32
 800234a:	af04      	add	r7, sp, #16
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8002354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d136      	bne.n	80023cc <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d018      	beq.n	8002396 <_ntoa_format+0x50>
 8002364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d013      	beq.n	8002396 <_ntoa_format+0x50>
 800236e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d104      	bne.n	8002380 <_ntoa_format+0x3a>
 8002376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <_ntoa_format+0x50>
      width--;
 8002380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002382:	3b01      	subs	r3, #1
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002386:	e006      	b.n	8002396 <_ntoa_format+0x50>
      buf[len++] = '0';
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	61fa      	str	r2, [r7, #28]
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4413      	add	r3, r2
 8002392:	2230      	movs	r2, #48	; 0x30
 8002394:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239a:	429a      	cmp	r2, r3
 800239c:	d20a      	bcs.n	80023b4 <_ntoa_format+0x6e>
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	2b1f      	cmp	r3, #31
 80023a2:	d9f1      	bls.n	8002388 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80023a4:	e006      	b.n	80023b4 <_ntoa_format+0x6e>
      buf[len++] = '0';
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	61fa      	str	r2, [r7, #28]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4413      	add	r3, r2
 80023b0:	2230      	movs	r2, #48	; 0x30
 80023b2:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d006      	beq.n	80023cc <_ntoa_format+0x86>
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d202      	bcs.n	80023cc <_ntoa_format+0x86>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	2b1f      	cmp	r3, #31
 80023ca:	d9ec      	bls.n	80023a6 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80023cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d058      	beq.n	8002488 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80023d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d116      	bne.n	800240e <_ntoa_format+0xc8>
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d013      	beq.n	800240e <_ntoa_format+0xc8>
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d003      	beq.n	80023f6 <_ntoa_format+0xb0>
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d10b      	bne.n	800240e <_ntoa_format+0xc8>
      len--;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d005      	beq.n	800240e <_ntoa_format+0xc8>
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	2b10      	cmp	r3, #16
 8002406:	d102      	bne.n	800240e <_ntoa_format+0xc8>
        len--;
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	3b01      	subs	r3, #1
 800240c:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	2b10      	cmp	r3, #16
 8002412:	d10f      	bne.n	8002434 <_ntoa_format+0xee>
 8002414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10a      	bne.n	8002434 <_ntoa_format+0xee>
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	2b1f      	cmp	r3, #31
 8002422:	d807      	bhi.n	8002434 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	61fa      	str	r2, [r7, #28]
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4413      	add	r3, r2
 800242e:	2278      	movs	r2, #120	; 0x78
 8002430:	701a      	strb	r2, [r3, #0]
 8002432:	e01f      	b.n	8002474 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	2b10      	cmp	r3, #16
 8002438:	d10f      	bne.n	800245a <_ntoa_format+0x114>
 800243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00a      	beq.n	800245a <_ntoa_format+0x114>
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	2b1f      	cmp	r3, #31
 8002448:	d807      	bhi.n	800245a <_ntoa_format+0x114>
      buf[len++] = 'X';
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	61fa      	str	r2, [r7, #28]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4413      	add	r3, r2
 8002454:	2258      	movs	r2, #88	; 0x58
 8002456:	701a      	strb	r2, [r3, #0]
 8002458:	e00c      	b.n	8002474 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	2b02      	cmp	r3, #2
 800245e:	d109      	bne.n	8002474 <_ntoa_format+0x12e>
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	2b1f      	cmp	r3, #31
 8002464:	d806      	bhi.n	8002474 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	61fa      	str	r2, [r7, #28]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4413      	add	r3, r2
 8002470:	2262      	movs	r2, #98	; 0x62
 8002472:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	2b1f      	cmp	r3, #31
 8002478:	d806      	bhi.n	8002488 <_ntoa_format+0x142>
      buf[len++] = '0';
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	61fa      	str	r2, [r7, #28]
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4413      	add	r3, r2
 8002484:	2230      	movs	r2, #48	; 0x30
 8002486:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	2b1f      	cmp	r3, #31
 800248c:	d824      	bhi.n	80024d8 <_ntoa_format+0x192>
    if (negative) {
 800248e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <_ntoa_format+0x160>
      buf[len++] = '-';
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	61fa      	str	r2, [r7, #28]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4413      	add	r3, r2
 80024a0:	222d      	movs	r2, #45	; 0x2d
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	e018      	b.n	80024d8 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80024a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	61fa      	str	r2, [r7, #28]
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4413      	add	r3, r2
 80024ba:	222b      	movs	r2, #43	; 0x2b
 80024bc:	701a      	strb	r2, [r3, #0]
 80024be:	e00b      	b.n	80024d8 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80024c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d006      	beq.n	80024d8 <_ntoa_format+0x192>
      buf[len++] = ' ';
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	61fa      	str	r2, [r7, #28]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4413      	add	r3, r2
 80024d4:	2220      	movs	r2, #32
 80024d6:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80024d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024da:	9303      	str	r3, [sp, #12]
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	9302      	str	r3, [sp, #8]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f7ff fed9 	bl	80022a6 <_out_rev>
 80024f4:	4603      	mov	r3, r0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b096      	sub	sp, #88	; 0x58
 8002502:	af08      	add	r7, sp, #32
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d103      	bne.n	800251e <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8002516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002518:	f023 0310 	bic.w	r3, r3, #16
 800251c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800251e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <_ntoa_long+0x30>
 8002528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d033      	beq.n	8002596 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 800252e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002530:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002532:	fbb3 f2f2 	udiv	r2, r3, r2
 8002536:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002538:	fb01 f202 	mul.w	r2, r1, r2
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002542:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002546:	2b09      	cmp	r3, #9
 8002548:	d804      	bhi.n	8002554 <_ntoa_long+0x56>
 800254a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800254e:	3330      	adds	r3, #48	; 0x30
 8002550:	b2da      	uxtb	r2, r3
 8002552:	e00d      	b.n	8002570 <_ntoa_long+0x72>
 8002554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <_ntoa_long+0x64>
 800255e:	2241      	movs	r2, #65	; 0x41
 8002560:	e000      	b.n	8002564 <_ntoa_long+0x66>
 8002562:	2261      	movs	r2, #97	; 0x61
 8002564:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002568:	4413      	add	r3, r2
 800256a:	b2db      	uxtb	r3, r3
 800256c:	3b0a      	subs	r3, #10
 800256e:	b2da      	uxtb	r2, r3
 8002570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002572:	1c59      	adds	r1, r3, #1
 8002574:	6379      	str	r1, [r7, #52]	; 0x34
 8002576:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800257a:	440b      	add	r3, r1
 800257c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002584:	fbb2 f3f3 	udiv	r3, r2, r3
 8002588:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800258a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <_ntoa_long+0x98>
 8002590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002592:	2b1f      	cmp	r3, #31
 8002594:	d9cb      	bls.n	800252e <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002598:	9306      	str	r3, [sp, #24]
 800259a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800259c:	9305      	str	r3, [sp, #20]
 800259e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a0:	9304      	str	r3, [sp, #16]
 80025a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025a4:	9303      	str	r3, [sp, #12]
 80025a6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80025aa:	9302      	str	r3, [sp, #8]
 80025ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	f107 0310 	add.w	r3, r7, #16
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	68b9      	ldr	r1, [r7, #8]
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f7ff fec2 	bl	8002346 <_ntoa_format>
 80025c2:	4603      	mov	r3, r0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3738      	adds	r7, #56	; 0x38
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	0000      	movs	r0, r0
	...

080025d0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b09b      	sub	sp, #108	; 0x6c
 80025d4:	af04      	add	r7, sp, #16
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	f04f 0400 	mov.w	r4, #0
 80025ea:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80025ee:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80025f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025f6:	f7fe f9d7 	bl	80009a8 <__aeabi_dcmpeq>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10f      	bne.n	8002620 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002602:	9303      	str	r3, [sp, #12]
 8002604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002606:	9302      	str	r3, [sp, #8]
 8002608:	2303      	movs	r3, #3
 800260a:	9301      	str	r3, [sp, #4]
 800260c:	4ba6      	ldr	r3, [pc, #664]	; (80028a8 <_ftoa+0x2d8>)
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f7ff fe45 	bl	80022a6 <_out_rev>
 800261c:	4603      	mov	r3, r0
 800261e:	e225      	b.n	8002a6c <_ftoa+0x49c>
  if (value < -DBL_MAX)
 8002620:	f04f 32ff 	mov.w	r2, #4294967295
 8002624:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002628:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800262c:	f7fe f9c6 	bl	80009bc <__aeabi_dcmplt>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00f      	beq.n	8002656 <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002638:	9303      	str	r3, [sp, #12]
 800263a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800263c:	9302      	str	r3, [sp, #8]
 800263e:	2304      	movs	r3, #4
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	4b9a      	ldr	r3, [pc, #616]	; (80028ac <_ftoa+0x2dc>)
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f7ff fe2a 	bl	80022a6 <_out_rev>
 8002652:	4603      	mov	r3, r0
 8002654:	e20a      	b.n	8002a6c <_ftoa+0x49c>
  if (value > DBL_MAX)
 8002656:	f04f 32ff 	mov.w	r2, #4294967295
 800265a:	4b95      	ldr	r3, [pc, #596]	; (80028b0 <_ftoa+0x2e0>)
 800265c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002660:	f7fe f9ca 	bl	80009f8 <__aeabi_dcmpgt>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d01d      	beq.n	80026a6 <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800266a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <_ftoa+0xa8>
 8002674:	4b8f      	ldr	r3, [pc, #572]	; (80028b4 <_ftoa+0x2e4>)
 8002676:	e000      	b.n	800267a <_ftoa+0xaa>
 8002678:	4b8f      	ldr	r3, [pc, #572]	; (80028b8 <_ftoa+0x2e8>)
 800267a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800267c:	f002 0204 	and.w	r2, r2, #4
 8002680:	2a00      	cmp	r2, #0
 8002682:	d001      	beq.n	8002688 <_ftoa+0xb8>
 8002684:	2204      	movs	r2, #4
 8002686:	e000      	b.n	800268a <_ftoa+0xba>
 8002688:	2203      	movs	r2, #3
 800268a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800268c:	9103      	str	r1, [sp, #12]
 800268e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002690:	9102      	str	r1, [sp, #8]
 8002692:	9201      	str	r2, [sp, #4]
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7ff fe02 	bl	80022a6 <_out_rev>
 80026a2:	4603      	mov	r3, r0
 80026a4:	e1e2      	b.n	8002a6c <_ftoa+0x49c>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80026a6:	a37c      	add	r3, pc, #496	; (adr r3, 8002898 <_ftoa+0x2c8>)
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026b0:	f7fe f9a2 	bl	80009f8 <__aeabi_dcmpgt>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <_ftoa+0xfe>
 80026ba:	a379      	add	r3, pc, #484	; (adr r3, 80028a0 <_ftoa+0x2d0>)
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026c4:	f7fe f97a 	bl	80009bc <__aeabi_dcmplt>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <_ftoa+0x102>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
#else
    return 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e1cc      	b.n	8002a6c <_ftoa+0x49c>
#endif
  }

  // test for negative
  bool negative = false;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026e4:	f7fe f96a 	bl	80009bc <__aeabi_dcmplt>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00e      	beq.n	800270c <_ftoa+0x13c>
    negative = true;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 80026f4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80026f8:	f04f 0000 	mov.w	r0, #0
 80026fc:	f04f 0100 	mov.w	r1, #0
 8002700:	f7fd fd32 	bl	8000168 <__aeabi_dsub>
 8002704:	4603      	mov	r3, r0
 8002706:	460c      	mov	r4, r1
 8002708:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800270c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800270e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10e      	bne.n	8002734 <_ftoa+0x164>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002716:	2308      	movs	r3, #8
 8002718:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800271a:	e00b      	b.n	8002734 <_ftoa+0x164>
    buf[len++] = '0';
 800271c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	657a      	str	r2, [r7, #84]	; 0x54
 8002722:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002726:	4413      	add	r3, r2
 8002728:	2230      	movs	r2, #48	; 0x30
 800272a:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800272e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002730:	3b01      	subs	r3, #1
 8002732:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002736:	2b1f      	cmp	r3, #31
 8002738:	d802      	bhi.n	8002740 <_ftoa+0x170>
 800273a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800273c:	2b09      	cmp	r3, #9
 800273e:	d8ed      	bhi.n	800271c <_ftoa+0x14c>
  }

  int whole = (int)value;
 8002740:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002744:	f7fe f978 	bl	8000a38 <__aeabi_d2iz>
 8002748:	4603      	mov	r3, r0
 800274a:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 800274c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800274e:	f7fd fe59 	bl	8000404 <__aeabi_i2d>
 8002752:	4603      	mov	r3, r0
 8002754:	460c      	mov	r4, r1
 8002756:	461a      	mov	r2, r3
 8002758:	4623      	mov	r3, r4
 800275a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800275e:	f7fd fd03 	bl	8000168 <__aeabi_dsub>
 8002762:	4603      	mov	r3, r0
 8002764:	460c      	mov	r4, r1
 8002766:	4618      	mov	r0, r3
 8002768:	4621      	mov	r1, r4
 800276a:	4a54      	ldr	r2, [pc, #336]	; (80028bc <_ftoa+0x2ec>)
 800276c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4413      	add	r3, r2
 8002772:	cb18      	ldmia	r3, {r3, r4}
 8002774:	461a      	mov	r2, r3
 8002776:	4623      	mov	r3, r4
 8002778:	f7fd feae 	bl	80004d8 <__aeabi_dmul>
 800277c:	4603      	mov	r3, r0
 800277e:	460c      	mov	r4, r1
 8002780:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 8002784:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002788:	f7fe f97e 	bl	8000a88 <__aeabi_d2uiz>
 800278c:	4603      	mov	r3, r0
 800278e:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 8002790:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002792:	f7fd fe27 	bl	80003e4 <__aeabi_ui2d>
 8002796:	4603      	mov	r3, r0
 8002798:	460c      	mov	r4, r1
 800279a:	461a      	mov	r2, r3
 800279c:	4623      	mov	r3, r4
 800279e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80027a2:	f7fd fce1 	bl	8000168 <__aeabi_dsub>
 80027a6:	4603      	mov	r3, r0
 80027a8:	460c      	mov	r4, r1
 80027aa:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

  if (diff > 0.5) {
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	4b43      	ldr	r3, [pc, #268]	; (80028c0 <_ftoa+0x2f0>)
 80027b4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80027b8:	f7fe f91e 	bl	80009f8 <__aeabi_dcmpgt>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d017      	beq.n	80027f2 <_ftoa+0x222>
    ++frac;
 80027c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027c4:	3301      	adds	r3, #1
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80027c8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80027ca:	f7fd fe0b 	bl	80003e4 <__aeabi_ui2d>
 80027ce:	4a3b      	ldr	r2, [pc, #236]	; (80028bc <_ftoa+0x2ec>)
 80027d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	cb18      	ldmia	r3, {r3, r4}
 80027d8:	461a      	mov	r2, r3
 80027da:	4623      	mov	r3, r4
 80027dc:	f7fe f902 	bl	80009e4 <__aeabi_dcmpge>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d01a      	beq.n	800281c <_ftoa+0x24c>
      frac = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 80027ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ec:	3301      	adds	r3, #1
 80027ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027f0:	e014      	b.n	800281c <_ftoa+0x24c>
    }
  }
  else if (diff < 0.5) {
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <_ftoa+0x2f0>)
 80027f8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80027fc:	f7fe f8de 	bl	80009bc <__aeabi_dcmplt>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10a      	bne.n	800281c <_ftoa+0x24c>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002808:	2b00      	cmp	r3, #0
 800280a:	d004      	beq.n	8002816 <_ftoa+0x246>
 800280c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <_ftoa+0x24c>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002818:	3301      	adds	r3, #1
 800281a:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 800281c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800281e:	2b00      	cmp	r3, #0
 8002820:	d136      	bne.n	8002890 <_ftoa+0x2c0>
    diff = value - (double)whole;
 8002822:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002824:	f7fd fdee 	bl	8000404 <__aeabi_i2d>
 8002828:	4603      	mov	r3, r0
 800282a:	460c      	mov	r4, r1
 800282c:	461a      	mov	r2, r3
 800282e:	4623      	mov	r3, r4
 8002830:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002834:	f7fd fc98 	bl	8000168 <__aeabi_dsub>
 8002838:	4603      	mov	r3, r0
 800283a:	460c      	mov	r4, r1
 800283c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002840:	2301      	movs	r3, #1
 8002842:	461c      	mov	r4, r3
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <_ftoa+0x2f0>)
 800284a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800284e:	f7fe f8b5 	bl	80009bc <__aeabi_dcmplt>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <_ftoa+0x28c>
 8002858:	2300      	movs	r3, #0
 800285a:	461c      	mov	r4, r3
 800285c:	b2e3      	uxtb	r3, r4
 800285e:	f083 0301 	eor.w	r3, r3, #1
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d109      	bne.n	800287c <_ftoa+0x2ac>
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <_ftoa+0x2f0>)
 800286e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002872:	f7fe f8c1 	bl	80009f8 <__aeabi_dcmpgt>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d067      	beq.n	800294c <_ftoa+0x37c>
 800287c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 8085 	beq.w	8002992 <_ftoa+0x3c2>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800288a:	3301      	adds	r3, #1
 800288c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800288e:	e080      	b.n	8002992 <_ftoa+0x3c2>
    }
  }
  else {
    unsigned int count = prec;
 8002890:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002892:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002894:	e037      	b.n	8002906 <_ftoa+0x336>
 8002896:	bf00      	nop
 8002898:	00000000 	.word	0x00000000
 800289c:	41cdcd65 	.word	0x41cdcd65
 80028a0:	00000000 	.word	0x00000000
 80028a4:	c1cdcd65 	.word	0xc1cdcd65
 80028a8:	0800604c 	.word	0x0800604c
 80028ac:	08006050 	.word	0x08006050
 80028b0:	7fefffff 	.word	0x7fefffff
 80028b4:	08006058 	.word	0x08006058
 80028b8:	08006060 	.word	0x08006060
 80028bc:	08006078 	.word	0x08006078
 80028c0:	3fe00000 	.word	0x3fe00000
      --count;
 80028c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c6:	3b01      	subs	r3, #1
 80028c8:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 80028ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80028cc:	4b69      	ldr	r3, [pc, #420]	; (8002a74 <_ftoa+0x4a4>)
 80028ce:	fba3 2301 	umull	r2, r3, r3, r1
 80028d2:	08da      	lsrs	r2, r3, #3
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	1aca      	subs	r2, r1, r3
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e2:	1c59      	adds	r1, r3, #1
 80028e4:	6579      	str	r1, [r7, #84]	; 0x54
 80028e6:	3230      	adds	r2, #48	; 0x30
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80028ee:	440b      	add	r3, r1
 80028f0:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80028f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028f6:	4a5f      	ldr	r2, [pc, #380]	; (8002a74 <_ftoa+0x4a4>)
 80028f8:	fba2 2303 	umull	r2, r3, r2, r3
 80028fc:	08db      	lsrs	r3, r3, #3
 80028fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <_ftoa+0x33e>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002908:	2b1f      	cmp	r3, #31
 800290a:	d9db      	bls.n	80028c4 <_ftoa+0x2f4>
 800290c:	e00a      	b.n	8002924 <_ftoa+0x354>
        break;
 800290e:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002910:	e008      	b.n	8002924 <_ftoa+0x354>
      buf[len++] = '0';
 8002912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	657a      	str	r2, [r7, #84]	; 0x54
 8002918:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800291c:	4413      	add	r3, r2
 800291e:	2230      	movs	r2, #48	; 0x30
 8002920:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002926:	2b1f      	cmp	r3, #31
 8002928:	d804      	bhi.n	8002934 <_ftoa+0x364>
 800292a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800292c:	1e5a      	subs	r2, r3, #1
 800292e:	647a      	str	r2, [r7, #68]	; 0x44
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ee      	bne.n	8002912 <_ftoa+0x342>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002936:	2b1f      	cmp	r3, #31
 8002938:	d82b      	bhi.n	8002992 <_ftoa+0x3c2>
      // add decimal
      buf[len++] = '.';
 800293a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	657a      	str	r2, [r7, #84]	; 0x54
 8002940:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002944:	4413      	add	r3, r2
 8002946:	222e      	movs	r2, #46	; 0x2e
 8002948:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800294c:	e021      	b.n	8002992 <_ftoa+0x3c2>
    buf[len++] = (char)(48 + (whole % 10));
 800294e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002950:	4b49      	ldr	r3, [pc, #292]	; (8002a78 <_ftoa+0x4a8>)
 8002952:	fb83 1302 	smull	r1, r3, r3, r2
 8002956:	1099      	asrs	r1, r3, #2
 8002958:	17d3      	asrs	r3, r2, #31
 800295a:	1ac9      	subs	r1, r1, r3
 800295c:	460b      	mov	r3, r1
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	1ad1      	subs	r1, r2, r3
 8002966:	b2ca      	uxtb	r2, r1
 8002968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800296a:	1c59      	adds	r1, r3, #1
 800296c:	6579      	str	r1, [r7, #84]	; 0x54
 800296e:	3230      	adds	r2, #48	; 0x30
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002976:	440b      	add	r3, r1
 8002978:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800297c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800297e:	4a3e      	ldr	r2, [pc, #248]	; (8002a78 <_ftoa+0x4a8>)
 8002980:	fb82 1203 	smull	r1, r2, r2, r3
 8002984:	1092      	asrs	r2, r2, #2
 8002986:	17db      	asrs	r3, r3, #31
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800298c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <_ftoa+0x3ca>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002994:	2b1f      	cmp	r3, #31
 8002996:	d9da      	bls.n	800294e <_ftoa+0x37e>
 8002998:	e000      	b.n	800299c <_ftoa+0x3cc>
      break;
 800299a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800299c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d124      	bne.n	80029f0 <_ftoa+0x420>
 80029a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01f      	beq.n	80029f0 <_ftoa+0x420>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80029b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d015      	beq.n	80029e2 <_ftoa+0x412>
 80029b6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d104      	bne.n	80029c8 <_ftoa+0x3f8>
 80029be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00c      	beq.n	80029e2 <_ftoa+0x412>
      width--;
 80029c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ca:	3b01      	subs	r3, #1
 80029cc:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80029ce:	e008      	b.n	80029e2 <_ftoa+0x412>
      buf[len++] = '0';
 80029d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	657a      	str	r2, [r7, #84]	; 0x54
 80029d6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80029da:	4413      	add	r3, r2
 80029dc:	2230      	movs	r2, #48	; 0x30
 80029de:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80029e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d202      	bcs.n	80029f0 <_ftoa+0x420>
 80029ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029ec:	2b1f      	cmp	r3, #31
 80029ee:	d9ef      	bls.n	80029d0 <_ftoa+0x400>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80029f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f2:	2b1f      	cmp	r3, #31
 80029f4:	d82a      	bhi.n	8002a4c <_ftoa+0x47c>
    if (negative) {
 80029f6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <_ftoa+0x442>
      buf[len++] = '-';
 80029fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	657a      	str	r2, [r7, #84]	; 0x54
 8002a04:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002a08:	4413      	add	r3, r2
 8002a0a:	222d      	movs	r2, #45	; 0x2d
 8002a0c:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002a10:	e01c      	b.n	8002a4c <_ftoa+0x47c>
    }
    else if (flags & FLAGS_PLUS) {
 8002a12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d009      	beq.n	8002a30 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	657a      	str	r2, [r7, #84]	; 0x54
 8002a22:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002a26:	4413      	add	r3, r2
 8002a28:	222b      	movs	r2, #43	; 0x2b
 8002a2a:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002a2e:	e00d      	b.n	8002a4c <_ftoa+0x47c>
    }
    else if (flags & FLAGS_SPACE) {
 8002a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d008      	beq.n	8002a4c <_ftoa+0x47c>
      buf[len++] = ' ';
 8002a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	657a      	str	r2, [r7, #84]	; 0x54
 8002a40:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002a44:	4413      	add	r3, r2
 8002a46:	2220      	movs	r2, #32
 8002a48:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a4e:	9303      	str	r3, [sp, #12]
 8002a50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a52:	9302      	str	r3, [sp, #8]
 8002a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a56:	9301      	str	r3, [sp, #4]
 8002a58:	f107 0310 	add.w	r3, r7, #16
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f7ff fc1e 	bl	80022a6 <_out_rev>
 8002a6a:	4603      	mov	r3, r0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	375c      	adds	r7, #92	; 0x5c
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd90      	pop	{r4, r7, pc}
 8002a74:	cccccccd 	.word	0xcccccccd
 8002a78:	66666667 	.word	0x66666667

08002a7c <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002a7c:	b590      	push	{r4, r7, lr}
 8002a7e:	b099      	sub	sp, #100	; 0x64
 8002a80:	af06      	add	r7, sp, #24
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!buffer) {
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f040 83da 	bne.w	800324a <_vsnprintf+0x7ce>
    // use null output function
    out = _out_null;
 8002a96:	4b9b      	ldr	r3, [pc, #620]	; (8002d04 <_vsnprintf+0x288>)
 8002a98:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8002a9a:	e3d6      	b.n	800324a <_vsnprintf+0x7ce>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b25      	cmp	r3, #37	; 0x25
 8002aa2:	d00c      	beq.n	8002abe <_vsnprintf+0x42>
      // no
      out(*format, buffer, idx++, maxlen);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	7818      	ldrb	r0, [r3, #0]
 8002aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aaa:	1c53      	adds	r3, r2, #1
 8002aac:	637b      	str	r3, [r7, #52]	; 0x34
 8002aae:	68fc      	ldr	r4, [r7, #12]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	47a0      	blx	r4
      format++;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	603b      	str	r3, [r7, #0]
      continue;
 8002abc:	e3c5      	b.n	800324a <_vsnprintf+0x7ce>
    }
    else {
      // yes, evaluate it
      format++;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	647b      	str	r3, [r7, #68]	; 0x44
    do {
      switch (*format) {
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	3b20      	subs	r3, #32
 8002ace:	2b10      	cmp	r3, #16
 8002ad0:	d856      	bhi.n	8002b80 <_vsnprintf+0x104>
 8002ad2:	a201      	add	r2, pc, #4	; (adr r2, 8002ad8 <_vsnprintf+0x5c>)
 8002ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad8:	08002b59 	.word	0x08002b59
 8002adc:	08002b81 	.word	0x08002b81
 8002ae0:	08002b81 	.word	0x08002b81
 8002ae4:	08002b6d 	.word	0x08002b6d
 8002ae8:	08002b81 	.word	0x08002b81
 8002aec:	08002b81 	.word	0x08002b81
 8002af0:	08002b81 	.word	0x08002b81
 8002af4:	08002b81 	.word	0x08002b81
 8002af8:	08002b81 	.word	0x08002b81
 8002afc:	08002b81 	.word	0x08002b81
 8002b00:	08002b81 	.word	0x08002b81
 8002b04:	08002b45 	.word	0x08002b45
 8002b08:	08002b81 	.word	0x08002b81
 8002b0c:	08002b31 	.word	0x08002b31
 8002b10:	08002b81 	.word	0x08002b81
 8002b14:	08002b81 	.word	0x08002b81
 8002b18:	08002b1d 	.word	0x08002b1d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8002b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	647b      	str	r3, [r7, #68]	; 0x44
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	3301      	adds	r3, #1
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b2e:	e02a      	b.n	8002b86 <_vsnprintf+0x10a>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b32:	f043 0302 	orr.w	r3, r3, #2
 8002b36:	647b      	str	r3, [r7, #68]	; 0x44
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	2301      	movs	r3, #1
 8002b40:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b42:	e020      	b.n	8002b86 <_vsnprintf+0x10a>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b46:	f043 0304 	orr.w	r3, r3, #4
 8002b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	603b      	str	r3, [r7, #0]
 8002b52:	2301      	movs	r3, #1
 8002b54:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b56:	e016      	b.n	8002b86 <_vsnprintf+0x10a>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b5a:	f043 0308 	orr.w	r3, r3, #8
 8002b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	603b      	str	r3, [r7, #0]
 8002b66:	2301      	movs	r3, #1
 8002b68:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b6a:	e00c      	b.n	8002b86 <_vsnprintf+0x10a>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b6e:	f043 0310 	orr.w	r3, r3, #16
 8002b72:	647b      	str	r3, [r7, #68]	; 0x44
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	3301      	adds	r3, #1
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b7e:	e002      	b.n	8002b86 <_vsnprintf+0x10a>
        default :                                   n = 0U; break;
 8002b80:	2300      	movs	r3, #0
 8002b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b84:	bf00      	nop
      }
    } while (n);
 8002b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d19d      	bne.n	8002ac8 <_vsnprintf+0x4c>

    // evaluate width field
    width = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	643b      	str	r3, [r7, #64]	; 0x40
    if (_is_digit(*format)) {
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fb4c 	bl	8002232 <_is_digit>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <_vsnprintf+0x130>
      width = _atoi(&format);
 8002ba0:	463b      	mov	r3, r7
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fb5b 	bl	800225e <_atoi>
 8002ba8:	6438      	str	r0, [r7, #64]	; 0x40
 8002baa:	e018      	b.n	8002bde <_vsnprintf+0x162>
    }
    else if (*format == '*') {
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8002bb2:	d114      	bne.n	8002bde <_vsnprintf+0x162>
      const int w = va_arg(va, int);
 8002bb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bb6:	1d1a      	adds	r2, r3, #4
 8002bb8:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	623b      	str	r3, [r7, #32]
      if (w < 0) {
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	da07      	bge.n	8002bd4 <_vsnprintf+0x158>
        flags |= FLAGS_LEFT;    // reverse padding
 8002bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc6:	f043 0302 	orr.w	r3, r3, #2
 8002bca:	647b      	str	r3, [r7, #68]	; 0x44
        width = (unsigned int)-w;
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	425b      	negs	r3, r3
 8002bd0:	643b      	str	r3, [r7, #64]	; 0x40
 8002bd2:	e001      	b.n	8002bd8 <_vsnprintf+0x15c>
      }
      else {
        width = (unsigned int)w;
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	643b      	str	r3, [r7, #64]	; 0x40
      }
      format++;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (*format == '.') {
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b2e      	cmp	r3, #46	; 0x2e
 8002be8:	d124      	bne.n	8002c34 <_vsnprintf+0x1b8>
      flags |= FLAGS_PRECISION;
 8002bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bf0:	647b      	str	r3, [r7, #68]	; 0x44
      format++;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff fb18 	bl	8002232 <_is_digit>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <_vsnprintf+0x198>
        precision = _atoi(&format);
 8002c08:	463b      	mov	r3, r7
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fb27 	bl	800225e <_atoi>
 8002c10:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002c12:	e00f      	b.n	8002c34 <_vsnprintf+0x1b8>
      }
      else if (*format == '*') {
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b2a      	cmp	r3, #42	; 0x2a
 8002c1a:	d10b      	bne.n	8002c34 <_vsnprintf+0x1b8>
        const int prec = (int)va_arg(va, int);
 8002c1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c1e:	1d1a      	adds	r2, r3, #4
 8002c20:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61fb      	str	r3, [r7, #28]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        format++;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	3301      	adds	r3, #1
 8002c32:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	3b68      	subs	r3, #104	; 0x68
 8002c3a:	2b12      	cmp	r3, #18
 8002c3c:	d85e      	bhi.n	8002cfc <_vsnprintf+0x280>
 8002c3e:	a201      	add	r2, pc, #4	; (adr r2, 8002c44 <_vsnprintf+0x1c8>)
 8002c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c44:	08002cb7 	.word	0x08002cb7
 8002c48:	08002cfd 	.word	0x08002cfd
 8002c4c:	08002cdd 	.word	0x08002cdd
 8002c50:	08002cfd 	.word	0x08002cfd
 8002c54:	08002c91 	.word	0x08002c91
 8002c58:	08002cfd 	.word	0x08002cfd
 8002c5c:	08002cfd 	.word	0x08002cfd
 8002c60:	08002cfd 	.word	0x08002cfd
 8002c64:	08002cfd 	.word	0x08002cfd
 8002c68:	08002cfd 	.word	0x08002cfd
 8002c6c:	08002cfd 	.word	0x08002cfd
 8002c70:	08002cfd 	.word	0x08002cfd
 8002c74:	08002cfd 	.word	0x08002cfd
 8002c78:	08002cfd 	.word	0x08002cfd
 8002c7c:	08002cfd 	.word	0x08002cfd
 8002c80:	08002cfd 	.word	0x08002cfd
 8002c84:	08002cfd 	.word	0x08002cfd
 8002c88:	08002cfd 	.word	0x08002cfd
 8002c8c:	08002ced 	.word	0x08002ced
      case 'l' :
        flags |= FLAGS_LONG;
 8002c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c96:	647b      	str	r3, [r7, #68]	; 0x44
        format++;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b6c      	cmp	r3, #108	; 0x6c
 8002ca4:	d12c      	bne.n	8002d00 <_vsnprintf+0x284>
          flags |= FLAGS_LONG_LONG;
 8002ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cac:	647b      	str	r3, [r7, #68]	; 0x44
          format++;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	603b      	str	r3, [r7, #0]
        }
        break;
 8002cb4:	e024      	b.n	8002d00 <_vsnprintf+0x284>
      case 'h' :
        flags |= FLAGS_SHORT;
 8002cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cbc:	647b      	str	r3, [r7, #68]	; 0x44
        format++;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b68      	cmp	r3, #104	; 0x68
 8002cca:	d11d      	bne.n	8002d08 <_vsnprintf+0x28c>
          flags |= FLAGS_CHAR;
 8002ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cd2:	647b      	str	r3, [r7, #68]	; 0x44
          format++;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	603b      	str	r3, [r7, #0]
        }
        break;
 8002cda:	e015      	b.n	8002d08 <_vsnprintf+0x28c>
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
        format++;
        break;
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ce2:	647b      	str	r3, [r7, #68]	; 0x44
        format++;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	603b      	str	r3, [r7, #0]
        break;
 8002cea:	e00e      	b.n	8002d0a <_vsnprintf+0x28e>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf2:	647b      	str	r3, [r7, #68]	; 0x44
        format++;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	603b      	str	r3, [r7, #0]
        break;
 8002cfa:	e006      	b.n	8002d0a <_vsnprintf+0x28e>
      default :
        break;
 8002cfc:	bf00      	nop
 8002cfe:	e004      	b.n	8002d0a <_vsnprintf+0x28e>
        break;
 8002d00:	bf00      	nop
 8002d02:	e002      	b.n	8002d0a <_vsnprintf+0x28e>
 8002d04:	080021e1 	.word	0x080021e1
        break;
 8002d08:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	3b25      	subs	r3, #37	; 0x25
 8002d10:	2b53      	cmp	r3, #83	; 0x53
 8002d12:	f200 828d 	bhi.w	8003230 <_vsnprintf+0x7b4>
 8002d16:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <_vsnprintf+0x2a0>)
 8002d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1c:	08003219 	.word	0x08003219
 8002d20:	08003231 	.word	0x08003231
 8002d24:	08003231 	.word	0x08003231
 8002d28:	08003231 	.word	0x08003231
 8002d2c:	08003231 	.word	0x08003231
 8002d30:	08003231 	.word	0x08003231
 8002d34:	08003231 	.word	0x08003231
 8002d38:	08003231 	.word	0x08003231
 8002d3c:	08003231 	.word	0x08003231
 8002d40:	08003231 	.word	0x08003231
 8002d44:	08003231 	.word	0x08003231
 8002d48:	08003231 	.word	0x08003231
 8002d4c:	08003231 	.word	0x08003231
 8002d50:	08003231 	.word	0x08003231
 8002d54:	08003231 	.word	0x08003231
 8002d58:	08003231 	.word	0x08003231
 8002d5c:	08003231 	.word	0x08003231
 8002d60:	08003231 	.word	0x08003231
 8002d64:	08003231 	.word	0x08003231
 8002d68:	08003231 	.word	0x08003231
 8002d6c:	08003231 	.word	0x08003231
 8002d70:	08003231 	.word	0x08003231
 8002d74:	08003231 	.word	0x08003231
 8002d78:	08003231 	.word	0x08003231
 8002d7c:	08003231 	.word	0x08003231
 8002d80:	08003231 	.word	0x08003231
 8002d84:	08003231 	.word	0x08003231
 8002d88:	08003231 	.word	0x08003231
 8002d8c:	08003231 	.word	0x08003231
 8002d90:	08003231 	.word	0x08003231
 8002d94:	08003231 	.word	0x08003231
 8002d98:	08003231 	.word	0x08003231
 8002d9c:	08003231 	.word	0x08003231
 8002da0:	08003059 	.word	0x08003059
 8002da4:	08003231 	.word	0x08003231
 8002da8:	08003231 	.word	0x08003231
 8002dac:	08003231 	.word	0x08003231
 8002db0:	08003231 	.word	0x08003231
 8002db4:	08003231 	.word	0x08003231
 8002db8:	08003231 	.word	0x08003231
 8002dbc:	08003231 	.word	0x08003231
 8002dc0:	08003231 	.word	0x08003231
 8002dc4:	08003231 	.word	0x08003231
 8002dc8:	08003231 	.word	0x08003231
 8002dcc:	08003231 	.word	0x08003231
 8002dd0:	08003231 	.word	0x08003231
 8002dd4:	08003231 	.word	0x08003231
 8002dd8:	08003231 	.word	0x08003231
 8002ddc:	08003231 	.word	0x08003231
 8002de0:	08003231 	.word	0x08003231
 8002de4:	08003231 	.word	0x08003231
 8002de8:	08002e6d 	.word	0x08002e6d
 8002dec:	08003231 	.word	0x08003231
 8002df0:	08003231 	.word	0x08003231
 8002df4:	08003231 	.word	0x08003231
 8002df8:	08003231 	.word	0x08003231
 8002dfc:	08003231 	.word	0x08003231
 8002e00:	08003231 	.word	0x08003231
 8002e04:	08003231 	.word	0x08003231
 8002e08:	08003231 	.word	0x08003231
 8002e0c:	08003231 	.word	0x08003231
 8002e10:	08002e6d 	.word	0x08002e6d
 8002e14:	0800309f 	.word	0x0800309f
 8002e18:	08002e6d 	.word	0x08002e6d
 8002e1c:	08003231 	.word	0x08003231
 8002e20:	08003059 	.word	0x08003059
 8002e24:	08003231 	.word	0x08003231
 8002e28:	08003231 	.word	0x08003231
 8002e2c:	08002e6d 	.word	0x08002e6d
 8002e30:	08003231 	.word	0x08003231
 8002e34:	08003231 	.word	0x08003231
 8002e38:	08003231 	.word	0x08003231
 8002e3c:	08003231 	.word	0x08003231
 8002e40:	08003231 	.word	0x08003231
 8002e44:	08002e6d 	.word	0x08002e6d
 8002e48:	080031d7 	.word	0x080031d7
 8002e4c:	08003231 	.word	0x08003231
 8002e50:	08003231 	.word	0x08003231
 8002e54:	08003113 	.word	0x08003113
 8002e58:	08003231 	.word	0x08003231
 8002e5c:	08002e6d 	.word	0x08002e6d
 8002e60:	08003231 	.word	0x08003231
 8002e64:	08003231 	.word	0x08003231
 8002e68:	08002e6d 	.word	0x08002e6d
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b78      	cmp	r3, #120	; 0x78
 8002e72:	d003      	beq.n	8002e7c <_vsnprintf+0x400>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b58      	cmp	r3, #88	; 0x58
 8002e7a:	d102      	bne.n	8002e82 <_vsnprintf+0x406>
          base = 16U;
 8002e7c:	2310      	movs	r3, #16
 8002e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8002e80:	e013      	b.n	8002eaa <_vsnprintf+0x42e>
        }
        else if (*format == 'o') {
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b6f      	cmp	r3, #111	; 0x6f
 8002e88:	d102      	bne.n	8002e90 <_vsnprintf+0x414>
          base =  8U;
 8002e8a:	2308      	movs	r3, #8
 8002e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e8e:	e00c      	b.n	8002eaa <_vsnprintf+0x42e>
        }
        else if (*format == 'b') {
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b62      	cmp	r3, #98	; 0x62
 8002e96:	d102      	bne.n	8002e9e <_vsnprintf+0x422>
          base =  2U;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	633b      	str	r3, [r7, #48]	; 0x30
 8002e9c:	e005      	b.n	8002eaa <_vsnprintf+0x42e>
        }
        else {
          base = 10U;
 8002e9e:	230a      	movs	r3, #10
 8002ea0:	633b      	str	r3, [r7, #48]	; 0x30
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8002ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ea4:	f023 0310 	bic.w	r3, r3, #16
 8002ea8:	647b      	str	r3, [r7, #68]	; 0x44
        }
        // uppercase
        if (*format == 'X') {
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b58      	cmp	r3, #88	; 0x58
 8002eb0:	d103      	bne.n	8002eba <_vsnprintf+0x43e>
          flags |= FLAGS_UPPERCASE;
 8002eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb4:	f043 0320 	orr.w	r3, r3, #32
 8002eb8:	647b      	str	r3, [r7, #68]	; 0x44
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b69      	cmp	r3, #105	; 0x69
 8002ec0:	d007      	beq.n	8002ed2 <_vsnprintf+0x456>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b64      	cmp	r3, #100	; 0x64
 8002ec8:	d003      	beq.n	8002ed2 <_vsnprintf+0x456>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8002eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ecc:	f023 030c 	bic.w	r3, r3, #12
 8002ed0:	647b      	str	r3, [r7, #68]	; 0x44
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8002ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <_vsnprintf+0x468>
          flags &= ~FLAGS_ZEROPAD;
 8002edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ede:	f023 0301 	bic.w	r3, r3, #1
 8002ee2:	647b      	str	r3, [r7, #68]	; 0x44
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b69      	cmp	r3, #105	; 0x69
 8002eea:	d003      	beq.n	8002ef4 <_vsnprintf+0x478>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b64      	cmp	r3, #100	; 0x64
 8002ef2:	d15e      	bne.n	8002fb2 <_vsnprintf+0x536>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8002ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 80a8 	bne.w	8003050 <_vsnprintf+0x5d4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d01e      	beq.n	8002f48 <_vsnprintf+0x4cc>
            const long value = va_arg(va, long);
 8002f0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f0c:	1d1a      	adds	r2, r3, #4
 8002f0e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	613b      	str	r3, [r7, #16]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bfb8      	it	lt
 8002f1a:	425b      	neglt	r3, r3
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	0fdb      	lsrs	r3, r3, #31
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f26:	9205      	str	r2, [sp, #20]
 8002f28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f2a:	9204      	str	r2, [sp, #16]
 8002f2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f2e:	9203      	str	r2, [sp, #12]
 8002f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f32:	9202      	str	r2, [sp, #8]
 8002f34:	9301      	str	r3, [sp, #4]
 8002f36:	9100      	str	r1, [sp, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f7ff fadd 	bl	80024fe <_ntoa_long>
 8002f44:	6378      	str	r0, [r7, #52]	; 0x34
          if (flags & FLAGS_LONG_LONG) {
 8002f46:	e083      	b.n	8003050 <_vsnprintf+0x5d4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <_vsnprintf+0x4e2>
 8002f52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f54:	1d1a      	adds	r2, r3, #4
 8002f56:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	e00e      	b.n	8002f7c <_vsnprintf+0x500>
 8002f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <_vsnprintf+0x4f8>
 8002f68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f6a:	1d1a      	adds	r2, r3, #4
 8002f6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	b21b      	sxth	r3, r3
 8002f72:	e003      	b.n	8002f7c <_vsnprintf+0x500>
 8002f74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f76:	1d1a      	adds	r2, r3, #4
 8002f78:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	617b      	str	r3, [r7, #20]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bfb8      	it	lt
 8002f84:	425b      	neglt	r3, r3
 8002f86:	4619      	mov	r1, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	0fdb      	lsrs	r3, r3, #31
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f90:	9205      	str	r2, [sp, #20]
 8002f92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f94:	9204      	str	r2, [sp, #16]
 8002f96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f98:	9203      	str	r2, [sp, #12]
 8002f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f9c:	9202      	str	r2, [sp, #8]
 8002f9e:	9301      	str	r3, [sp, #4]
 8002fa0:	9100      	str	r1, [sp, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f7ff faa8 	bl	80024fe <_ntoa_long>
 8002fae:	6378      	str	r0, [r7, #52]	; 0x34
          if (flags & FLAGS_LONG_LONG) {
 8002fb0:	e04e      	b.n	8003050 <_vsnprintf+0x5d4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8002fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d149      	bne.n	8003050 <_vsnprintf+0x5d4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d016      	beq.n	8002ff4 <_vsnprintf+0x578>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8002fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc8:	1d1a      	adds	r2, r3, #4
 8002fca:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fd0:	9205      	str	r2, [sp, #20]
 8002fd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fd4:	9204      	str	r2, [sp, #16]
 8002fd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fd8:	9203      	str	r2, [sp, #12]
 8002fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fdc:	9202      	str	r2, [sp, #8]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	9201      	str	r2, [sp, #4]
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f7ff fa87 	bl	80024fe <_ntoa_long>
 8002ff0:	6378      	str	r0, [r7, #52]	; 0x34
 8002ff2:	e02d      	b.n	8003050 <_vsnprintf+0x5d4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8002ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d005      	beq.n	800300a <_vsnprintf+0x58e>
 8002ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003000:	1d1a      	adds	r2, r3, #4
 8003002:	65ba      	str	r2, [r7, #88]	; 0x58
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	e00e      	b.n	8003028 <_vsnprintf+0x5ac>
 800300a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800300c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <_vsnprintf+0x5a4>
 8003014:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003016:	1d1a      	adds	r2, r3, #4
 8003018:	65ba      	str	r2, [r7, #88]	; 0x58
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	e003      	b.n	8003028 <_vsnprintf+0x5ac>
 8003020:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003022:	1d1a      	adds	r2, r3, #4
 8003024:	65ba      	str	r2, [r7, #88]	; 0x58
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	61bb      	str	r3, [r7, #24]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800302a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800302c:	9305      	str	r3, [sp, #20]
 800302e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003030:	9304      	str	r3, [sp, #16]
 8003032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003034:	9303      	str	r3, [sp, #12]
 8003036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003038:	9302      	str	r3, [sp, #8]
 800303a:	2300      	movs	r3, #0
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f7ff fa58 	bl	80024fe <_ntoa_long>
 800304e:	6378      	str	r0, [r7, #52]	; 0x34
          }
        }
        format++;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	3301      	adds	r3, #1
 8003054:	603b      	str	r3, [r7, #0]
        break;
 8003056:	e0f8      	b.n	800324a <_vsnprintf+0x7ce>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b46      	cmp	r3, #70	; 0x46
 800305e:	d103      	bne.n	8003068 <_vsnprintf+0x5ec>
 8003060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003062:	f043 0320 	orr.w	r3, r3, #32
 8003066:	647b      	str	r3, [r7, #68]	; 0x44
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003068:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800306a:	3307      	adds	r3, #7
 800306c:	f023 0307 	bic.w	r3, r3, #7
 8003070:	f103 0208 	add.w	r2, r3, #8
 8003074:	65ba      	str	r2, [r7, #88]	; 0x58
 8003076:	cb18      	ldmia	r3, {r3, r4}
 8003078:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800307a:	9204      	str	r2, [sp, #16]
 800307c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800307e:	9203      	str	r2, [sp, #12]
 8003080:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003082:	9202      	str	r2, [sp, #8]
 8003084:	e9cd 3400 	strd	r3, r4, [sp]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f7ff fa9e 	bl	80025d0 <_ftoa>
 8003094:	6378      	str	r0, [r7, #52]	; 0x34
        format++;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	3301      	adds	r3, #1
 800309a:	603b      	str	r3, [r7, #0]
        break;
 800309c:	e0d5      	b.n	800324a <_vsnprintf+0x7ce>
        format++;
        break;
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800309e:	2301      	movs	r3, #1
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80030a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10e      	bne.n	80030ca <_vsnprintf+0x64e>
          while (l++ < width) {
 80030ac:	e007      	b.n	80030be <_vsnprintf+0x642>
            out(' ', buffer, idx++, maxlen);
 80030ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030b0:	1c53      	adds	r3, r2, #1
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
 80030b4:	68fc      	ldr	r4, [r7, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	2020      	movs	r0, #32
 80030bc:	47a0      	blx	r4
          while (l++ < width) {
 80030be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d8f1      	bhi.n	80030ae <_vsnprintf+0x632>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80030ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030cc:	1d1a      	adds	r2, r3, #4
 80030ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	b2d8      	uxtb	r0, r3
 80030d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030d6:	1c53      	adds	r3, r2, #1
 80030d8:	637b      	str	r3, [r7, #52]	; 0x34
 80030da:	68fc      	ldr	r4, [r7, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80030e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00e      	beq.n	800310a <_vsnprintf+0x68e>
          while (l++ < width) {
 80030ec:	e007      	b.n	80030fe <_vsnprintf+0x682>
            out(' ', buffer, idx++, maxlen);
 80030ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030f0:	1c53      	adds	r3, r2, #1
 80030f2:	637b      	str	r3, [r7, #52]	; 0x34
 80030f4:	68fc      	ldr	r4, [r7, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	2020      	movs	r0, #32
 80030fc:	47a0      	blx	r4
          while (l++ < width) {
 80030fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003104:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003106:	429a      	cmp	r2, r3
 8003108:	d8f1      	bhi.n	80030ee <_vsnprintf+0x672>
          }
        }
        format++;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	3301      	adds	r3, #1
 800310e:	603b      	str	r3, [r7, #0]
        break;
 8003110:	e09b      	b.n	800324a <_vsnprintf+0x7ce>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003114:	1d1a      	adds	r2, r3, #4
 8003116:	65ba      	str	r2, [r7, #88]	; 0x58
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	62bb      	str	r3, [r7, #40]	; 0x28
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800311c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <_vsnprintf+0x6aa>
 8003122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003124:	e001      	b.n	800312a <_vsnprintf+0x6ae>
 8003126:	f04f 33ff 	mov.w	r3, #4294967295
 800312a:	4619      	mov	r1, r3
 800312c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800312e:	f7ff f864 	bl	80021fa <_strnlen_s>
 8003132:	6278      	str	r0, [r7, #36]	; 0x24
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <_vsnprintf+0x6ce>
          l = (l < precision ? l : precision);
 800313e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003142:	4293      	cmp	r3, r2
 8003144:	bf28      	it	cs
 8003146:	4613      	movcs	r3, r2
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (!(flags & FLAGS_LEFT)) {
 800314a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d11a      	bne.n	800318a <_vsnprintf+0x70e>
          while (l++ < width) {
 8003154:	e007      	b.n	8003166 <_vsnprintf+0x6ea>
            out(' ', buffer, idx++, maxlen);
 8003156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003158:	1c53      	adds	r3, r2, #1
 800315a:	637b      	str	r3, [r7, #52]	; 0x34
 800315c:	68fc      	ldr	r4, [r7, #12]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	2020      	movs	r0, #32
 8003164:	47a0      	blx	r4
          while (l++ < width) {
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	627a      	str	r2, [r7, #36]	; 0x24
 800316c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800316e:	429a      	cmp	r2, r3
 8003170:	d8f1      	bhi.n	8003156 <_vsnprintf+0x6da>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003172:	e00a      	b.n	800318a <_vsnprintf+0x70e>
          out(*(p++), buffer, idx++, maxlen);
 8003174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	62ba      	str	r2, [r7, #40]	; 0x28
 800317a:	7818      	ldrb	r0, [r3, #0]
 800317c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800317e:	1c53      	adds	r3, r2, #1
 8003180:	637b      	str	r3, [r7, #52]	; 0x34
 8003182:	68fc      	ldr	r4, [r7, #12]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <_vsnprintf+0x72a>
 8003192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0eb      	beq.n	8003174 <_vsnprintf+0x6f8>
 800319c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800319e:	1e5a      	subs	r2, r3, #1
 80031a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e6      	bne.n	8003174 <_vsnprintf+0x6f8>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80031a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00e      	beq.n	80031ce <_vsnprintf+0x752>
          while (l++ < width) {
 80031b0:	e007      	b.n	80031c2 <_vsnprintf+0x746>
            out(' ', buffer, idx++, maxlen);
 80031b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031b4:	1c53      	adds	r3, r2, #1
 80031b6:	637b      	str	r3, [r7, #52]	; 0x34
 80031b8:	68fc      	ldr	r4, [r7, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	2020      	movs	r0, #32
 80031c0:	47a0      	blx	r4
          while (l++ < width) {
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	627a      	str	r2, [r7, #36]	; 0x24
 80031c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d8f1      	bhi.n	80031b2 <_vsnprintf+0x736>
          }
        }
        format++;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	3301      	adds	r3, #1
 80031d2:	603b      	str	r3, [r7, #0]
        break;
 80031d4:	e039      	b.n	800324a <_vsnprintf+0x7ce>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80031d6:	2308      	movs	r3, #8
 80031d8:	643b      	str	r3, [r7, #64]	; 0x40
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80031da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031dc:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 80031e0:	647b      	str	r3, [r7, #68]	; 0x44
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80031e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031e4:	1d1a      	adds	r2, r3, #4
 80031e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ee:	9305      	str	r3, [sp, #20]
 80031f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f2:	9304      	str	r3, [sp, #16]
 80031f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f6:	9303      	str	r3, [sp, #12]
 80031f8:	2310      	movs	r3, #16
 80031fa:	9302      	str	r3, [sp, #8]
 80031fc:	2300      	movs	r3, #0
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	9200      	str	r2, [sp, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003206:	68b9      	ldr	r1, [r7, #8]
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f7ff f978 	bl	80024fe <_ntoa_long>
 800320e:	6378      	str	r0, [r7, #52]	; 0x34
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	3301      	adds	r3, #1
 8003214:	603b      	str	r3, [r7, #0]
        break;
 8003216:	e018      	b.n	800324a <_vsnprintf+0x7ce>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003218:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800321a:	1c53      	adds	r3, r2, #1
 800321c:	637b      	str	r3, [r7, #52]	; 0x34
 800321e:	68fc      	ldr	r4, [r7, #12]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68b9      	ldr	r1, [r7, #8]
 8003224:	2025      	movs	r0, #37	; 0x25
 8003226:	47a0      	blx	r4
        format++;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	3301      	adds	r3, #1
 800322c:	603b      	str	r3, [r7, #0]
        break;
 800322e:	e00c      	b.n	800324a <_vsnprintf+0x7ce>

      default :
        out(*format, buffer, idx++, maxlen);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	7818      	ldrb	r0, [r3, #0]
 8003234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003236:	1c53      	adds	r3, r2, #1
 8003238:	637b      	str	r3, [r7, #52]	; 0x34
 800323a:	68fc      	ldr	r4, [r7, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68b9      	ldr	r1, [r7, #8]
 8003240:	47a0      	blx	r4
        format++;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	3301      	adds	r3, #1
 8003246:	603b      	str	r3, [r7, #0]
        break;
 8003248:	bf00      	nop
  while (*format)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	f47f ac24 	bne.w	8002a9c <_vsnprintf+0x20>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003254:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	429a      	cmp	r2, r3
 800325a:	d302      	bcc.n	8003262 <_vsnprintf+0x7e6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	1e5a      	subs	r2, r3, #1
 8003260:	e000      	b.n	8003264 <_vsnprintf+0x7e8>
 8003262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003264:	68fc      	ldr	r4, [r7, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	2000      	movs	r0, #0
 800326c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800326e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003270:	4618      	mov	r0, r3
 8003272:	374c      	adds	r7, #76	; 0x4c
 8003274:	46bd      	mov	sp, r7
 8003276:	bd90      	pop	{r4, r7, pc}

08003278 <snprintf_>:
  return ret;
}


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
 8003278:	b40c      	push	{r2, r3}
 800327a:	b580      	push	{r7, lr}
 800327c:	b086      	sub	sp, #24
 800327e:	af02      	add	r7, sp, #8
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
  va_list va;
  va_start(va, format);
 8003284:	f107 031c 	add.w	r3, r7, #28
 8003288:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4805      	ldr	r0, [pc, #20]	; (80032ac <snprintf_+0x34>)
 8003296:	f7ff fbf1 	bl	8002a7c <_vsnprintf>
 800329a:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800329c:	68fb      	ldr	r3, [r7, #12]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032a8:	b002      	add	sp, #8
 80032aa:	4770      	bx	lr
 80032ac:	080021b5 	.word	0x080021b5

080032b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032b6:	4b15      	ldr	r3, [pc, #84]	; (800330c <HAL_MspInit+0x5c>)
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	4a14      	ldr	r2, [pc, #80]	; (800330c <HAL_MspInit+0x5c>)
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	6193      	str	r3, [r2, #24]
 80032c2:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_MspInit+0x5c>)
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ce:	4b0f      	ldr	r3, [pc, #60]	; (800330c <HAL_MspInit+0x5c>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	4a0e      	ldr	r2, [pc, #56]	; (800330c <HAL_MspInit+0x5c>)
 80032d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d8:	61d3      	str	r3, [r2, #28]
 80032da:	4b0c      	ldr	r3, [pc, #48]	; (800330c <HAL_MspInit+0x5c>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e2:	607b      	str	r3, [r7, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80032e6:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <HAL_MspInit+0x60>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	4a04      	ldr	r2, [pc, #16]	; (8003310 <HAL_MspInit+0x60>)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr
 800330c:	40021000 	.word	0x40021000
 8003310:	40010000 	.word	0x40010000

08003314 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331c:	f107 0310 	add.w	r3, r7, #16
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a15      	ldr	r2, [pc, #84]	; (8003384 <HAL_I2C_MspInit+0x70>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d123      	bne.n	800337c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003334:	4b14      	ldr	r3, [pc, #80]	; (8003388 <HAL_I2C_MspInit+0x74>)
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	4a13      	ldr	r2, [pc, #76]	; (8003388 <HAL_I2C_MspInit+0x74>)
 800333a:	f043 0308 	orr.w	r3, r3, #8
 800333e:	6193      	str	r3, [r2, #24]
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <HAL_I2C_MspInit+0x74>)
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800334c:	23c0      	movs	r3, #192	; 0xc0
 800334e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003350:	2312      	movs	r3, #18
 8003352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003354:	2303      	movs	r3, #3
 8003356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003358:	f107 0310 	add.w	r3, r7, #16
 800335c:	4619      	mov	r1, r3
 800335e:	480b      	ldr	r0, [pc, #44]	; (800338c <HAL_I2C_MspInit+0x78>)
 8003360:	f000 fa7c 	bl	800385c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003364:	4b08      	ldr	r3, [pc, #32]	; (8003388 <HAL_I2C_MspInit+0x74>)
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	4a07      	ldr	r2, [pc, #28]	; (8003388 <HAL_I2C_MspInit+0x74>)
 800336a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800336e:	61d3      	str	r3, [r2, #28]
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <HAL_I2C_MspInit+0x74>)
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800337c:	bf00      	nop
 800337e:	3720      	adds	r7, #32
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40005400 	.word	0x40005400
 8003388:	40021000 	.word	0x40021000
 800338c:	40010c00 	.word	0x40010c00

08003390 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <HAL_TIM_PWM_MspInit+0x34>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d10b      	bne.n	80033ba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033a2:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <HAL_TIM_PWM_MspInit+0x38>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	4a08      	ldr	r2, [pc, #32]	; (80033c8 <HAL_TIM_PWM_MspInit+0x38>)
 80033a8:	f043 0304 	orr.w	r3, r3, #4
 80033ac:	61d3      	str	r3, [r2, #28]
 80033ae:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <HAL_TIM_PWM_MspInit+0x38>)
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80033ba:	bf00      	nop
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	40000800 	.word	0x40000800
 80033c8:	40021000 	.word	0x40021000

080033cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d4:	f107 0310 	add.w	r3, r7, #16
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a10      	ldr	r2, [pc, #64]	; (8003428 <HAL_TIM_MspPostInit+0x5c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d118      	bne.n	800341e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <HAL_TIM_MspPostInit+0x60>)
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	4a0e      	ldr	r2, [pc, #56]	; (800342c <HAL_TIM_MspPostInit+0x60>)
 80033f2:	f043 0308 	orr.w	r3, r3, #8
 80033f6:	6193      	str	r3, [r2, #24]
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <HAL_TIM_MspPostInit+0x60>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB8     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003408:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340e:	2302      	movs	r3, #2
 8003410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003412:	f107 0310 	add.w	r3, r7, #16
 8003416:	4619      	mov	r1, r3
 8003418:	4805      	ldr	r0, [pc, #20]	; (8003430 <HAL_TIM_MspPostInit+0x64>)
 800341a:	f000 fa1f 	bl	800385c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800341e:	bf00      	nop
 8003420:	3720      	adds	r7, #32
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40000800 	.word	0x40000800
 800342c:	40021000 	.word	0x40021000
 8003430:	40010c00 	.word	0x40010c00

08003434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343c:	f107 0310 	add.w	r3, r7, #16
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1b      	ldr	r2, [pc, #108]	; (80034bc <HAL_UART_MspInit+0x88>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d12f      	bne.n	80034b4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003454:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <HAL_UART_MspInit+0x8c>)
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	4a19      	ldr	r2, [pc, #100]	; (80034c0 <HAL_UART_MspInit+0x8c>)
 800345a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800345e:	61d3      	str	r3, [r2, #28]
 8003460:	4b17      	ldr	r3, [pc, #92]	; (80034c0 <HAL_UART_MspInit+0x8c>)
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800346c:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <HAL_UART_MspInit+0x8c>)
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	4a13      	ldr	r2, [pc, #76]	; (80034c0 <HAL_UART_MspInit+0x8c>)
 8003472:	f043 0304 	orr.w	r3, r3, #4
 8003476:	6193      	str	r3, [r2, #24]
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <HAL_UART_MspInit+0x8c>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003484:	2304      	movs	r3, #4
 8003486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003488:	2302      	movs	r3, #2
 800348a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800348c:	2303      	movs	r3, #3
 800348e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003490:	f107 0310 	add.w	r3, r7, #16
 8003494:	4619      	mov	r1, r3
 8003496:	480b      	ldr	r0, [pc, #44]	; (80034c4 <HAL_UART_MspInit+0x90>)
 8003498:	f000 f9e0 	bl	800385c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800349c:	2308      	movs	r3, #8
 800349e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a8:	f107 0310 	add.w	r3, r7, #16
 80034ac:	4619      	mov	r1, r3
 80034ae:	4805      	ldr	r0, [pc, #20]	; (80034c4 <HAL_UART_MspInit+0x90>)
 80034b0:	f000 f9d4 	bl	800385c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034b4:	bf00      	nop
 80034b6:	3720      	adds	r7, #32
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40004400 	.word	0x40004400
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40010800 	.word	0x40010800

080034c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034cc:	bf00      	nop
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr

080034d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034d8:	e7fe      	b.n	80034d8 <HardFault_Handler+0x4>

080034da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034da:	b480      	push	{r7}
 80034dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034de:	e7fe      	b.n	80034de <MemManage_Handler+0x4>

080034e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034e4:	e7fe      	b.n	80034e4 <BusFault_Handler+0x4>

080034e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034ea:	e7fe      	b.n	80034ea <UsageFault_Handler+0x4>

080034ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003508:	bf00      	nop
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003514:	f000 f8a2 	bl	800365c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003518:	bf00      	nop
 800351a:	bd80      	pop	{r7, pc}

0800351c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003520:	4b15      	ldr	r3, [pc, #84]	; (8003578 <SystemInit+0x5c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a14      	ldr	r2, [pc, #80]	; (8003578 <SystemInit+0x5c>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800352c:	4b12      	ldr	r3, [pc, #72]	; (8003578 <SystemInit+0x5c>)
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	4911      	ldr	r1, [pc, #68]	; (8003578 <SystemInit+0x5c>)
 8003532:	4b12      	ldr	r3, [pc, #72]	; (800357c <SystemInit+0x60>)
 8003534:	4013      	ands	r3, r2
 8003536:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003538:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <SystemInit+0x5c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0e      	ldr	r2, [pc, #56]	; (8003578 <SystemInit+0x5c>)
 800353e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003546:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <SystemInit+0x5c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <SystemInit+0x5c>)
 800354e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003552:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003554:	4b08      	ldr	r3, [pc, #32]	; (8003578 <SystemInit+0x5c>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4a07      	ldr	r2, [pc, #28]	; (8003578 <SystemInit+0x5c>)
 800355a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800355e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <SystemInit+0x5c>)
 8003562:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003566:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <SystemInit+0x64>)
 800356a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800356e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	40021000 	.word	0x40021000
 800357c:	f8ff0000 	.word	0xf8ff0000
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003584:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003586:	e003      	b.n	8003590 <LoopCopyDataInit>

08003588 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800358a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800358c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800358e:	3104      	adds	r1, #4

08003590 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003590:	480a      	ldr	r0, [pc, #40]	; (80035bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003592:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003594:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003596:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003598:	d3f6      	bcc.n	8003588 <CopyDataInit>
  ldr r2, =_sbss
 800359a:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800359c:	e002      	b.n	80035a4 <LoopFillZerobss>

0800359e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800359e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80035a0:	f842 3b04 	str.w	r3, [r2], #4

080035a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80035a4:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80035a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80035a8:	d3f9      	bcc.n	800359e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80035aa:	f7ff ffb7 	bl	800351c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ae:	f002 fbf7 	bl	8005da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035b2:	f7fe fbd3 	bl	8001d5c <main>
  bx lr
 80035b6:	4770      	bx	lr
  ldr r3, =_sidata
 80035b8:	080060f0 	.word	0x080060f0
  ldr r0, =_sdata
 80035bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80035c0:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 80035c4:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 80035c8:	2000049c 	.word	0x2000049c

080035cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035cc:	e7fe      	b.n	80035cc <ADC1_2_IRQHandler>
	...

080035d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035d4:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <HAL_Init+0x28>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a07      	ldr	r2, [pc, #28]	; (80035f8 <HAL_Init+0x28>)
 80035da:	f043 0310 	orr.w	r3, r3, #16
 80035de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035e0:	2003      	movs	r0, #3
 80035e2:	f000 f907 	bl	80037f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035e6:	2000      	movs	r0, #0
 80035e8:	f000 f808 	bl	80035fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035ec:	f7ff fe60 	bl	80032b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40022000 	.word	0x40022000

080035fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003604:	4b12      	ldr	r3, [pc, #72]	; (8003650 <HAL_InitTick+0x54>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4b12      	ldr	r3, [pc, #72]	; (8003654 <HAL_InitTick+0x58>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	4619      	mov	r1, r3
 800360e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003612:	fbb3 f3f1 	udiv	r3, r3, r1
 8003616:	fbb2 f3f3 	udiv	r3, r2, r3
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f911 	bl	8003842 <HAL_SYSTICK_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e00e      	b.n	8003648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b0f      	cmp	r3, #15
 800362e:	d80a      	bhi.n	8003646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003630:	2200      	movs	r2, #0
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	f04f 30ff 	mov.w	r0, #4294967295
 8003638:	f000 f8e7 	bl	800380a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800363c:	4a06      	ldr	r2, [pc, #24]	; (8003658 <HAL_InitTick+0x5c>)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	e000      	b.n	8003648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000008 	.word	0x20000008
 8003654:	20000010 	.word	0x20000010
 8003658:	2000000c 	.word	0x2000000c

0800365c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_IncTick+0x1c>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_IncTick+0x20>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4413      	add	r3, r2
 800366c:	4a03      	ldr	r2, [pc, #12]	; (800367c <HAL_IncTick+0x20>)
 800366e:	6013      	str	r3, [r2, #0]
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	20000010 	.word	0x20000010
 800367c:	20000498 	.word	0x20000498

08003680 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return uwTick;
 8003684:	4b02      	ldr	r3, [pc, #8]	; (8003690 <HAL_GetTick+0x10>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr
 8003690:	20000498 	.word	0x20000498

08003694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <__NVIC_SetPriorityGrouping+0x44>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036b0:	4013      	ands	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036c6:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <__NVIC_SetPriorityGrouping+0x44>)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	60d3      	str	r3, [r2, #12]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036e0:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <__NVIC_GetPriorityGrouping+0x18>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	0a1b      	lsrs	r3, r3, #8
 80036e6:	f003 0307 	and.w	r3, r3, #7
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	6039      	str	r1, [r7, #0]
 8003702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003708:	2b00      	cmp	r3, #0
 800370a:	db0a      	blt.n	8003722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	b2da      	uxtb	r2, r3
 8003710:	490c      	ldr	r1, [pc, #48]	; (8003744 <__NVIC_SetPriority+0x4c>)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	0112      	lsls	r2, r2, #4
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	440b      	add	r3, r1
 800371c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003720:	e00a      	b.n	8003738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	b2da      	uxtb	r2, r3
 8003726:	4908      	ldr	r1, [pc, #32]	; (8003748 <__NVIC_SetPriority+0x50>)
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	3b04      	subs	r3, #4
 8003730:	0112      	lsls	r2, r2, #4
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	440b      	add	r3, r1
 8003736:	761a      	strb	r2, [r3, #24]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	e000e100 	.word	0xe000e100
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800374c:	b480      	push	{r7}
 800374e:	b089      	sub	sp, #36	; 0x24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f1c3 0307 	rsb	r3, r3, #7
 8003766:	2b04      	cmp	r3, #4
 8003768:	bf28      	it	cs
 800376a:	2304      	movcs	r3, #4
 800376c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3304      	adds	r3, #4
 8003772:	2b06      	cmp	r3, #6
 8003774:	d902      	bls.n	800377c <NVIC_EncodePriority+0x30>
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3b03      	subs	r3, #3
 800377a:	e000      	b.n	800377e <NVIC_EncodePriority+0x32>
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003780:	f04f 32ff 	mov.w	r2, #4294967295
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43da      	mvns	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	401a      	ands	r2, r3
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003794:	f04f 31ff 	mov.w	r1, #4294967295
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	fa01 f303 	lsl.w	r3, r1, r3
 800379e:	43d9      	mvns	r1, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a4:	4313      	orrs	r3, r2
         );
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3724      	adds	r7, #36	; 0x24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037c0:	d301      	bcc.n	80037c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037c2:	2301      	movs	r3, #1
 80037c4:	e00f      	b.n	80037e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037c6:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <SysTick_Config+0x40>)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ce:	210f      	movs	r1, #15
 80037d0:	f04f 30ff 	mov.w	r0, #4294967295
 80037d4:	f7ff ff90 	bl	80036f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d8:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <SysTick_Config+0x40>)
 80037da:	2200      	movs	r2, #0
 80037dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037de:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <SysTick_Config+0x40>)
 80037e0:	2207      	movs	r2, #7
 80037e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	e000e010 	.word	0xe000e010

080037f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff ff49 	bl	8003694 <__NVIC_SetPriorityGrouping>
}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800380a:	b580      	push	{r7, lr}
 800380c:	b086      	sub	sp, #24
 800380e:	af00      	add	r7, sp, #0
 8003810:	4603      	mov	r3, r0
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800381c:	f7ff ff5e 	bl	80036dc <__NVIC_GetPriorityGrouping>
 8003820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	6978      	ldr	r0, [r7, #20]
 8003828:	f7ff ff90 	bl	800374c <NVIC_EncodePriority>
 800382c:	4602      	mov	r2, r0
 800382e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003832:	4611      	mov	r1, r2
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff ff5f 	bl	80036f8 <__NVIC_SetPriority>
}
 800383a:	bf00      	nop
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff ffb0 	bl	80037b0 <SysTick_Config>
 8003850:	4603      	mov	r3, r0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800385c:	b480      	push	{r7}
 800385e:	b08b      	sub	sp, #44	; 0x2c
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003866:	2300      	movs	r3, #0
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800386a:	2300      	movs	r3, #0
 800386c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800386e:	e127      	b.n	8003ac0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003870:	2201      	movs	r2, #1
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	429a      	cmp	r2, r3
 800388a:	f040 8116 	bne.w	8003aba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b12      	cmp	r3, #18
 8003894:	d034      	beq.n	8003900 <HAL_GPIO_Init+0xa4>
 8003896:	2b12      	cmp	r3, #18
 8003898:	d80d      	bhi.n	80038b6 <HAL_GPIO_Init+0x5a>
 800389a:	2b02      	cmp	r3, #2
 800389c:	d02b      	beq.n	80038f6 <HAL_GPIO_Init+0x9a>
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d804      	bhi.n	80038ac <HAL_GPIO_Init+0x50>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d031      	beq.n	800390a <HAL_GPIO_Init+0xae>
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d01c      	beq.n	80038e4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80038aa:	e048      	b.n	800393e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d043      	beq.n	8003938 <HAL_GPIO_Init+0xdc>
 80038b0:	2b11      	cmp	r3, #17
 80038b2:	d01b      	beq.n	80038ec <HAL_GPIO_Init+0x90>
          break;
 80038b4:	e043      	b.n	800393e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80038b6:	4a89      	ldr	r2, [pc, #548]	; (8003adc <HAL_GPIO_Init+0x280>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d026      	beq.n	800390a <HAL_GPIO_Init+0xae>
 80038bc:	4a87      	ldr	r2, [pc, #540]	; (8003adc <HAL_GPIO_Init+0x280>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d806      	bhi.n	80038d0 <HAL_GPIO_Init+0x74>
 80038c2:	4a87      	ldr	r2, [pc, #540]	; (8003ae0 <HAL_GPIO_Init+0x284>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d020      	beq.n	800390a <HAL_GPIO_Init+0xae>
 80038c8:	4a86      	ldr	r2, [pc, #536]	; (8003ae4 <HAL_GPIO_Init+0x288>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d01d      	beq.n	800390a <HAL_GPIO_Init+0xae>
          break;
 80038ce:	e036      	b.n	800393e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80038d0:	4a85      	ldr	r2, [pc, #532]	; (8003ae8 <HAL_GPIO_Init+0x28c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d019      	beq.n	800390a <HAL_GPIO_Init+0xae>
 80038d6:	4a85      	ldr	r2, [pc, #532]	; (8003aec <HAL_GPIO_Init+0x290>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d016      	beq.n	800390a <HAL_GPIO_Init+0xae>
 80038dc:	4a84      	ldr	r2, [pc, #528]	; (8003af0 <HAL_GPIO_Init+0x294>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d013      	beq.n	800390a <HAL_GPIO_Init+0xae>
          break;
 80038e2:	e02c      	b.n	800393e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	623b      	str	r3, [r7, #32]
          break;
 80038ea:	e028      	b.n	800393e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	3304      	adds	r3, #4
 80038f2:	623b      	str	r3, [r7, #32]
          break;
 80038f4:	e023      	b.n	800393e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	3308      	adds	r3, #8
 80038fc:	623b      	str	r3, [r7, #32]
          break;
 80038fe:	e01e      	b.n	800393e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	330c      	adds	r3, #12
 8003906:	623b      	str	r3, [r7, #32]
          break;
 8003908:	e019      	b.n	800393e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003912:	2304      	movs	r3, #4
 8003914:	623b      	str	r3, [r7, #32]
          break;
 8003916:	e012      	b.n	800393e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d105      	bne.n	800392c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003920:	2308      	movs	r3, #8
 8003922:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	611a      	str	r2, [r3, #16]
          break;
 800392a:	e008      	b.n	800393e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800392c:	2308      	movs	r3, #8
 800392e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	615a      	str	r2, [r3, #20]
          break;
 8003936:	e002      	b.n	800393e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003938:	2300      	movs	r3, #0
 800393a:	623b      	str	r3, [r7, #32]
          break;
 800393c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2bff      	cmp	r3, #255	; 0xff
 8003942:	d801      	bhi.n	8003948 <HAL_GPIO_Init+0xec>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	e001      	b.n	800394c <HAL_GPIO_Init+0xf0>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3304      	adds	r3, #4
 800394c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	2bff      	cmp	r3, #255	; 0xff
 8003952:	d802      	bhi.n	800395a <HAL_GPIO_Init+0xfe>
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	e002      	b.n	8003960 <HAL_GPIO_Init+0x104>
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	3b08      	subs	r3, #8
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	210f      	movs	r1, #15
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	fa01 f303 	lsl.w	r3, r1, r3
 800396e:	43db      	mvns	r3, r3
 8003970:	401a      	ands	r2, r3
 8003972:	6a39      	ldr	r1, [r7, #32]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	431a      	orrs	r2, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 8096 	beq.w	8003aba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800398e:	4b59      	ldr	r3, [pc, #356]	; (8003af4 <HAL_GPIO_Init+0x298>)
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	4a58      	ldr	r2, [pc, #352]	; (8003af4 <HAL_GPIO_Init+0x298>)
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	6193      	str	r3, [r2, #24]
 800399a:	4b56      	ldr	r3, [pc, #344]	; (8003af4 <HAL_GPIO_Init+0x298>)
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80039a6:	4a54      	ldr	r2, [pc, #336]	; (8003af8 <HAL_GPIO_Init+0x29c>)
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	089b      	lsrs	r3, r3, #2
 80039ac:	3302      	adds	r3, #2
 80039ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	220f      	movs	r2, #15
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4013      	ands	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a4b      	ldr	r2, [pc, #300]	; (8003afc <HAL_GPIO_Init+0x2a0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d013      	beq.n	80039fa <HAL_GPIO_Init+0x19e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a4a      	ldr	r2, [pc, #296]	; (8003b00 <HAL_GPIO_Init+0x2a4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00d      	beq.n	80039f6 <HAL_GPIO_Init+0x19a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a49      	ldr	r2, [pc, #292]	; (8003b04 <HAL_GPIO_Init+0x2a8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d007      	beq.n	80039f2 <HAL_GPIO_Init+0x196>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a48      	ldr	r2, [pc, #288]	; (8003b08 <HAL_GPIO_Init+0x2ac>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d101      	bne.n	80039ee <HAL_GPIO_Init+0x192>
 80039ea:	2303      	movs	r3, #3
 80039ec:	e006      	b.n	80039fc <HAL_GPIO_Init+0x1a0>
 80039ee:	2304      	movs	r3, #4
 80039f0:	e004      	b.n	80039fc <HAL_GPIO_Init+0x1a0>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e002      	b.n	80039fc <HAL_GPIO_Init+0x1a0>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <HAL_GPIO_Init+0x1a0>
 80039fa:	2300      	movs	r3, #0
 80039fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fe:	f002 0203 	and.w	r2, r2, #3
 8003a02:	0092      	lsls	r2, r2, #2
 8003a04:	4093      	lsls	r3, r2
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a0c:	493a      	ldr	r1, [pc, #232]	; (8003af8 <HAL_GPIO_Init+0x29c>)
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	089b      	lsrs	r3, r3, #2
 8003a12:	3302      	adds	r3, #2
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d006      	beq.n	8003a34 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a26:	4b39      	ldr	r3, [pc, #228]	; (8003b0c <HAL_GPIO_Init+0x2b0>)
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	4938      	ldr	r1, [pc, #224]	; (8003b0c <HAL_GPIO_Init+0x2b0>)
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
 8003a32:	e006      	b.n	8003a42 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a34:	4b35      	ldr	r3, [pc, #212]	; (8003b0c <HAL_GPIO_Init+0x2b0>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	4933      	ldr	r1, [pc, #204]	; (8003b0c <HAL_GPIO_Init+0x2b0>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d006      	beq.n	8003a5c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a4e:	4b2f      	ldr	r3, [pc, #188]	; (8003b0c <HAL_GPIO_Init+0x2b0>)
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	492e      	ldr	r1, [pc, #184]	; (8003b0c <HAL_GPIO_Init+0x2b0>)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	604b      	str	r3, [r1, #4]
 8003a5a:	e006      	b.n	8003a6a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a5c:	4b2b      	ldr	r3, [pc, #172]	; (8003b0c <HAL_GPIO_Init+0x2b0>)
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	43db      	mvns	r3, r3
 8003a64:	4929      	ldr	r1, [pc, #164]	; (8003b0c <HAL_GPIO_Init+0x2b0>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d006      	beq.n	8003a84 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a76:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <HAL_GPIO_Init+0x2b0>)
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	4924      	ldr	r1, [pc, #144]	; (8003b0c <HAL_GPIO_Init+0x2b0>)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]
 8003a82:	e006      	b.n	8003a92 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a84:	4b21      	ldr	r3, [pc, #132]	; (8003b0c <HAL_GPIO_Init+0x2b0>)
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	491f      	ldr	r1, [pc, #124]	; (8003b0c <HAL_GPIO_Init+0x2b0>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d006      	beq.n	8003aac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a9e:	4b1b      	ldr	r3, [pc, #108]	; (8003b0c <HAL_GPIO_Init+0x2b0>)
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	491a      	ldr	r1, [pc, #104]	; (8003b0c <HAL_GPIO_Init+0x2b0>)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60cb      	str	r3, [r1, #12]
 8003aaa:	e006      	b.n	8003aba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003aac:	4b17      	ldr	r3, [pc, #92]	; (8003b0c <HAL_GPIO_Init+0x2b0>)
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	4915      	ldr	r1, [pc, #84]	; (8003b0c <HAL_GPIO_Init+0x2b0>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	3301      	adds	r3, #1
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f47f aed0 	bne.w	8003870 <HAL_GPIO_Init+0x14>
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	372c      	adds	r7, #44	; 0x2c
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	10210000 	.word	0x10210000
 8003ae0:	10110000 	.word	0x10110000
 8003ae4:	10120000 	.word	0x10120000
 8003ae8:	10310000 	.word	0x10310000
 8003aec:	10320000 	.word	0x10320000
 8003af0:	10220000 	.word	0x10220000
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40010000 	.word	0x40010000
 8003afc:	40010800 	.word	0x40010800
 8003b00:	40010c00 	.word	0x40010c00
 8003b04:	40011000 	.word	0x40011000
 8003b08:	40011400 	.word	0x40011400
 8003b0c:	40010400 	.word	0x40010400

08003b10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	887b      	ldrh	r3, [r7, #2]
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
 8003b2c:	e001      	b.n	8003b32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr
	...

08003b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e10f      	b.n	8003d72 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff fbd4 	bl	8003314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2224      	movs	r2, #36	; 0x24
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b84:	f001 fb40 	bl	8005208 <HAL_RCC_GetPCLK1Freq>
 8003b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	4a7b      	ldr	r2, [pc, #492]	; (8003d7c <HAL_I2C_Init+0x23c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d807      	bhi.n	8003ba4 <HAL_I2C_Init+0x64>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4a7a      	ldr	r2, [pc, #488]	; (8003d80 <HAL_I2C_Init+0x240>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	bf94      	ite	ls
 8003b9c:	2301      	movls	r3, #1
 8003b9e:	2300      	movhi	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	e006      	b.n	8003bb2 <HAL_I2C_Init+0x72>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4a77      	ldr	r2, [pc, #476]	; (8003d84 <HAL_I2C_Init+0x244>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	bf94      	ite	ls
 8003bac:	2301      	movls	r3, #1
 8003bae:	2300      	movhi	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e0db      	b.n	8003d72 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a72      	ldr	r2, [pc, #456]	; (8003d88 <HAL_I2C_Init+0x248>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	0c9b      	lsrs	r3, r3, #18
 8003bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	4a64      	ldr	r2, [pc, #400]	; (8003d7c <HAL_I2C_Init+0x23c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d802      	bhi.n	8003bf4 <HAL_I2C_Init+0xb4>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	e009      	b.n	8003c08 <HAL_I2C_Init+0xc8>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	4a63      	ldr	r2, [pc, #396]	; (8003d8c <HAL_I2C_Init+0x24c>)
 8003c00:	fba2 2303 	umull	r2, r3, r2, r3
 8003c04:	099b      	lsrs	r3, r3, #6
 8003c06:	3301      	adds	r3, #1
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6812      	ldr	r2, [r2, #0]
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	4956      	ldr	r1, [pc, #344]	; (8003d7c <HAL_I2C_Init+0x23c>)
 8003c24:	428b      	cmp	r3, r1
 8003c26:	d80d      	bhi.n	8003c44 <HAL_I2C_Init+0x104>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1e59      	subs	r1, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c36:	3301      	adds	r3, #1
 8003c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	bf38      	it	cc
 8003c40:	2304      	movcc	r3, #4
 8003c42:	e04f      	b.n	8003ce4 <HAL_I2C_Init+0x1a4>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d111      	bne.n	8003c70 <HAL_I2C_Init+0x130>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1e58      	subs	r0, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	440b      	add	r3, r1
 8003c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e012      	b.n	8003c96 <HAL_I2C_Init+0x156>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1e58      	subs	r0, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	0099      	lsls	r1, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c86:	3301      	adds	r3, #1
 8003c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bf0c      	ite	eq
 8003c90:	2301      	moveq	r3, #1
 8003c92:	2300      	movne	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_I2C_Init+0x15e>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e022      	b.n	8003ce4 <HAL_I2C_Init+0x1a4>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10e      	bne.n	8003cc4 <HAL_I2C_Init+0x184>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1e58      	subs	r0, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6859      	ldr	r1, [r3, #4]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	440b      	add	r3, r1
 8003cb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc2:	e00f      	b.n	8003ce4 <HAL_I2C_Init+0x1a4>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	1e58      	subs	r0, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	0099      	lsls	r1, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cda:	3301      	adds	r3, #1
 8003cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	6809      	ldr	r1, [r1, #0]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69da      	ldr	r2, [r3, #28]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6911      	ldr	r1, [r2, #16]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	68d2      	ldr	r2, [r2, #12]
 8003d1e:	4311      	orrs	r1, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	430b      	orrs	r3, r1
 8003d26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	000186a0 	.word	0x000186a0
 8003d80:	001e847f 	.word	0x001e847f
 8003d84:	003d08ff 	.word	0x003d08ff
 8003d88:	431bde83 	.word	0x431bde83
 8003d8c:	10624dd3 	.word	0x10624dd3

08003d90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	4608      	mov	r0, r1
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4603      	mov	r3, r0
 8003da0:	817b      	strh	r3, [r7, #10]
 8003da2:	460b      	mov	r3, r1
 8003da4:	813b      	strh	r3, [r7, #8]
 8003da6:	4613      	mov	r3, r2
 8003da8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003daa:	f7ff fc69 	bl	8003680 <HAL_GetTick>
 8003dae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	f040 80d9 	bne.w	8003f70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	2319      	movs	r3, #25
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	496d      	ldr	r1, [pc, #436]	; (8003f7c <HAL_I2C_Mem_Write+0x1ec>)
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 fc6b 	bl	80046a4 <I2C_WaitOnFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e0cc      	b.n	8003f72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_I2C_Mem_Write+0x56>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e0c5      	b.n	8003f72 <HAL_I2C_Mem_Write+0x1e2>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d007      	beq.n	8003e0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2221      	movs	r2, #33	; 0x21
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2240      	movs	r2, #64	; 0x40
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a3a      	ldr	r2, [r7, #32]
 8003e36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4a4d      	ldr	r2, [pc, #308]	; (8003f80 <HAL_I2C_Mem_Write+0x1f0>)
 8003e4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e4e:	88f8      	ldrh	r0, [r7, #6]
 8003e50:	893a      	ldrh	r2, [r7, #8]
 8003e52:	8979      	ldrh	r1, [r7, #10]
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	9301      	str	r3, [sp, #4]
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fac6 	bl	80043f0 <I2C_RequestMemoryWrite>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d052      	beq.n	8003f10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e081      	b.n	8003f72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fcec 	bl	8004850 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00d      	beq.n	8003e9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d107      	bne.n	8003e96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e06b      	b.n	8003f72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	781a      	ldrb	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d11b      	bne.n	8003f10 <HAL_I2C_Mem_Write+0x180>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d017      	beq.n	8003f10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	781a      	ldrb	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1aa      	bne.n	8003e6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 fcd8 	bl	80048d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00d      	beq.n	8003f44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d107      	bne.n	8003f40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e016      	b.n	8003f72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e000      	b.n	8003f72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f70:	2302      	movs	r3, #2
  }
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	00100002 	.word	0x00100002
 8003f80:	ffff0000 	.word	0xffff0000

08003f84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08c      	sub	sp, #48	; 0x30
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	4611      	mov	r1, r2
 8003f90:	461a      	mov	r2, r3
 8003f92:	4603      	mov	r3, r0
 8003f94:	817b      	strh	r3, [r7, #10]
 8003f96:	460b      	mov	r3, r1
 8003f98:	813b      	strh	r3, [r7, #8]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f9e:	f7ff fb6f 	bl	8003680 <HAL_GetTick>
 8003fa2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	f040 8218 	bne.w	80043e2 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	2319      	movs	r3, #25
 8003fb8:	2201      	movs	r2, #1
 8003fba:	4981      	ldr	r1, [pc, #516]	; (80041c0 <HAL_I2C_Mem_Read+0x23c>)
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 fb71 	bl	80046a4 <I2C_WaitOnFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e20b      	b.n	80043e4 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_I2C_Mem_Read+0x56>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e204      	b.n	80043e4 <HAL_I2C_Mem_Read+0x460>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d007      	beq.n	8004000 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800400e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2222      	movs	r2, #34	; 0x22
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2240      	movs	r2, #64	; 0x40
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800402a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004030:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4a61      	ldr	r2, [pc, #388]	; (80041c4 <HAL_I2C_Mem_Read+0x240>)
 8004040:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004042:	88f8      	ldrh	r0, [r7, #6]
 8004044:	893a      	ldrh	r2, [r7, #8]
 8004046:	8979      	ldrh	r1, [r7, #10]
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	9301      	str	r3, [sp, #4]
 800404c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	4603      	mov	r3, r0
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 fa56 	bl	8004504 <I2C_RequestMemoryRead>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e1c0      	b.n	80043e4 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004066:	2b00      	cmp	r3, #0
 8004068:	d113      	bne.n	8004092 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406a:	2300      	movs	r3, #0
 800406c:	623b      	str	r3, [r7, #32]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	623b      	str	r3, [r7, #32]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	623b      	str	r3, [r7, #32]
 800407e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	e194      	b.n	80043bc <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004096:	2b01      	cmp	r3, #1
 8004098:	d11d      	bne.n	80040d6 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040aa:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ac:	2300      	movs	r3, #0
 80040ae:	61fb      	str	r3, [r7, #28]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	61fb      	str	r3, [r7, #28]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	61fb      	str	r3, [r7, #28]
 80040c0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80040d2:	b662      	cpsie	i
 80040d4:	e172      	b.n	80043bc <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d11d      	bne.n	800411a <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040ee:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f0:	2300      	movs	r3, #0
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	61bb      	str	r3, [r7, #24]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	61bb      	str	r3, [r7, #24]
 8004104:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004114:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004116:	b662      	cpsie	i
 8004118:	e150      	b.n	80043bc <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004128:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004140:	e13c      	b.n	80043bc <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004146:	2b03      	cmp	r3, #3
 8004148:	f200 80f5 	bhi.w	8004336 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004150:	2b01      	cmp	r3, #1
 8004152:	d123      	bne.n	800419c <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004156:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 fbfb 	bl	8004954 <I2C_WaitOnRXNEFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e13d      	b.n	80043e4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	855a      	strh	r2, [r3, #42]	; 0x2a
 800419a:	e10f      	b.n	80043bc <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d150      	bne.n	8004246 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041aa:	2200      	movs	r2, #0
 80041ac:	4906      	ldr	r1, [pc, #24]	; (80041c8 <HAL_I2C_Mem_Read+0x244>)
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fa78 	bl	80046a4 <I2C_WaitOnFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e112      	b.n	80043e4 <HAL_I2C_Mem_Read+0x460>
 80041be:	bf00      	nop
 80041c0:	00100002 	.word	0x00100002
 80041c4:	ffff0000 	.word	0xffff0000
 80041c8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80041cc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041dc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004210:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004244:	e0ba      	b.n	80043bc <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424c:	2200      	movs	r2, #0
 800424e:	4967      	ldr	r1, [pc, #412]	; (80043ec <HAL_I2C_Mem_Read+0x468>)
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fa27 	bl	80046a4 <I2C_WaitOnFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0c1      	b.n	80043e4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800426e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004270:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042aa:	2200      	movs	r2, #0
 80042ac:	494f      	ldr	r1, [pc, #316]	; (80043ec <HAL_I2C_Mem_Read+0x468>)
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f9f8 	bl	80046a4 <I2C_WaitOnFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e092      	b.n	80043e4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042cc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004300:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004334:	e042      	b.n	80043bc <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004338:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 fb0a 	bl	8004954 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e04c      	b.n	80043e4 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b04      	cmp	r3, #4
 8004388:	d118      	bne.n	80043bc <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f47f aebe 	bne.w	8004142 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	e000      	b.n	80043e4 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 80043e2:	2302      	movs	r3, #2
  }
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3728      	adds	r7, #40	; 0x28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	00010004 	.word	0x00010004

080043f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	4608      	mov	r0, r1
 80043fa:	4611      	mov	r1, r2
 80043fc:	461a      	mov	r2, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	817b      	strh	r3, [r7, #10]
 8004402:	460b      	mov	r3, r1
 8004404:	813b      	strh	r3, [r7, #8]
 8004406:	4613      	mov	r3, r2
 8004408:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004418:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	2200      	movs	r2, #0
 8004422:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 f93c 	bl	80046a4 <I2C_WaitOnFlagUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e05f      	b.n	80044f6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004436:	897b      	ldrh	r3, [r7, #10]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004444:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	6a3a      	ldr	r2, [r7, #32]
 800444a:	492d      	ldr	r1, [pc, #180]	; (8004500 <I2C_RequestMemoryWrite+0x110>)
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f980 	bl	8004752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e04c      	b.n	80044f6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004474:	6a39      	ldr	r1, [r7, #32]
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 f9ea 	bl	8004850 <I2C_WaitOnTXEFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00d      	beq.n	800449e <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	2b04      	cmp	r3, #4
 8004488:	d107      	bne.n	800449a <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004498:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e02b      	b.n	80044f6 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d105      	bne.n	80044b0 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044a4:	893b      	ldrh	r3, [r7, #8]
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	611a      	str	r2, [r3, #16]
 80044ae:	e021      	b.n	80044f4 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044b0:	893b      	ldrh	r3, [r7, #8]
 80044b2:	0a1b      	lsrs	r3, r3, #8
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c0:	6a39      	ldr	r1, [r7, #32]
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f9c4 	bl	8004850 <I2C_WaitOnTXEFlagUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00d      	beq.n	80044ea <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d107      	bne.n	80044e6 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e005      	b.n	80044f6 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ea:	893b      	ldrh	r3, [r7, #8]
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	00010002 	.word	0x00010002

08004504 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b088      	sub	sp, #32
 8004508:	af02      	add	r7, sp, #8
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	4608      	mov	r0, r1
 800450e:	4611      	mov	r1, r2
 8004510:	461a      	mov	r2, r3
 8004512:	4603      	mov	r3, r0
 8004514:	817b      	strh	r3, [r7, #10]
 8004516:	460b      	mov	r3, r1
 8004518:	813b      	strh	r3, [r7, #8]
 800451a:	4613      	mov	r3, r2
 800451c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800452c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800453c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	2200      	movs	r2, #0
 8004546:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f8aa 	bl	80046a4 <I2C_WaitOnFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e09e      	b.n	8004698 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800455a:	897b      	ldrh	r3, [r7, #10]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	461a      	mov	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004568:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	6a3a      	ldr	r2, [r7, #32]
 800456e:	494c      	ldr	r1, [pc, #304]	; (80046a0 <I2C_RequestMemoryRead+0x19c>)
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 f8ee 	bl	8004752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e08b      	b.n	8004698 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004598:	6a39      	ldr	r1, [r7, #32]
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 f958 	bl	8004850 <I2C_WaitOnTXEFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00d      	beq.n	80045c2 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d107      	bne.n	80045be <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e06a      	b.n	8004698 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d105      	bne.n	80045d4 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045c8:	893b      	ldrh	r3, [r7, #8]
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	611a      	str	r2, [r3, #16]
 80045d2:	e021      	b.n	8004618 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045d4:	893b      	ldrh	r3, [r7, #8]
 80045d6:	0a1b      	lsrs	r3, r3, #8
 80045d8:	b29b      	uxth	r3, r3
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e4:	6a39      	ldr	r1, [r7, #32]
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f932 	bl	8004850 <I2C_WaitOnTXEFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00d      	beq.n	800460e <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d107      	bne.n	800460a <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004608:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e044      	b.n	8004698 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800460e:	893b      	ldrh	r3, [r7, #8]
 8004610:	b2da      	uxtb	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461a:	6a39      	ldr	r1, [r7, #32]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f917 	bl	8004850 <I2C_WaitOnTXEFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00d      	beq.n	8004644 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	2b04      	cmp	r3, #4
 800462e:	d107      	bne.n	8004640 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800463e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e029      	b.n	8004698 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004652:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	2200      	movs	r2, #0
 800465c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f81f 	bl	80046a4 <I2C_WaitOnFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e013      	b.n	8004698 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004670:	897b      	ldrh	r3, [r7, #10]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	b2da      	uxtb	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	6a3a      	ldr	r2, [r7, #32]
 8004684:	4906      	ldr	r1, [pc, #24]	; (80046a0 <I2C_RequestMemoryRead+0x19c>)
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 f863 	bl	8004752 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	00010002 	.word	0x00010002

080046a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	4613      	mov	r3, r2
 80046b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046b4:	e025      	b.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d021      	beq.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046be:	f7fe ffdf 	bl	8003680 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d302      	bcc.n	80046d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d116      	bne.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f043 0220 	orr.w	r2, r3, #32
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e023      	b.n	800474a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	0c1b      	lsrs	r3, r3, #16
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b01      	cmp	r3, #1
 800470a:	d10d      	bne.n	8004728 <I2C_WaitOnFlagUntilTimeout+0x84>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	43da      	mvns	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4013      	ands	r3, r2
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	bf0c      	ite	eq
 800471e:	2301      	moveq	r3, #1
 8004720:	2300      	movne	r3, #0
 8004722:	b2db      	uxtb	r3, r3
 8004724:	461a      	mov	r2, r3
 8004726:	e00c      	b.n	8004742 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	43da      	mvns	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4013      	ands	r3, r2
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	bf0c      	ite	eq
 800473a:	2301      	moveq	r3, #1
 800473c:	2300      	movne	r3, #0
 800473e:	b2db      	uxtb	r3, r3
 8004740:	461a      	mov	r2, r3
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	429a      	cmp	r2, r3
 8004746:	d0b6      	beq.n	80046b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b084      	sub	sp, #16
 8004756:	af00      	add	r7, sp, #0
 8004758:	60f8      	str	r0, [r7, #12]
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
 800475e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004760:	e051      	b.n	8004806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004770:	d123      	bne.n	80047ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004780:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800478a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f043 0204 	orr.w	r2, r3, #4
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e046      	b.n	8004848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c0:	d021      	beq.n	8004806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c2:	f7fe ff5d 	bl	8003680 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d302      	bcc.n	80047d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d116      	bne.n	8004806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f043 0220 	orr.w	r2, r3, #32
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e020      	b.n	8004848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	0c1b      	lsrs	r3, r3, #16
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	d10c      	bne.n	800482a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	43da      	mvns	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4013      	ands	r3, r2
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	bf14      	ite	ne
 8004822:	2301      	movne	r3, #1
 8004824:	2300      	moveq	r3, #0
 8004826:	b2db      	uxtb	r3, r3
 8004828:	e00b      	b.n	8004842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	43da      	mvns	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	4013      	ands	r3, r2
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	bf14      	ite	ne
 800483c:	2301      	movne	r3, #1
 800483e:	2300      	moveq	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d18d      	bne.n	8004762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800485c:	e02d      	b.n	80048ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f8ce 	bl	8004a00 <I2C_IsAcknowledgeFailed>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e02d      	b.n	80048ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004874:	d021      	beq.n	80048ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004876:	f7fe ff03 	bl	8003680 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	429a      	cmp	r2, r3
 8004884:	d302      	bcc.n	800488c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d116      	bne.n	80048ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f043 0220 	orr.w	r2, r3, #32
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e007      	b.n	80048ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c4:	2b80      	cmp	r3, #128	; 0x80
 80048c6:	d1ca      	bne.n	800485e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048de:	e02d      	b.n	800493c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 f88d 	bl	8004a00 <I2C_IsAcknowledgeFailed>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e02d      	b.n	800494c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f6:	d021      	beq.n	800493c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f8:	f7fe fec2 	bl	8003680 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	429a      	cmp	r2, r3
 8004906:	d302      	bcc.n	800490e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d116      	bne.n	800493c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004928:	f043 0220 	orr.w	r2, r3, #32
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e007      	b.n	800494c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b04      	cmp	r3, #4
 8004948:	d1ca      	bne.n	80048e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004960:	e042      	b.n	80049e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	f003 0310 	and.w	r3, r3, #16
 800496c:	2b10      	cmp	r3, #16
 800496e:	d119      	bne.n	80049a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0210 	mvn.w	r2, #16
 8004978:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e029      	b.n	80049f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a4:	f7fe fe6c 	bl	8003680 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d302      	bcc.n	80049ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d116      	bne.n	80049e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	f043 0220 	orr.w	r2, r3, #32
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e007      	b.n	80049f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b40      	cmp	r3, #64	; 0x40
 80049f4:	d1b5      	bne.n	8004962 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a16:	d11b      	bne.n	8004a50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	f043 0204 	orr.w	r2, r3, #4
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e000      	b.n	8004a52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr

08004a5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e26c      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 8087 	beq.w	8004b8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a7c:	4b92      	ldr	r3, [pc, #584]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 030c 	and.w	r3, r3, #12
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d00c      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a88:	4b8f      	ldr	r3, [pc, #572]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 030c 	and.w	r3, r3, #12
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d112      	bne.n	8004aba <HAL_RCC_OscConfig+0x5e>
 8004a94:	4b8c      	ldr	r3, [pc, #560]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa0:	d10b      	bne.n	8004aba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa2:	4b89      	ldr	r3, [pc, #548]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d06c      	beq.n	8004b88 <HAL_RCC_OscConfig+0x12c>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d168      	bne.n	8004b88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e246      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac2:	d106      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x76>
 8004ac4:	4b80      	ldr	r3, [pc, #512]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a7f      	ldr	r2, [pc, #508]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	e02e      	b.n	8004b30 <HAL_RCC_OscConfig+0xd4>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCC_OscConfig+0x98>
 8004ada:	4b7b      	ldr	r3, [pc, #492]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a7a      	ldr	r2, [pc, #488]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	4b78      	ldr	r3, [pc, #480]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a77      	ldr	r2, [pc, #476]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	e01d      	b.n	8004b30 <HAL_RCC_OscConfig+0xd4>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004afc:	d10c      	bne.n	8004b18 <HAL_RCC_OscConfig+0xbc>
 8004afe:	4b72      	ldr	r3, [pc, #456]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a71      	ldr	r2, [pc, #452]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	4b6f      	ldr	r3, [pc, #444]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a6e      	ldr	r2, [pc, #440]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	e00b      	b.n	8004b30 <HAL_RCC_OscConfig+0xd4>
 8004b18:	4b6b      	ldr	r3, [pc, #428]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a6a      	ldr	r2, [pc, #424]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	4b68      	ldr	r3, [pc, #416]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a67      	ldr	r2, [pc, #412]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d013      	beq.n	8004b60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b38:	f7fe fda2 	bl	8003680 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b40:	f7fe fd9e 	bl	8003680 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b64      	cmp	r3, #100	; 0x64
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e1fa      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b52:	4b5d      	ldr	r3, [pc, #372]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCC_OscConfig+0xe4>
 8004b5e:	e014      	b.n	8004b8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b60:	f7fe fd8e 	bl	8003680 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b68:	f7fe fd8a 	bl	8003680 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b64      	cmp	r3, #100	; 0x64
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e1e6      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b7a:	4b53      	ldr	r3, [pc, #332]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x10c>
 8004b86:	e000      	b.n	8004b8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d063      	beq.n	8004c5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b96:	4b4c      	ldr	r3, [pc, #304]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00b      	beq.n	8004bba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ba2:	4b49      	ldr	r3, [pc, #292]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f003 030c 	and.w	r3, r3, #12
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d11c      	bne.n	8004be8 <HAL_RCC_OscConfig+0x18c>
 8004bae:	4b46      	ldr	r3, [pc, #280]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d116      	bne.n	8004be8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bba:	4b43      	ldr	r3, [pc, #268]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d005      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x176>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d001      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e1ba      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd2:	4b3d      	ldr	r3, [pc, #244]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	4939      	ldr	r1, [pc, #228]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004be6:	e03a      	b.n	8004c5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d020      	beq.n	8004c32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bf0:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <HAL_RCC_OscConfig+0x270>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf6:	f7fe fd43 	bl	8003680 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bfc:	e008      	b.n	8004c10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bfe:	f7fe fd3f 	bl	8003680 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e19b      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c10:	4b2d      	ldr	r3, [pc, #180]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0f0      	beq.n	8004bfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1c:	4b2a      	ldr	r3, [pc, #168]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	4927      	ldr	r1, [pc, #156]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	600b      	str	r3, [r1, #0]
 8004c30:	e015      	b.n	8004c5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c32:	4b26      	ldr	r3, [pc, #152]	; (8004ccc <HAL_RCC_OscConfig+0x270>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c38:	f7fe fd22 	bl	8003680 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c40:	f7fe fd1e 	bl	8003680 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e17a      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c52:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d03a      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d019      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c72:	4b17      	ldr	r3, [pc, #92]	; (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004c74:	2201      	movs	r2, #1
 8004c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c78:	f7fe fd02 	bl	8003680 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c80:	f7fe fcfe 	bl	8003680 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e15a      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c92:	4b0d      	ldr	r3, [pc, #52]	; (8004cc8 <HAL_RCC_OscConfig+0x26c>)
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c9e:	2001      	movs	r0, #1
 8004ca0:	f000 fada 	bl	8005258 <RCC_Delay>
 8004ca4:	e01c      	b.n	8004ce0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ca6:	4b0a      	ldr	r3, [pc, #40]	; (8004cd0 <HAL_RCC_OscConfig+0x274>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cac:	f7fe fce8 	bl	8003680 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb2:	e00f      	b.n	8004cd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cb4:	f7fe fce4 	bl	8003680 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d908      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e140      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
 8004cc6:	bf00      	nop
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	42420000 	.word	0x42420000
 8004cd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd4:	4b9e      	ldr	r3, [pc, #632]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e9      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 80a6 	beq.w	8004e3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cf2:	4b97      	ldr	r3, [pc, #604]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10d      	bne.n	8004d1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cfe:	4b94      	ldr	r3, [pc, #592]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	4a93      	ldr	r2, [pc, #588]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d08:	61d3      	str	r3, [r2, #28]
 8004d0a:	4b91      	ldr	r3, [pc, #580]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d12:	60bb      	str	r3, [r7, #8]
 8004d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d16:	2301      	movs	r3, #1
 8004d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1a:	4b8e      	ldr	r3, [pc, #568]	; (8004f54 <HAL_RCC_OscConfig+0x4f8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d118      	bne.n	8004d58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d26:	4b8b      	ldr	r3, [pc, #556]	; (8004f54 <HAL_RCC_OscConfig+0x4f8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a8a      	ldr	r2, [pc, #552]	; (8004f54 <HAL_RCC_OscConfig+0x4f8>)
 8004d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d32:	f7fe fca5 	bl	8003680 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d3a:	f7fe fca1 	bl	8003680 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b64      	cmp	r3, #100	; 0x64
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e0fd      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4c:	4b81      	ldr	r3, [pc, #516]	; (8004f54 <HAL_RCC_OscConfig+0x4f8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d106      	bne.n	8004d6e <HAL_RCC_OscConfig+0x312>
 8004d60:	4b7b      	ldr	r3, [pc, #492]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	4a7a      	ldr	r2, [pc, #488]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	6213      	str	r3, [r2, #32]
 8004d6c:	e02d      	b.n	8004dca <HAL_RCC_OscConfig+0x36e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10c      	bne.n	8004d90 <HAL_RCC_OscConfig+0x334>
 8004d76:	4b76      	ldr	r3, [pc, #472]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	4a75      	ldr	r2, [pc, #468]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	6213      	str	r3, [r2, #32]
 8004d82:	4b73      	ldr	r3, [pc, #460]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	4a72      	ldr	r2, [pc, #456]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d88:	f023 0304 	bic.w	r3, r3, #4
 8004d8c:	6213      	str	r3, [r2, #32]
 8004d8e:	e01c      	b.n	8004dca <HAL_RCC_OscConfig+0x36e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	2b05      	cmp	r3, #5
 8004d96:	d10c      	bne.n	8004db2 <HAL_RCC_OscConfig+0x356>
 8004d98:	4b6d      	ldr	r3, [pc, #436]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	4a6c      	ldr	r2, [pc, #432]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004d9e:	f043 0304 	orr.w	r3, r3, #4
 8004da2:	6213      	str	r3, [r2, #32]
 8004da4:	4b6a      	ldr	r3, [pc, #424]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	4a69      	ldr	r2, [pc, #420]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004daa:	f043 0301 	orr.w	r3, r3, #1
 8004dae:	6213      	str	r3, [r2, #32]
 8004db0:	e00b      	b.n	8004dca <HAL_RCC_OscConfig+0x36e>
 8004db2:	4b67      	ldr	r3, [pc, #412]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	4a66      	ldr	r2, [pc, #408]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004db8:	f023 0301 	bic.w	r3, r3, #1
 8004dbc:	6213      	str	r3, [r2, #32]
 8004dbe:	4b64      	ldr	r3, [pc, #400]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	4a63      	ldr	r2, [pc, #396]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004dc4:	f023 0304 	bic.w	r3, r3, #4
 8004dc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d015      	beq.n	8004dfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd2:	f7fe fc55 	bl	8003680 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd8:	e00a      	b.n	8004df0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dda:	f7fe fc51 	bl	8003680 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e0ab      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df0:	4b57      	ldr	r3, [pc, #348]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0ee      	beq.n	8004dda <HAL_RCC_OscConfig+0x37e>
 8004dfc:	e014      	b.n	8004e28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dfe:	f7fe fc3f 	bl	8003680 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e04:	e00a      	b.n	8004e1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e06:	f7fe fc3b 	bl	8003680 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e095      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e1c:	4b4c      	ldr	r3, [pc, #304]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1ee      	bne.n	8004e06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e28:	7dfb      	ldrb	r3, [r7, #23]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d105      	bne.n	8004e3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e2e:	4b48      	ldr	r3, [pc, #288]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	4a47      	ldr	r2, [pc, #284]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 8081 	beq.w	8004f46 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e44:	4b42      	ldr	r3, [pc, #264]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 030c 	and.w	r3, r3, #12
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d061      	beq.n	8004f14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69db      	ldr	r3, [r3, #28]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d146      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e58:	4b3f      	ldr	r3, [pc, #252]	; (8004f58 <HAL_RCC_OscConfig+0x4fc>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5e:	f7fe fc0f 	bl	8003680 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e66:	f7fe fc0b 	bl	8003680 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e067      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e78:	4b35      	ldr	r3, [pc, #212]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1f0      	bne.n	8004e66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8c:	d108      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e8e:	4b30      	ldr	r3, [pc, #192]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	492d      	ldr	r1, [pc, #180]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ea0:	4b2b      	ldr	r3, [pc, #172]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a19      	ldr	r1, [r3, #32]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	430b      	orrs	r3, r1
 8004eb2:	4927      	ldr	r1, [pc, #156]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eb8:	4b27      	ldr	r3, [pc, #156]	; (8004f58 <HAL_RCC_OscConfig+0x4fc>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebe:	f7fe fbdf 	bl	8003680 <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec6:	f7fe fbdb 	bl	8003680 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e037      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0f0      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x46a>
 8004ee4:	e02f      	b.n	8004f46 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee6:	4b1c      	ldr	r3, [pc, #112]	; (8004f58 <HAL_RCC_OscConfig+0x4fc>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eec:	f7fe fbc8 	bl	8003680 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef4:	f7fe fbc4 	bl	8003680 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e020      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f06:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x498>
 8004f12:	e018      	b.n	8004f46 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e013      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <HAL_RCC_OscConfig+0x4f4>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d106      	bne.n	8004f42 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d001      	beq.n	8004f46 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40021000 	.word	0x40021000
 8004f54:	40007000 	.word	0x40007000
 8004f58:	42420060 	.word	0x42420060

08004f5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0d0      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f70:	4b6a      	ldr	r3, [pc, #424]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d910      	bls.n	8004fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7e:	4b67      	ldr	r3, [pc, #412]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 0207 	bic.w	r2, r3, #7
 8004f86:	4965      	ldr	r1, [pc, #404]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8e:	4b63      	ldr	r3, [pc, #396]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0b8      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d020      	beq.n	8004fee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d005      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fb8:	4b59      	ldr	r3, [pc, #356]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	4a58      	ldr	r2, [pc, #352]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004fc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fd0:	4b53      	ldr	r3, [pc, #332]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4a52      	ldr	r2, [pc, #328]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004fda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fdc:	4b50      	ldr	r3, [pc, #320]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	494d      	ldr	r1, [pc, #308]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d040      	beq.n	800507c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d107      	bne.n	8005012 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005002:	4b47      	ldr	r3, [pc, #284]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d115      	bne.n	800503a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e07f      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d107      	bne.n	800502a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800501a:	4b41      	ldr	r3, [pc, #260]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e073      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502a:	4b3d      	ldr	r3, [pc, #244]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e06b      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800503a:	4b39      	ldr	r3, [pc, #228]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f023 0203 	bic.w	r2, r3, #3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	4936      	ldr	r1, [pc, #216]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 8005048:	4313      	orrs	r3, r2
 800504a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800504c:	f7fe fb18 	bl	8003680 <HAL_GetTick>
 8005050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005052:	e00a      	b.n	800506a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005054:	f7fe fb14 	bl	8003680 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e053      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506a:	4b2d      	ldr	r3, [pc, #180]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f003 020c 	and.w	r2, r3, #12
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	429a      	cmp	r2, r3
 800507a:	d1eb      	bne.n	8005054 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800507c:	4b27      	ldr	r3, [pc, #156]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d210      	bcs.n	80050ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800508a:	4b24      	ldr	r3, [pc, #144]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f023 0207 	bic.w	r2, r3, #7
 8005092:	4922      	ldr	r1, [pc, #136]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	4313      	orrs	r3, r2
 8005098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800509a:	4b20      	ldr	r3, [pc, #128]	; (800511c <HAL_RCC_ClockConfig+0x1c0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d001      	beq.n	80050ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e032      	b.n	8005112 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050b8:	4b19      	ldr	r3, [pc, #100]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4916      	ldr	r1, [pc, #88]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d009      	beq.n	80050ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050d6:	4b12      	ldr	r3, [pc, #72]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	490e      	ldr	r1, [pc, #56]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050ea:	f000 f821 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 80050ee:	4601      	mov	r1, r0
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <HAL_RCC_ClockConfig+0x1c4>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	091b      	lsrs	r3, r3, #4
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	4a0a      	ldr	r2, [pc, #40]	; (8005124 <HAL_RCC_ClockConfig+0x1c8>)
 80050fc:	5cd3      	ldrb	r3, [r2, r3]
 80050fe:	fa21 f303 	lsr.w	r3, r1, r3
 8005102:	4a09      	ldr	r2, [pc, #36]	; (8005128 <HAL_RCC_ClockConfig+0x1cc>)
 8005104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005106:	4b09      	ldr	r3, [pc, #36]	; (800512c <HAL_RCC_ClockConfig+0x1d0>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7fe fa76 	bl	80035fc <HAL_InitTick>

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40022000 	.word	0x40022000
 8005120:	40021000 	.word	0x40021000
 8005124:	080060c8 	.word	0x080060c8
 8005128:	20000008 	.word	0x20000008
 800512c:	2000000c 	.word	0x2000000c

08005130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005130:	b490      	push	{r4, r7}
 8005132:	b08a      	sub	sp, #40	; 0x28
 8005134:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005136:	4b2a      	ldr	r3, [pc, #168]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005138:	1d3c      	adds	r4, r7, #4
 800513a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800513c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005140:	4b28      	ldr	r3, [pc, #160]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	2300      	movs	r3, #0
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	2300      	movs	r3, #0
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800515a:	4b23      	ldr	r3, [pc, #140]	; (80051e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f003 030c 	and.w	r3, r3, #12
 8005166:	2b04      	cmp	r3, #4
 8005168:	d002      	beq.n	8005170 <HAL_RCC_GetSysClockFreq+0x40>
 800516a:	2b08      	cmp	r3, #8
 800516c:	d003      	beq.n	8005176 <HAL_RCC_GetSysClockFreq+0x46>
 800516e:	e02d      	b.n	80051cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005170:	4b1e      	ldr	r3, [pc, #120]	; (80051ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8005172:	623b      	str	r3, [r7, #32]
      break;
 8005174:	e02d      	b.n	80051d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	0c9b      	lsrs	r3, r3, #18
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005182:	4413      	add	r3, r2
 8005184:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005188:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d013      	beq.n	80051bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005194:	4b14      	ldr	r3, [pc, #80]	; (80051e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	0c5b      	lsrs	r3, r3, #17
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80051a2:	4413      	add	r3, r2
 80051a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80051a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	4a0f      	ldr	r2, [pc, #60]	; (80051ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80051ae:	fb02 f203 	mul.w	r2, r2, r3
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ba:	e004      	b.n	80051c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	4a0c      	ldr	r2, [pc, #48]	; (80051f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051c0:	fb02 f303 	mul.w	r3, r2, r3
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	623b      	str	r3, [r7, #32]
      break;
 80051ca:	e002      	b.n	80051d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051cc:	4b07      	ldr	r3, [pc, #28]	; (80051ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80051ce:	623b      	str	r3, [r7, #32]
      break;
 80051d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051d2:	6a3b      	ldr	r3, [r7, #32]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3728      	adds	r7, #40	; 0x28
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc90      	pop	{r4, r7}
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	08006064 	.word	0x08006064
 80051e4:	08006074 	.word	0x08006074
 80051e8:	40021000 	.word	0x40021000
 80051ec:	007a1200 	.word	0x007a1200
 80051f0:	003d0900 	.word	0x003d0900

080051f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051f8:	4b02      	ldr	r3, [pc, #8]	; (8005204 <HAL_RCC_GetHCLKFreq+0x10>)
 80051fa:	681b      	ldr	r3, [r3, #0]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr
 8005204:	20000008 	.word	0x20000008

08005208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800520c:	f7ff fff2 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 8005210:	4601      	mov	r1, r0
 8005212:	4b05      	ldr	r3, [pc, #20]	; (8005228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	0a1b      	lsrs	r3, r3, #8
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	4a03      	ldr	r2, [pc, #12]	; (800522c <HAL_RCC_GetPCLK1Freq+0x24>)
 800521e:	5cd3      	ldrb	r3, [r2, r3]
 8005220:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005224:	4618      	mov	r0, r3
 8005226:	bd80      	pop	{r7, pc}
 8005228:	40021000 	.word	0x40021000
 800522c:	080060d8 	.word	0x080060d8

08005230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005234:	f7ff ffde 	bl	80051f4 <HAL_RCC_GetHCLKFreq>
 8005238:	4601      	mov	r1, r0
 800523a:	4b05      	ldr	r3, [pc, #20]	; (8005250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	0adb      	lsrs	r3, r3, #11
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	4a03      	ldr	r2, [pc, #12]	; (8005254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005246:	5cd3      	ldrb	r3, [r2, r3]
 8005248:	fa21 f303 	lsr.w	r3, r1, r3
}
 800524c:	4618      	mov	r0, r3
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40021000 	.word	0x40021000
 8005254:	080060d8 	.word	0x080060d8

08005258 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005260:	4b0a      	ldr	r3, [pc, #40]	; (800528c <RCC_Delay+0x34>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a0a      	ldr	r2, [pc, #40]	; (8005290 <RCC_Delay+0x38>)
 8005266:	fba2 2303 	umull	r2, r3, r2, r3
 800526a:	0a5b      	lsrs	r3, r3, #9
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	fb02 f303 	mul.w	r3, r2, r3
 8005272:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005274:	bf00      	nop
  }
  while (Delay --);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	1e5a      	subs	r2, r3, #1
 800527a:	60fa      	str	r2, [r7, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f9      	bne.n	8005274 <RCC_Delay+0x1c>
}
 8005280:	bf00      	nop
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	bc80      	pop	{r7}
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	20000008 	.word	0x20000008
 8005290:	10624dd3 	.word	0x10624dd3

08005294 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e01d      	b.n	80052e2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7fe f868 	bl	8003390 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3304      	adds	r3, #4
 80052d0:	4619      	mov	r1, r3
 80052d2:	4610      	mov	r0, r2
 80052d4:	f000 f902 	bl	80054dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2201      	movs	r2, #1
 80052fc:	6839      	ldr	r1, [r7, #0]
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fad6 	bl	80058b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a10      	ldr	r2, [pc, #64]	; (800534c <HAL_TIM_PWM_Start+0x60>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d107      	bne.n	800531e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800531c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b06      	cmp	r3, #6
 800532e:	d007      	beq.n	8005340 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0201 	orr.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40012c00 	.word	0x40012c00

08005350 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005362:	2b01      	cmp	r3, #1
 8005364:	d101      	bne.n	800536a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005366:	2302      	movs	r3, #2
 8005368:	e0b4      	b.n	80054d4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2202      	movs	r2, #2
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b0c      	cmp	r3, #12
 800537e:	f200 809f 	bhi.w	80054c0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005382:	a201      	add	r2, pc, #4	; (adr r2, 8005388 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005388:	080053bd 	.word	0x080053bd
 800538c:	080054c1 	.word	0x080054c1
 8005390:	080054c1 	.word	0x080054c1
 8005394:	080054c1 	.word	0x080054c1
 8005398:	080053fd 	.word	0x080053fd
 800539c:	080054c1 	.word	0x080054c1
 80053a0:	080054c1 	.word	0x080054c1
 80053a4:	080054c1 	.word	0x080054c1
 80053a8:	0800543f 	.word	0x0800543f
 80053ac:	080054c1 	.word	0x080054c1
 80053b0:	080054c1 	.word	0x080054c1
 80053b4:	080054c1 	.word	0x080054c1
 80053b8:	0800547f 	.word	0x0800547f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68b9      	ldr	r1, [r7, #8]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 f8ec 	bl	80055a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699a      	ldr	r2, [r3, #24]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0208 	orr.w	r2, r2, #8
 80053d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699a      	ldr	r2, [r3, #24]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0204 	bic.w	r2, r2, #4
 80053e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6999      	ldr	r1, [r3, #24]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	619a      	str	r2, [r3, #24]
      break;
 80053fa:	e062      	b.n	80054c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	4618      	mov	r0, r3
 8005404:	f000 f932 	bl	800566c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699a      	ldr	r2, [r3, #24]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6999      	ldr	r1, [r3, #24]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	021a      	lsls	r2, r3, #8
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	619a      	str	r2, [r3, #24]
      break;
 800543c:	e041      	b.n	80054c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	4618      	mov	r0, r3
 8005446:	f000 f97b 	bl	8005740 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69da      	ldr	r2, [r3, #28]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0208 	orr.w	r2, r2, #8
 8005458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69da      	ldr	r2, [r3, #28]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0204 	bic.w	r2, r2, #4
 8005468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69d9      	ldr	r1, [r3, #28]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	691a      	ldr	r2, [r3, #16]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	61da      	str	r2, [r3, #28]
      break;
 800547c:	e021      	b.n	80054c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68b9      	ldr	r1, [r7, #8]
 8005484:	4618      	mov	r0, r3
 8005486:	f000 f9c5 	bl	8005814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69da      	ldr	r2, [r3, #28]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69d9      	ldr	r1, [r3, #28]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	021a      	lsls	r2, r3, #8
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	61da      	str	r2, [r3, #28]
      break;
 80054be:	e000      	b.n	80054c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80054c0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a29      	ldr	r2, [pc, #164]	; (8005594 <TIM_Base_SetConfig+0xb8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00b      	beq.n	800550c <TIM_Base_SetConfig+0x30>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fa:	d007      	beq.n	800550c <TIM_Base_SetConfig+0x30>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a26      	ldr	r2, [pc, #152]	; (8005598 <TIM_Base_SetConfig+0xbc>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d003      	beq.n	800550c <TIM_Base_SetConfig+0x30>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a25      	ldr	r2, [pc, #148]	; (800559c <TIM_Base_SetConfig+0xc0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d108      	bne.n	800551e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a1c      	ldr	r2, [pc, #112]	; (8005594 <TIM_Base_SetConfig+0xb8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00b      	beq.n	800553e <TIM_Base_SetConfig+0x62>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552c:	d007      	beq.n	800553e <TIM_Base_SetConfig+0x62>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a19      	ldr	r2, [pc, #100]	; (8005598 <TIM_Base_SetConfig+0xbc>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d003      	beq.n	800553e <TIM_Base_SetConfig+0x62>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a18      	ldr	r2, [pc, #96]	; (800559c <TIM_Base_SetConfig+0xc0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d108      	bne.n	8005550 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a07      	ldr	r2, [pc, #28]	; (8005594 <TIM_Base_SetConfig+0xb8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d103      	bne.n	8005584 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	691a      	ldr	r2, [r3, #16]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	615a      	str	r2, [r3, #20]
}
 800558a:	bf00      	nop
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr
 8005594:	40012c00 	.word	0x40012c00
 8005598:	40000400 	.word	0x40000400
 800559c:	40000800 	.word	0x40000800

080055a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	f023 0201 	bic.w	r2, r3, #1
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0303 	bic.w	r3, r3, #3
 80055d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f023 0302 	bic.w	r3, r3, #2
 80055e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a1c      	ldr	r2, [pc, #112]	; (8005668 <TIM_OC1_SetConfig+0xc8>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d10c      	bne.n	8005616 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f023 0308 	bic.w	r3, r3, #8
 8005602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f023 0304 	bic.w	r3, r3, #4
 8005614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a13      	ldr	r2, [pc, #76]	; (8005668 <TIM_OC1_SetConfig+0xc8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d111      	bne.n	8005642 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800562c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	4313      	orrs	r3, r2
 8005636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	621a      	str	r2, [r3, #32]
}
 800565c:	bf00      	nop
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	bc80      	pop	{r7}
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	40012c00 	.word	0x40012c00

0800566c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	f023 0210 	bic.w	r2, r3, #16
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	021b      	lsls	r3, r3, #8
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f023 0320 	bic.w	r3, r3, #32
 80056b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a1d      	ldr	r2, [pc, #116]	; (800573c <TIM_OC2_SetConfig+0xd0>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d10d      	bne.n	80056e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a14      	ldr	r2, [pc, #80]	; (800573c <TIM_OC2_SetConfig+0xd0>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d113      	bne.n	8005718 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	621a      	str	r2, [r3, #32]
}
 8005732:	bf00      	nop
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	bc80      	pop	{r7}
 800573a:	4770      	bx	lr
 800573c:	40012c00 	.word	0x40012c00

08005740 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0303 	bic.w	r3, r3, #3
 8005776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	021b      	lsls	r3, r3, #8
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	4313      	orrs	r3, r2
 8005794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a1d      	ldr	r2, [pc, #116]	; (8005810 <TIM_OC3_SetConfig+0xd0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d10d      	bne.n	80057ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	021b      	lsls	r3, r3, #8
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a14      	ldr	r2, [pc, #80]	; (8005810 <TIM_OC3_SetConfig+0xd0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d113      	bne.n	80057ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	621a      	str	r2, [r3, #32]
}
 8005804:	bf00      	nop
 8005806:	371c      	adds	r7, #28
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40012c00 	.word	0x40012c00

08005814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800584a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	021b      	lsls	r3, r3, #8
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800585e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	031b      	lsls	r3, r3, #12
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a0f      	ldr	r2, [pc, #60]	; (80058ac <TIM_OC4_SetConfig+0x98>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d109      	bne.n	8005888 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800587a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	019b      	lsls	r3, r3, #6
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	621a      	str	r2, [r3, #32]
}
 80058a2:	bf00      	nop
 80058a4:	371c      	adds	r7, #28
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr
 80058ac:	40012c00 	.word	0x40012c00

080058b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f003 031f 	and.w	r3, r3, #31
 80058c2:	2201      	movs	r2, #1
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a1a      	ldr	r2, [r3, #32]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	43db      	mvns	r3, r3
 80058d2:	401a      	ands	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a1a      	ldr	r2, [r3, #32]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	fa01 f303 	lsl.w	r3, r1, r3
 80058e8:	431a      	orrs	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	621a      	str	r2, [r3, #32]
}
 80058ee:	bf00      	nop
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr

080058f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800590c:	2302      	movs	r3, #2
 800590e:	e032      	b.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005948:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	4313      	orrs	r3, r2
 8005952:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr

08005980 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e03f      	b.n	8005a12 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fd fd44 	bl	8003434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2224      	movs	r2, #36	; 0x24
 80059b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f90b 	bl	8005be0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695a      	ldr	r2, [r3, #20]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b088      	sub	sp, #32
 8005a1e:	af02      	add	r7, sp, #8
 8005a20:	60f8      	str	r0, [r7, #12]
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	603b      	str	r3, [r7, #0]
 8005a26:	4613      	mov	r3, r2
 8005a28:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	f040 8083 	bne.w	8005b42 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <HAL_UART_Transmit+0x2e>
 8005a42:	88fb      	ldrh	r3, [r7, #6]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e07b      	b.n	8005b44 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_UART_Transmit+0x40>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e074      	b.n	8005b44 <HAL_UART_Transmit+0x12a>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2221      	movs	r2, #33	; 0x21
 8005a6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005a70:	f7fd fe06 	bl	8003680 <HAL_GetTick>
 8005a74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	88fa      	ldrh	r2, [r7, #6]
 8005a7a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	88fa      	ldrh	r2, [r7, #6]
 8005a80:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a82:	e042      	b.n	8005b0a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a9a:	d122      	bne.n	8005ae2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2180      	movs	r1, #128	; 0x80
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f850 	bl	8005b4c <UART_WaitOnFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e046      	b.n	8005b44 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ac8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d103      	bne.n	8005ada <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	3302      	adds	r3, #2
 8005ad6:	60bb      	str	r3, [r7, #8]
 8005ad8:	e017      	b.n	8005b0a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	3301      	adds	r3, #1
 8005ade:	60bb      	str	r3, [r7, #8]
 8005ae0:	e013      	b.n	8005b0a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2180      	movs	r1, #128	; 0x80
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f82d 	bl	8005b4c <UART_WaitOnFlagUntilTimeout>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e023      	b.n	8005b44 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	60ba      	str	r2, [r7, #8]
 8005b02:	781a      	ldrb	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1b7      	bne.n	8005a84 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	2140      	movs	r1, #64	; 0x40
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 f814 	bl	8005b4c <UART_WaitOnFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e00a      	b.n	8005b44 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e000      	b.n	8005b44 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005b42:	2302      	movs	r3, #2
  }
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b5c:	e02c      	b.n	8005bb8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b64:	d028      	beq.n	8005bb8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d007      	beq.n	8005b7c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b6c:	f7fd fd88 	bl	8003680 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d21d      	bcs.n	8005bb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b8a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	695a      	ldr	r2, [r3, #20]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0201 	bic.w	r2, r2, #1
 8005b9a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e00f      	b.n	8005bd8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	bf0c      	ite	eq
 8005bc8:	2301      	moveq	r3, #1
 8005bca:	2300      	movne	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	461a      	mov	r2, r3
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d0c3      	beq.n	8005b5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689a      	ldr	r2, [r3, #8]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	431a      	orrs	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005c1a:	f023 030c 	bic.w	r3, r3, #12
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6812      	ldr	r2, [r2, #0]
 8005c22:	68f9      	ldr	r1, [r7, #12]
 8005c24:	430b      	orrs	r3, r1
 8005c26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699a      	ldr	r2, [r3, #24]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a52      	ldr	r2, [pc, #328]	; (8005d8c <UART_SetConfig+0x1ac>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d14e      	bne.n	8005ce6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c48:	f7ff faf2 	bl	8005230 <HAL_RCC_GetPCLK2Freq>
 8005c4c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	009a      	lsls	r2, r3, #2
 8005c58:	441a      	add	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c64:	4a4a      	ldr	r2, [pc, #296]	; (8005d90 <UART_SetConfig+0x1b0>)
 8005c66:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6a:	095b      	lsrs	r3, r3, #5
 8005c6c:	0119      	lsls	r1, r3, #4
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	4613      	mov	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	009a      	lsls	r2, r3, #2
 8005c78:	441a      	add	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c84:	4b42      	ldr	r3, [pc, #264]	; (8005d90 <UART_SetConfig+0x1b0>)
 8005c86:	fba3 0302 	umull	r0, r3, r3, r2
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	2064      	movs	r0, #100	; 0x64
 8005c8e:	fb00 f303 	mul.w	r3, r0, r3
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	3332      	adds	r3, #50	; 0x32
 8005c98:	4a3d      	ldr	r2, [pc, #244]	; (8005d90 <UART_SetConfig+0x1b0>)
 8005c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ca4:	4419      	add	r1, r3
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	009a      	lsls	r2, r3, #2
 8005cb0:	441a      	add	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cbc:	4b34      	ldr	r3, [pc, #208]	; (8005d90 <UART_SetConfig+0x1b0>)
 8005cbe:	fba3 0302 	umull	r0, r3, r3, r2
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	2064      	movs	r0, #100	; 0x64
 8005cc6:	fb00 f303 	mul.w	r3, r0, r3
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	3332      	adds	r3, #50	; 0x32
 8005cd0:	4a2f      	ldr	r2, [pc, #188]	; (8005d90 <UART_SetConfig+0x1b0>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	f003 020f 	and.w	r2, r3, #15
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	440a      	add	r2, r1
 8005ce2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005ce4:	e04d      	b.n	8005d82 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ce6:	f7ff fa8f 	bl	8005208 <HAL_RCC_GetPCLK1Freq>
 8005cea:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009a      	lsls	r2, r3, #2
 8005cf6:	441a      	add	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d02:	4a23      	ldr	r2, [pc, #140]	; (8005d90 <UART_SetConfig+0x1b0>)
 8005d04:	fba2 2303 	umull	r2, r3, r2, r3
 8005d08:	095b      	lsrs	r3, r3, #5
 8005d0a:	0119      	lsls	r1, r3, #4
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	009a      	lsls	r2, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d22:	4b1b      	ldr	r3, [pc, #108]	; (8005d90 <UART_SetConfig+0x1b0>)
 8005d24:	fba3 0302 	umull	r0, r3, r3, r2
 8005d28:	095b      	lsrs	r3, r3, #5
 8005d2a:	2064      	movs	r0, #100	; 0x64
 8005d2c:	fb00 f303 	mul.w	r3, r0, r3
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	3332      	adds	r3, #50	; 0x32
 8005d36:	4a16      	ldr	r2, [pc, #88]	; (8005d90 <UART_SetConfig+0x1b0>)
 8005d38:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d42:	4419      	add	r1, r3
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	4613      	mov	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	009a      	lsls	r2, r3, #2
 8005d4e:	441a      	add	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d5a:	4b0d      	ldr	r3, [pc, #52]	; (8005d90 <UART_SetConfig+0x1b0>)
 8005d5c:	fba3 0302 	umull	r0, r3, r3, r2
 8005d60:	095b      	lsrs	r3, r3, #5
 8005d62:	2064      	movs	r0, #100	; 0x64
 8005d64:	fb00 f303 	mul.w	r3, r0, r3
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	3332      	adds	r3, #50	; 0x32
 8005d6e:	4a08      	ldr	r2, [pc, #32]	; (8005d90 <UART_SetConfig+0x1b0>)
 8005d70:	fba2 2303 	umull	r2, r3, r2, r3
 8005d74:	095b      	lsrs	r3, r3, #5
 8005d76:	f003 020f 	and.w	r2, r3, #15
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	440a      	add	r2, r1
 8005d80:	609a      	str	r2, [r3, #8]
}
 8005d82:	bf00      	nop
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40013800 	.word	0x40013800
 8005d90:	51eb851f 	.word	0x51eb851f

08005d94 <__errno>:
 8005d94:	4b01      	ldr	r3, [pc, #4]	; (8005d9c <__errno+0x8>)
 8005d96:	6818      	ldr	r0, [r3, #0]
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	20000014 	.word	0x20000014

08005da0 <__libc_init_array>:
 8005da0:	b570      	push	{r4, r5, r6, lr}
 8005da2:	2500      	movs	r5, #0
 8005da4:	4e0c      	ldr	r6, [pc, #48]	; (8005dd8 <__libc_init_array+0x38>)
 8005da6:	4c0d      	ldr	r4, [pc, #52]	; (8005ddc <__libc_init_array+0x3c>)
 8005da8:	1ba4      	subs	r4, r4, r6
 8005daa:	10a4      	asrs	r4, r4, #2
 8005dac:	42a5      	cmp	r5, r4
 8005dae:	d109      	bne.n	8005dc4 <__libc_init_array+0x24>
 8005db0:	f000 f924 	bl	8005ffc <_init>
 8005db4:	2500      	movs	r5, #0
 8005db6:	4e0a      	ldr	r6, [pc, #40]	; (8005de0 <__libc_init_array+0x40>)
 8005db8:	4c0a      	ldr	r4, [pc, #40]	; (8005de4 <__libc_init_array+0x44>)
 8005dba:	1ba4      	subs	r4, r4, r6
 8005dbc:	10a4      	asrs	r4, r4, #2
 8005dbe:	42a5      	cmp	r5, r4
 8005dc0:	d105      	bne.n	8005dce <__libc_init_array+0x2e>
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}
 8005dc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dc8:	4798      	blx	r3
 8005dca:	3501      	adds	r5, #1
 8005dcc:	e7ee      	b.n	8005dac <__libc_init_array+0xc>
 8005dce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dd2:	4798      	blx	r3
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	e7f2      	b.n	8005dbe <__libc_init_array+0x1e>
 8005dd8:	080060e8 	.word	0x080060e8
 8005ddc:	080060e8 	.word	0x080060e8
 8005de0:	080060e8 	.word	0x080060e8
 8005de4:	080060ec 	.word	0x080060ec

08005de8 <memset>:
 8005de8:	4603      	mov	r3, r0
 8005dea:	4402      	add	r2, r0
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d100      	bne.n	8005df2 <memset+0xa>
 8005df0:	4770      	bx	lr
 8005df2:	f803 1b01 	strb.w	r1, [r3], #1
 8005df6:	e7f9      	b.n	8005dec <memset+0x4>

08005df8 <sqrt>:
 8005df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfc:	b08b      	sub	sp, #44	; 0x2c
 8005dfe:	4604      	mov	r4, r0
 8005e00:	460d      	mov	r5, r1
 8005e02:	f000 f84d 	bl	8005ea0 <__ieee754_sqrt>
 8005e06:	4b24      	ldr	r3, [pc, #144]	; (8005e98 <sqrt+0xa0>)
 8005e08:	4680      	mov	r8, r0
 8005e0a:	f993 a000 	ldrsb.w	sl, [r3]
 8005e0e:	4689      	mov	r9, r1
 8005e10:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005e14:	d02b      	beq.n	8005e6e <sqrt+0x76>
 8005e16:	4622      	mov	r2, r4
 8005e18:	462b      	mov	r3, r5
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	f7fa fdf5 	bl	8000a0c <__aeabi_dcmpun>
 8005e22:	4683      	mov	fp, r0
 8005e24:	bb18      	cbnz	r0, 8005e6e <sqrt+0x76>
 8005e26:	2600      	movs	r6, #0
 8005e28:	2700      	movs	r7, #0
 8005e2a:	4632      	mov	r2, r6
 8005e2c:	463b      	mov	r3, r7
 8005e2e:	4620      	mov	r0, r4
 8005e30:	4629      	mov	r1, r5
 8005e32:	f7fa fdc3 	bl	80009bc <__aeabi_dcmplt>
 8005e36:	b1d0      	cbz	r0, 8005e6e <sqrt+0x76>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	4b17      	ldr	r3, [pc, #92]	; (8005e9c <sqrt+0xa4>)
 8005e3e:	f8cd b020 	str.w	fp, [sp, #32]
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005e48:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005e4c:	f1ba 0f00 	cmp.w	sl, #0
 8005e50:	d112      	bne.n	8005e78 <sqrt+0x80>
 8005e52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005e56:	4668      	mov	r0, sp
 8005e58:	f000 f8ce 	bl	8005ff8 <matherr>
 8005e5c:	b1b8      	cbz	r0, 8005e8e <sqrt+0x96>
 8005e5e:	9b08      	ldr	r3, [sp, #32]
 8005e60:	b11b      	cbz	r3, 8005e6a <sqrt+0x72>
 8005e62:	f7ff ff97 	bl	8005d94 <__errno>
 8005e66:	9b08      	ldr	r3, [sp, #32]
 8005e68:	6003      	str	r3, [r0, #0]
 8005e6a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8005e6e:	4640      	mov	r0, r8
 8005e70:	4649      	mov	r1, r9
 8005e72:	b00b      	add	sp, #44	; 0x2c
 8005e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e78:	4632      	mov	r2, r6
 8005e7a:	463b      	mov	r3, r7
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	4639      	mov	r1, r7
 8005e80:	f7fa fc54 	bl	800072c <__aeabi_ddiv>
 8005e84:	f1ba 0f02 	cmp.w	sl, #2
 8005e88:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005e8c:	d1e3      	bne.n	8005e56 <sqrt+0x5e>
 8005e8e:	f7ff ff81 	bl	8005d94 <__errno>
 8005e92:	2321      	movs	r3, #33	; 0x21
 8005e94:	6003      	str	r3, [r0, #0]
 8005e96:	e7e2      	b.n	8005e5e <sqrt+0x66>
 8005e98:	20000078 	.word	0x20000078
 8005e9c:	080060e0 	.word	0x080060e0

08005ea0 <__ieee754_sqrt>:
 8005ea0:	4b54      	ldr	r3, [pc, #336]	; (8005ff4 <__ieee754_sqrt+0x154>)
 8005ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea6:	438b      	bics	r3, r1
 8005ea8:	4606      	mov	r6, r0
 8005eaa:	460d      	mov	r5, r1
 8005eac:	460a      	mov	r2, r1
 8005eae:	460c      	mov	r4, r1
 8005eb0:	d10f      	bne.n	8005ed2 <__ieee754_sqrt+0x32>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	f7fa fb0f 	bl	80004d8 <__aeabi_dmul>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	f7fa f953 	bl	800016c <__adddf3>
 8005ec6:	4606      	mov	r6, r0
 8005ec8:	460d      	mov	r5, r1
 8005eca:	4630      	mov	r0, r6
 8005ecc:	4629      	mov	r1, r5
 8005ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ed2:	2900      	cmp	r1, #0
 8005ed4:	4607      	mov	r7, r0
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	dc0e      	bgt.n	8005ef8 <__ieee754_sqrt+0x58>
 8005eda:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005ede:	ea5c 0707 	orrs.w	r7, ip, r7
 8005ee2:	d0f2      	beq.n	8005eca <__ieee754_sqrt+0x2a>
 8005ee4:	b141      	cbz	r1, 8005ef8 <__ieee754_sqrt+0x58>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	f7fa f93d 	bl	8000168 <__aeabi_dsub>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	f7fa fc1b 	bl	800072c <__aeabi_ddiv>
 8005ef6:	e7e6      	b.n	8005ec6 <__ieee754_sqrt+0x26>
 8005ef8:	1512      	asrs	r2, r2, #20
 8005efa:	d074      	beq.n	8005fe6 <__ieee754_sqrt+0x146>
 8005efc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005f00:	07d5      	lsls	r5, r2, #31
 8005f02:	f04f 0500 	mov.w	r5, #0
 8005f06:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005f0a:	bf48      	it	mi
 8005f0c:	0fd9      	lsrmi	r1, r3, #31
 8005f0e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8005f12:	bf44      	itt	mi
 8005f14:	005b      	lslmi	r3, r3, #1
 8005f16:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8005f1a:	1051      	asrs	r1, r2, #1
 8005f1c:	0fda      	lsrs	r2, r3, #31
 8005f1e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8005f22:	4628      	mov	r0, r5
 8005f24:	2216      	movs	r2, #22
 8005f26:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005f2a:	005b      	lsls	r3, r3, #1
 8005f2c:	1987      	adds	r7, r0, r6
 8005f2e:	42a7      	cmp	r7, r4
 8005f30:	bfde      	ittt	le
 8005f32:	19b8      	addle	r0, r7, r6
 8005f34:	1be4      	suble	r4, r4, r7
 8005f36:	19ad      	addle	r5, r5, r6
 8005f38:	0fdf      	lsrs	r7, r3, #31
 8005f3a:	3a01      	subs	r2, #1
 8005f3c:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8005f40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005f44:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005f48:	d1f0      	bne.n	8005f2c <__ieee754_sqrt+0x8c>
 8005f4a:	f04f 0c20 	mov.w	ip, #32
 8005f4e:	4696      	mov	lr, r2
 8005f50:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005f54:	4284      	cmp	r4, r0
 8005f56:	eb06 070e 	add.w	r7, r6, lr
 8005f5a:	dc02      	bgt.n	8005f62 <__ieee754_sqrt+0xc2>
 8005f5c:	d112      	bne.n	8005f84 <__ieee754_sqrt+0xe4>
 8005f5e:	429f      	cmp	r7, r3
 8005f60:	d810      	bhi.n	8005f84 <__ieee754_sqrt+0xe4>
 8005f62:	2f00      	cmp	r7, #0
 8005f64:	eb07 0e06 	add.w	lr, r7, r6
 8005f68:	da42      	bge.n	8005ff0 <__ieee754_sqrt+0x150>
 8005f6a:	f1be 0f00 	cmp.w	lr, #0
 8005f6e:	db3f      	blt.n	8005ff0 <__ieee754_sqrt+0x150>
 8005f70:	f100 0801 	add.w	r8, r0, #1
 8005f74:	1a24      	subs	r4, r4, r0
 8005f76:	4640      	mov	r0, r8
 8005f78:	429f      	cmp	r7, r3
 8005f7a:	bf88      	it	hi
 8005f7c:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8005f80:	1bdb      	subs	r3, r3, r7
 8005f82:	4432      	add	r2, r6
 8005f84:	0064      	lsls	r4, r4, #1
 8005f86:	f1bc 0c01 	subs.w	ip, ip, #1
 8005f8a:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8005f8e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005f92:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005f96:	d1dd      	bne.n	8005f54 <__ieee754_sqrt+0xb4>
 8005f98:	4323      	orrs	r3, r4
 8005f9a:	d006      	beq.n	8005faa <__ieee754_sqrt+0x10a>
 8005f9c:	1c54      	adds	r4, r2, #1
 8005f9e:	bf0b      	itete	eq
 8005fa0:	4662      	moveq	r2, ip
 8005fa2:	3201      	addne	r2, #1
 8005fa4:	3501      	addeq	r5, #1
 8005fa6:	f022 0201 	bicne.w	r2, r2, #1
 8005faa:	106b      	asrs	r3, r5, #1
 8005fac:	0852      	lsrs	r2, r2, #1
 8005fae:	07e8      	lsls	r0, r5, #31
 8005fb0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005fb4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005fb8:	bf48      	it	mi
 8005fba:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005fbe:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8005fc2:	4616      	mov	r6, r2
 8005fc4:	e781      	b.n	8005eca <__ieee754_sqrt+0x2a>
 8005fc6:	0adc      	lsrs	r4, r3, #11
 8005fc8:	3915      	subs	r1, #21
 8005fca:	055b      	lsls	r3, r3, #21
 8005fcc:	2c00      	cmp	r4, #0
 8005fce:	d0fa      	beq.n	8005fc6 <__ieee754_sqrt+0x126>
 8005fd0:	02e6      	lsls	r6, r4, #11
 8005fd2:	d50a      	bpl.n	8005fea <__ieee754_sqrt+0x14a>
 8005fd4:	f1c2 0020 	rsb	r0, r2, #32
 8005fd8:	fa23 f000 	lsr.w	r0, r3, r0
 8005fdc:	1e55      	subs	r5, r2, #1
 8005fde:	4093      	lsls	r3, r2
 8005fe0:	4304      	orrs	r4, r0
 8005fe2:	1b4a      	subs	r2, r1, r5
 8005fe4:	e78a      	b.n	8005efc <__ieee754_sqrt+0x5c>
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	e7f0      	b.n	8005fcc <__ieee754_sqrt+0x12c>
 8005fea:	0064      	lsls	r4, r4, #1
 8005fec:	3201      	adds	r2, #1
 8005fee:	e7ef      	b.n	8005fd0 <__ieee754_sqrt+0x130>
 8005ff0:	4680      	mov	r8, r0
 8005ff2:	e7bf      	b.n	8005f74 <__ieee754_sqrt+0xd4>
 8005ff4:	7ff00000 	.word	0x7ff00000

08005ff8 <matherr>:
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	4770      	bx	lr

08005ffc <_init>:
 8005ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffe:	bf00      	nop
 8006000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006002:	bc08      	pop	{r3}
 8006004:	469e      	mov	lr, r3
 8006006:	4770      	bx	lr

08006008 <_fini>:
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	bf00      	nop
 800600c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600e:	bc08      	pop	{r3}
 8006010:	469e      	mov	lr, r3
 8006012:	4770      	bx	lr
