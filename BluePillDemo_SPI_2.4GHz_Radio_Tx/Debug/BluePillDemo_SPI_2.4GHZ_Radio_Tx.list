
BluePillDemo_SPI_2.4GHZ_Radio_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001e8c  08001e8c  00011e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001eb0  08001eb0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001eb0  08001eb0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001eb0  08001eb0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001eb0  08001eb0  00011eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001eb4  08001eb4  00011eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08001ec4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08001ec4  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000622e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012e4  00000000  00000000  00026263  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007f8  00000000  00000000  00027548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000750  00000000  00000000  00027d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012df3  00000000  00000000  00028490  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000056fa  00000000  00000000  0003b283  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00067651  00000000  00000000  0004097d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a7fce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f14  00000000  00000000  000a804c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e74 	.word	0x08001e74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001e74 	.word	0x08001e74

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t data = 0x55;
 8000152:	2355      	movs	r3, #85	; 0x55
 8000154:	71bb      	strb	r3, [r7, #6]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fcf9 	bl	8000b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f82d 	bl	80001b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f8a7 	bl	80002b0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000162:	f000 f86f 	bl	8000244 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  nrf24l01_initialize_debug(false, 1, false); // set as transmitter
 8000166:	2200      	movs	r2, #0
 8000168:	2101      	movs	r1, #1
 800016a:	2000      	movs	r0, #0
 800016c:	f000 faf2 	bl	8000754 <nrf24l01_initialize_debug>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	nrf24l01_write_tx_payload(&data, 1U, true); // transmit a byte over rf
 8000170:	1dbb      	adds	r3, r7, #6
 8000172:	2201      	movs	r2, #1
 8000174:	2101      	movs	r1, #1
 8000176:	4618      	mov	r0, r3
 8000178:	f000 fb32 	bl	80007e0 <nrf24l01_write_tx_payload>

	for (uint8_t tries = 0U; tries < 50U; tries++)
 800017c:	2300      	movs	r3, #0
 800017e:	71fb      	strb	r3, [r7, #7]
 8000180:	e00c      	b.n	800019c <main+0x50>
	{
	  // check to see if the data has been sent
	  if (nrf24l01_irq_pin_active() && nrf24l01_irq_tx_ds_active())
 8000182:	f000 fb63 	bl	800084c <nrf24l01_irq_pin_active>
 8000186:	4603      	mov	r3, r0
 8000188:	2b00      	cmp	r3, #0
 800018a:	d004      	beq.n	8000196 <main+0x4a>
 800018c:	f000 fb74 	bl	8000878 <nrf24l01_irq_tx_ds_active>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d106      	bne.n	80001a4 <main+0x58>
	for (uint8_t tries = 0U; tries < 50U; tries++)
 8000196:	79fb      	ldrb	r3, [r7, #7]
 8000198:	3301      	adds	r3, #1
 800019a:	71fb      	strb	r3, [r7, #7]
 800019c:	79fb      	ldrb	r3, [r7, #7]
 800019e:	2b31      	cmp	r3, #49	; 0x31
 80001a0:	d9ef      	bls.n	8000182 <main+0x36>
 80001a2:	e000      	b.n	80001a6 <main+0x5a>
	  {
	    // data sent, no more tries
		break;
 80001a4:	bf00      	nop
	  }
	}

	nrf24l01_flush_tx();					// make sure everything is sent by rf module
 80001a6:	f000 fb34 	bl	8000812 <nrf24l01_flush_tx>
	nrf24l01_irq_clear_all(); 				// clear rf module interrupts
 80001aa:	f000 fa6b 	bl	8000684 <nrf24l01_irq_clear_all>

	HAL_Delay(1000);
 80001ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b2:	f000 fd2d 	bl	8000c10 <HAL_Delay>
	nrf24l01_write_tx_payload(&data, 1U, true); // transmit a byte over rf
 80001b6:	e7db      	b.n	8000170 <main+0x24>

080001b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b090      	sub	sp, #64	; 0x40
 80001bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001be:	f107 0318 	add.w	r3, r7, #24
 80001c2:	2228      	movs	r2, #40	; 0x28
 80001c4:	2100      	movs	r1, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f001 fe4c 	bl	8001e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001cc:	1d3b      	adds	r3, r7, #4
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
 80001d2:	605a      	str	r2, [r3, #4]
 80001d4:	609a      	str	r2, [r3, #8]
 80001d6:	60da      	str	r2, [r3, #12]
 80001d8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001da:	2301      	movs	r3, #1
 80001dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e8:	2301      	movs	r3, #1
 80001ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ec:	2302      	movs	r3, #2
 80001ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fc:	f107 0318 	add.w	r3, r7, #24
 8000200:	4618      	mov	r0, r3
 8000202:	f000 ff95 	bl	8001130 <HAL_RCC_OscConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800020c:	f000 f8a8 	bl	8000360 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000210:	230f      	movs	r3, #15
 8000212:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000214:	2302      	movs	r3, #2
 8000216:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800021c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000220:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	2102      	movs	r1, #2
 800022a:	4618      	mov	r0, r3
 800022c:	f001 fa00 	bl	8001630 <HAL_RCC_ClockConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000236:	f000 f893 	bl	8000360 <Error_Handler>
  }
}
 800023a:	bf00      	nop
 800023c:	3740      	adds	r7, #64	; 0x40
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
	...

08000244 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000248:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <MX_SPI2_Init+0x64>)
 800024a:	4a18      	ldr	r2, [pc, #96]	; (80002ac <MX_SPI2_Init+0x68>)
 800024c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800024e:	4b16      	ldr	r3, [pc, #88]	; (80002a8 <MX_SPI2_Init+0x64>)
 8000250:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000254:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <MX_SPI2_Init+0x64>)
 8000258:	2200      	movs	r2, #0
 800025a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <MX_SPI2_Init+0x64>)
 800025e:	2200      	movs	r2, #0
 8000260:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000262:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <MX_SPI2_Init+0x64>)
 8000264:	2200      	movs	r2, #0
 8000266:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <MX_SPI2_Init+0x64>)
 800026a:	2200      	movs	r2, #0
 800026c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <MX_SPI2_Init+0x64>)
 8000270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000274:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <MX_SPI2_Init+0x64>)
 8000278:	2238      	movs	r2, #56	; 0x38
 800027a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800027c:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <MX_SPI2_Init+0x64>)
 800027e:	2200      	movs	r2, #0
 8000280:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <MX_SPI2_Init+0x64>)
 8000284:	2200      	movs	r2, #0
 8000286:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <MX_SPI2_Init+0x64>)
 800028a:	2200      	movs	r2, #0
 800028c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800028e:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <MX_SPI2_Init+0x64>)
 8000290:	220a      	movs	r2, #10
 8000292:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000294:	4804      	ldr	r0, [pc, #16]	; (80002a8 <MX_SPI2_Init+0x64>)
 8000296:	f001 fb35 	bl	8001904 <HAL_SPI_Init>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80002a0:	f000 f85e 	bl	8000360 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	2000002c 	.word	0x2000002c
 80002ac:	40003800 	.word	0x40003800

080002b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c4:	4b24      	ldr	r3, [pc, #144]	; (8000358 <MX_GPIO_Init+0xa8>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a23      	ldr	r2, [pc, #140]	; (8000358 <MX_GPIO_Init+0xa8>)
 80002ca:	f043 0310 	orr.w	r3, r3, #16
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b21      	ldr	r3, [pc, #132]	; (8000358 <MX_GPIO_Init+0xa8>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f003 0310 	and.w	r3, r3, #16
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002dc:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <MX_GPIO_Init+0xa8>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a1d      	ldr	r2, [pc, #116]	; (8000358 <MX_GPIO_Init+0xa8>)
 80002e2:	f043 0320 	orr.w	r3, r3, #32
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <MX_GPIO_Init+0xa8>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0320 	and.w	r3, r3, #32
 80002f0:	60bb      	str	r3, [r7, #8]
 80002f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <MX_GPIO_Init+0xa8>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a17      	ldr	r2, [pc, #92]	; (8000358 <MX_GPIO_Init+0xa8>)
 80002fa:	f043 0308 	orr.w	r3, r3, #8
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b15      	ldr	r3, [pc, #84]	; (8000358 <MX_GPIO_Init+0xa8>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0308 	and.w	r3, r3, #8
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_GPIO_Init+0xa8>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a11      	ldr	r2, [pc, #68]	; (8000358 <MX_GPIO_Init+0xa8>)
 8000312:	f043 0304 	orr.w	r3, r3, #4
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_GPIO_Init+0xa8>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0304 	and.w	r3, r3, #4
 8000320:	603b      	str	r3, [r7, #0]
 8000322:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_9, GPIO_PIN_RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800032a:	480c      	ldr	r0, [pc, #48]	; (800035c <MX_GPIO_Init+0xac>)
 800032c:	f000 fee7 	bl	80010fe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9;
 8000330:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000336:	2301      	movs	r3, #1
 8000338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033a:	2300      	movs	r3, #0
 800033c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800033e:	2303      	movs	r3, #3
 8000340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	4619      	mov	r1, r3
 8000348:	4804      	ldr	r0, [pc, #16]	; (800035c <MX_GPIO_Init+0xac>)
 800034a:	f000 fd67 	bl	8000e1c <HAL_GPIO_Init>

}
 800034e:	bf00      	nop
 8000350:	3720      	adds	r7, #32
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000
 800035c:	40010c00 	.word	0x40010c00

08000360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <nrf24l01_initialize>:
						 unsigned char rx_pw_p1,
						 unsigned char rx_pw_p2,
						 unsigned char rx_pw_p3,
						 unsigned char rx_pw_p4,
						 unsigned char rx_pw_p5)
{
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b085      	sub	sp, #20
 8000370:	af00      	add	r7, sp, #0
 8000372:	4604      	mov	r4, r0
 8000374:	4608      	mov	r0, r1
 8000376:	4611      	mov	r1, r2
 8000378:	461a      	mov	r2, r3
 800037a:	4623      	mov	r3, r4
 800037c:	71fb      	strb	r3, [r7, #7]
 800037e:	4603      	mov	r3, r0
 8000380:	71bb      	strb	r3, [r7, #6]
 8000382:	460b      	mov	r3, r1
 8000384:	717b      	strb	r3, [r7, #5]
 8000386:	4613      	mov	r3, r2
 8000388:	713b      	strb	r3, [r7, #4]
	unsigned char data[5];

	data[0] = en_aa;
 800038a:	797b      	ldrb	r3, [r7, #5]
 800038c:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_EN_AA, data, 1);
 800038e:	f107 0308 	add.w	r3, r7, #8
 8000392:	2201      	movs	r2, #1
 8000394:	4619      	mov	r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	f000 f935 	bl	8000606 <nrf24l01_write_register>

	data[0] = en_rxaddr;
 800039c:	793b      	ldrb	r3, [r7, #4]
 800039e:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_EN_RXADDR, data, 1);
 80003a0:	f107 0308 	add.w	r3, r7, #8
 80003a4:	2201      	movs	r2, #1
 80003a6:	4619      	mov	r1, r3
 80003a8:	2002      	movs	r0, #2
 80003aa:	f000 f92c 	bl	8000606 <nrf24l01_write_register>

	data[0] = setup_aw;
 80003ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80003b2:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_SETUP_AW, data, 1);
 80003b4:	f107 0308 	add.w	r3, r7, #8
 80003b8:	2201      	movs	r2, #1
 80003ba:	4619      	mov	r1, r3
 80003bc:	2003      	movs	r0, #3
 80003be:	f000 f922 	bl	8000606 <nrf24l01_write_register>

	data[0] = setup_retr;
 80003c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80003c6:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_SETUP_RETR, data, 1);
 80003c8:	f107 0308 	add.w	r3, r7, #8
 80003cc:	2201      	movs	r2, #1
 80003ce:	4619      	mov	r1, r3
 80003d0:	2004      	movs	r0, #4
 80003d2:	f000 f918 	bl	8000606 <nrf24l01_write_register>

	data[0] = rf_ch;
 80003d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80003da:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_RF_CH, data, 1);
 80003dc:	f107 0308 	add.w	r3, r7, #8
 80003e0:	2201      	movs	r2, #1
 80003e2:	4619      	mov	r1, r3
 80003e4:	2005      	movs	r0, #5
 80003e6:	f000 f90e 	bl	8000606 <nrf24l01_write_register>

	data[0] = rf_setup;
 80003ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80003ee:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_RF_SETUP, data, 1);
 80003f0:	f107 0308 	add.w	r3, r7, #8
 80003f4:	2201      	movs	r2, #1
 80003f6:	4619      	mov	r1, r3
 80003f8:	2006      	movs	r0, #6
 80003fa:	f000 f904 	bl	8000606 <nrf24l01_write_register>

	if(rx_addr_p0 != NULL)
 80003fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000400:	2b00      	cmp	r3, #0
 8000402:	d005      	beq.n	8000410 <nrf24l01_initialize+0xa4>
		nrf24l01_set_rx_addr(rx_addr_p0, 5, 0);
 8000404:	2200      	movs	r2, #0
 8000406:	2105      	movs	r1, #5
 8000408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800040a:	f000 f924 	bl	8000656 <nrf24l01_set_rx_addr>
 800040e:	e010      	b.n	8000432 <nrf24l01_initialize+0xc6>
	else
	{
		data[0] = nrf24l01_RX_ADDR_P0_B0_DEFAULT_VAL;
 8000410:	23e7      	movs	r3, #231	; 0xe7
 8000412:	723b      	strb	r3, [r7, #8]
		data[1] = nrf24l01_RX_ADDR_P0_B1_DEFAULT_VAL;
 8000414:	23e7      	movs	r3, #231	; 0xe7
 8000416:	727b      	strb	r3, [r7, #9]
		data[2] = nrf24l01_RX_ADDR_P0_B2_DEFAULT_VAL;
 8000418:	23e7      	movs	r3, #231	; 0xe7
 800041a:	72bb      	strb	r3, [r7, #10]
		data[3] = nrf24l01_RX_ADDR_P0_B3_DEFAULT_VAL;
 800041c:	23e7      	movs	r3, #231	; 0xe7
 800041e:	72fb      	strb	r3, [r7, #11]
		data[4] = nrf24l01_RX_ADDR_P0_B4_DEFAULT_VAL;
 8000420:	23e7      	movs	r3, #231	; 0xe7
 8000422:	733b      	strb	r3, [r7, #12]

		nrf24l01_set_rx_addr(data, 5, 0);
 8000424:	f107 0308 	add.w	r3, r7, #8
 8000428:	2200      	movs	r2, #0
 800042a:	2105      	movs	r1, #5
 800042c:	4618      	mov	r0, r3
 800042e:	f000 f912 	bl	8000656 <nrf24l01_set_rx_addr>
	}

	if(rx_addr_p1 != NULL)
 8000432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000434:	2b00      	cmp	r3, #0
 8000436:	d005      	beq.n	8000444 <nrf24l01_initialize+0xd8>
		nrf24l01_set_rx_addr(rx_addr_p1, 5, 1);
 8000438:	2201      	movs	r2, #1
 800043a:	2105      	movs	r1, #5
 800043c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800043e:	f000 f90a 	bl	8000656 <nrf24l01_set_rx_addr>
 8000442:	e010      	b.n	8000466 <nrf24l01_initialize+0xfa>
	else
	{
		data[0] = nrf24l01_RX_ADDR_P1_B0_DEFAULT_VAL;
 8000444:	23c2      	movs	r3, #194	; 0xc2
 8000446:	723b      	strb	r3, [r7, #8]
		data[1] = nrf24l01_RX_ADDR_P1_B1_DEFAULT_VAL;
 8000448:	23c2      	movs	r3, #194	; 0xc2
 800044a:	727b      	strb	r3, [r7, #9]
		data[2] = nrf24l01_RX_ADDR_P1_B2_DEFAULT_VAL;
 800044c:	23c2      	movs	r3, #194	; 0xc2
 800044e:	72bb      	strb	r3, [r7, #10]
		data[3] = nrf24l01_RX_ADDR_P1_B3_DEFAULT_VAL;
 8000450:	23c2      	movs	r3, #194	; 0xc2
 8000452:	72fb      	strb	r3, [r7, #11]
		data[4] = nrf24l01_RX_ADDR_P1_B4_DEFAULT_VAL;
 8000454:	23c2      	movs	r3, #194	; 0xc2
 8000456:	733b      	strb	r3, [r7, #12]

		nrf24l01_set_rx_addr(data, 5, 1);
 8000458:	f107 0308 	add.w	r3, r7, #8
 800045c:	2201      	movs	r2, #1
 800045e:	2105      	movs	r1, #5
 8000460:	4618      	mov	r0, r3
 8000462:	f000 f8f8 	bl	8000656 <nrf24l01_set_rx_addr>
	}

	data[0] = rx_addr_p2;
 8000466:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800046a:	723b      	strb	r3, [r7, #8]
	nrf24l01_set_rx_addr(data, 1, 2);
 800046c:	f107 0308 	add.w	r3, r7, #8
 8000470:	2202      	movs	r2, #2
 8000472:	2101      	movs	r1, #1
 8000474:	4618      	mov	r0, r3
 8000476:	f000 f8ee 	bl	8000656 <nrf24l01_set_rx_addr>

	data[0] = rx_addr_p3;
 800047a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800047e:	723b      	strb	r3, [r7, #8]
	nrf24l01_set_rx_addr(data, 1, 3);
 8000480:	f107 0308 	add.w	r3, r7, #8
 8000484:	2203      	movs	r2, #3
 8000486:	2101      	movs	r1, #1
 8000488:	4618      	mov	r0, r3
 800048a:	f000 f8e4 	bl	8000656 <nrf24l01_set_rx_addr>

	data[0] = rx_addr_p4;
 800048e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000492:	723b      	strb	r3, [r7, #8]
	nrf24l01_set_rx_addr(data, 1, 4);
 8000494:	f107 0308 	add.w	r3, r7, #8
 8000498:	2204      	movs	r2, #4
 800049a:	2101      	movs	r1, #1
 800049c:	4618      	mov	r0, r3
 800049e:	f000 f8da 	bl	8000656 <nrf24l01_set_rx_addr>

	data[0] = rx_addr_p5;
 80004a2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80004a6:	723b      	strb	r3, [r7, #8]
	nrf24l01_set_rx_addr(data, 1, 5);
 80004a8:	f107 0308 	add.w	r3, r7, #8
 80004ac:	2205      	movs	r2, #5
 80004ae:	2101      	movs	r1, #1
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 f8d0 	bl	8000656 <nrf24l01_set_rx_addr>

	if(tx_addr != NULL)
 80004b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d004      	beq.n	80004c6 <nrf24l01_initialize+0x15a>
		nrf24l01_set_tx_addr(tx_addr, 5);
 80004bc:	2105      	movs	r1, #5
 80004be:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80004c0:	f000 f8bb 	bl	800063a <nrf24l01_set_tx_addr>
 80004c4:	e00f      	b.n	80004e6 <nrf24l01_initialize+0x17a>
	else
	{
		data[0] = nrf24l01_TX_ADDR_B0_DEFAULT_VAL;
 80004c6:	23e7      	movs	r3, #231	; 0xe7
 80004c8:	723b      	strb	r3, [r7, #8]
		data[1] = nrf24l01_TX_ADDR_B1_DEFAULT_VAL;
 80004ca:	23e7      	movs	r3, #231	; 0xe7
 80004cc:	727b      	strb	r3, [r7, #9]
		data[2] = nrf24l01_TX_ADDR_B2_DEFAULT_VAL;
 80004ce:	23e7      	movs	r3, #231	; 0xe7
 80004d0:	72bb      	strb	r3, [r7, #10]
		data[3] = nrf24l01_TX_ADDR_B3_DEFAULT_VAL;
 80004d2:	23e7      	movs	r3, #231	; 0xe7
 80004d4:	72fb      	strb	r3, [r7, #11]
		data[4] = nrf24l01_TX_ADDR_B4_DEFAULT_VAL;
 80004d6:	23e7      	movs	r3, #231	; 0xe7
 80004d8:	733b      	strb	r3, [r7, #12]

		nrf24l01_set_tx_addr(data, 5);
 80004da:	f107 0308 	add.w	r3, r7, #8
 80004de:	2105      	movs	r1, #5
 80004e0:	4618      	mov	r0, r3
 80004e2:	f000 f8aa 	bl	800063a <nrf24l01_set_tx_addr>
	}

	data[0] = rx_pw_p0;
 80004e6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80004ea:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_RX_PW_P0, data, 1);
 80004ec:	f107 0308 	add.w	r3, r7, #8
 80004f0:	2201      	movs	r2, #1
 80004f2:	4619      	mov	r1, r3
 80004f4:	2011      	movs	r0, #17
 80004f6:	f000 f886 	bl	8000606 <nrf24l01_write_register>

	data[0] = rx_pw_p1;
 80004fa:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80004fe:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_RX_PW_P1, data, 1);
 8000500:	f107 0308 	add.w	r3, r7, #8
 8000504:	2201      	movs	r2, #1
 8000506:	4619      	mov	r1, r3
 8000508:	2012      	movs	r0, #18
 800050a:	f000 f87c 	bl	8000606 <nrf24l01_write_register>

	data[0] = rx_pw_p2;
 800050e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000512:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_RX_PW_P2, data, 1);
 8000514:	f107 0308 	add.w	r3, r7, #8
 8000518:	2201      	movs	r2, #1
 800051a:	4619      	mov	r1, r3
 800051c:	2013      	movs	r0, #19
 800051e:	f000 f872 	bl	8000606 <nrf24l01_write_register>

	data[0] = rx_pw_p3;
 8000522:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8000526:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_RX_PW_P3, data, 1);
 8000528:	f107 0308 	add.w	r3, r7, #8
 800052c:	2201      	movs	r2, #1
 800052e:	4619      	mov	r1, r3
 8000530:	2014      	movs	r0, #20
 8000532:	f000 f868 	bl	8000606 <nrf24l01_write_register>

	data[0] = rx_pw_p4;
 8000536:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800053a:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_RX_PW_P4, data, 1);
 800053c:	f107 0308 	add.w	r3, r7, #8
 8000540:	2201      	movs	r2, #1
 8000542:	4619      	mov	r1, r3
 8000544:	2015      	movs	r0, #21
 8000546:	f000 f85e 	bl	8000606 <nrf24l01_write_register>

	data[0] = rx_pw_p5;
 800054a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800054e:	723b      	strb	r3, [r7, #8]
	nrf24l01_write_register(nrf24l01_RX_PW_P5, data, 1);
 8000550:	f107 0308 	add.w	r3, r7, #8
 8000554:	2201      	movs	r2, #1
 8000556:	4619      	mov	r1, r3
 8000558:	2016      	movs	r0, #22
 800055a:	f000 f854 	bl	8000606 <nrf24l01_write_register>

	if((config & nrf24l01_CONFIG_PWR_UP) != 0)
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	f003 0302 	and.w	r3, r3, #2
 8000564:	2b00      	cmp	r3, #0
 8000566:	d006      	beq.n	8000576 <nrf24l01_initialize+0x20a>
		nrf24l01_power_up_param(opt_rx_active_mode, config);
 8000568:	79fa      	ldrb	r2, [r7, #7]
 800056a:	79bb      	ldrb	r3, [r7, #6]
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f000 f809 	bl	8000586 <nrf24l01_power_up_param>
	else
		nrf24l01_power_down_param(config);
}
 8000574:	e003      	b.n	800057e <nrf24l01_initialize+0x212>
		nrf24l01_power_down_param(config);
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	4618      	mov	r0, r3
 800057a:	f000 f82e 	bl	80005da <nrf24l01_power_down_param>
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	bd90      	pop	{r4, r7, pc}

08000586 <nrf24l01_power_up_param>:
//  24L01 as a receiver.  If the argument is false, the receiver will remain in
//  standby mode and not monitor for packets.  If the argument is true, the CE
//  pin will be set and the 24L01 will monitor for packets.  In TX mode, the value
//  of this argument is insignificant.
void nrf24l01_power_up_param(bool rx_active_mode, unsigned char config)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
 800058c:	4603      	mov	r3, r0
 800058e:	460a      	mov	r2, r1
 8000590:	71fb      	strb	r3, [r7, #7]
 8000592:	4613      	mov	r3, r2
 8000594:	71bb      	strb	r3, [r7, #6]
	config |= nrf24l01_CONFIG_PWR_UP;
 8000596:	79bb      	ldrb	r3, [r7, #6]
 8000598:	f043 0302 	orr.w	r3, r3, #2
 800059c:	b2db      	uxtb	r3, r3
 800059e:	71bb      	strb	r3, [r7, #6]

	nrf24l01_write_register(nrf24l01_CONFIG, &config, 1);
 80005a0:	1dbb      	adds	r3, r7, #6
 80005a2:	2201      	movs	r2, #1
 80005a4:	4619      	mov	r1, r3
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 f82d 	bl	8000606 <nrf24l01_write_register>

	HAL_Delay(2U);
 80005ac:	2002      	movs	r0, #2
 80005ae:	f000 fb2f 	bl	8000c10 <HAL_Delay>

	if((config & nrf24l01_CONFIG_PRIM_RX) == 0)
 80005b2:	79bb      	ldrb	r3, [r7, #6]
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d102      	bne.n	80005c2 <nrf24l01_power_up_param+0x3c>
		nrf24l01_clear_ce();
 80005bc:	f000 f97c 	bl	80008b8 <nrf24l01_clear_ce>
		if(rx_active_mode != false)
			nrf24l01_set_ce();
		else
			nrf24l01_clear_ce();
	}
}
 80005c0:	e007      	b.n	80005d2 <nrf24l01_power_up_param+0x4c>
		if(rx_active_mode != false)
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <nrf24l01_power_up_param+0x48>
			nrf24l01_set_ce();
 80005c8:	f000 f988 	bl	80008dc <nrf24l01_set_ce>
}
 80005cc:	e001      	b.n	80005d2 <nrf24l01_power_up_param+0x4c>
			nrf24l01_clear_ce();
 80005ce:	f000 f973 	bl	80008b8 <nrf24l01_clear_ce>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <nrf24l01_power_down_param>:

//powers down the 24L01
//this function allows the user to set the contents of the CONFIG register, but the function
//  clears the PWR_UP bit in the CONFIG register, so the user does not need to.
void nrf24l01_power_down_param(unsigned char config)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	4603      	mov	r3, r0
 80005e2:	71fb      	strb	r3, [r7, #7]
	config &= (~nrf24l01_CONFIG_PWR_UP);
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	f023 0302 	bic.w	r3, r3, #2
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	71fb      	strb	r3, [r7, #7]

	nrf24l01_write_register(nrf24l01_CONFIG, &config, 1);
 80005ee:	1dfb      	adds	r3, r7, #7
 80005f0:	2201      	movs	r2, #1
 80005f2:	4619      	mov	r1, r3
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 f806 	bl	8000606 <nrf24l01_write_register>

	nrf24l01_clear_ce();
 80005fa:	f000 f95d 	bl	80008b8 <nrf24l01_clear_ce>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}

08000606 <nrf24l01_write_register>:
//  length for the register the address is being sent to.
//unsigned int len is always the size of unsigned char * data.  For example, if data is declared as
//  data[6], len should equal 6.
//returns the value of the STATUS register
unsigned char nrf24l01_write_register(unsigned char regnumber, unsigned char * data, unsigned int len)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b084      	sub	sp, #16
 800060a:	af00      	add	r7, sp, #0
 800060c:	4603      	mov	r3, r0
 800060e:	60b9      	str	r1, [r7, #8]
 8000610:	607a      	str	r2, [r7, #4]
 8000612:	73fb      	strb	r3, [r7, #15]
	return nrf24l01_execute_command(nrf24l01_W_REGISTER | (regnumber & nrf24l01_W_REGISTER_DATA), data, len, false);
 8000614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000618:	f003 031f 	and.w	r3, r3, #31
 800061c:	b25b      	sxtb	r3, r3
 800061e:	f043 0320 	orr.w	r3, r3, #32
 8000622:	b25b      	sxtb	r3, r3
 8000624:	b2d8      	uxtb	r0, r3
 8000626:	2300      	movs	r3, #0
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	f000 f839 	bl	80006a2 <nrf24l01_execute_command>
 8000630:	4603      	mov	r3, r0
}
 8000632:	4618      	mov	r0, r3
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <nrf24l01_set_tx_addr>:
//unsigned char * address is the actual address to be used.  It should be sized
//	according to the tx_addr length specified to the nrf24l01.
//unsigned int len is the length of the address.  Its value should be specified
//	according to the tx_addr length specified to the nrf24l01.
void nrf24l01_set_tx_addr(unsigned char * address, unsigned int len)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
 8000642:	6039      	str	r1, [r7, #0]
	nrf24l01_write_register(nrf24l01_TX_ADDR, address, len);
 8000644:	683a      	ldr	r2, [r7, #0]
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	2010      	movs	r0, #16
 800064a:	f7ff ffdc 	bl	8000606 <nrf24l01_write_register>
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}

08000656 <nrf24l01_set_rx_addr>:
//	according to the rx_addr length specified to the nrf24l01.
//unsigned char rxpipenum is the pipe number (zero to five) whose address is being
//	specified.  If an invalid address (greater than five) is supplied, the function
//  does nothing.
void nrf24l01_set_rx_addr(unsigned char * address, unsigned int len, unsigned char rxpipenum)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b084      	sub	sp, #16
 800065a:	af00      	add	r7, sp, #0
 800065c:	60f8      	str	r0, [r7, #12]
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	4613      	mov	r3, r2
 8000662:	71fb      	strb	r3, [r7, #7]
	if(rxpipenum > 5)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b05      	cmp	r3, #5
 8000668:	d808      	bhi.n	800067c <nrf24l01_set_rx_addr+0x26>
		return;

	nrf24l01_write_register(nrf24l01_RX_ADDR_P0 + rxpipenum, address, len);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	330a      	adds	r3, #10
 800066e:	b2db      	uxtb	r3, r3
 8000670:	68ba      	ldr	r2, [r7, #8]
 8000672:	68f9      	ldr	r1, [r7, #12]
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ffc6 	bl	8000606 <nrf24l01_write_register>
 800067a:	e000      	b.n	800067e <nrf24l01_set_rx_addr+0x28>
		return;
 800067c:	bf00      	nop
}
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <nrf24l01_irq_clear_all>:

//clear all interrupts in the status register
void nrf24l01_irq_clear_all()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
	unsigned char data = nrf24l01_STATUS_RX_DR | nrf24l01_STATUS_TX_DS | nrf24l01_STATUS_MAX_RT;
 800068a:	2370      	movs	r3, #112	; 0x70
 800068c:	71fb      	strb	r3, [r7, #7]

	nrf24l01_write_register(nrf24l01_STATUS, &data, 1);
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	2201      	movs	r2, #1
 8000692:	4619      	mov	r1, r3
 8000694:	2007      	movs	r0, #7
 8000696:	f7ff ffb6 	bl	8000606 <nrf24l01_write_register>
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <nrf24l01_execute_command>:

//low-level spi send function for library use
//the user should not call this function directly, but rather use one of the 8 SPI data instructions
unsigned char nrf24l01_execute_command(unsigned char instruction, unsigned char * data, unsigned int len, bool copydata)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b086      	sub	sp, #24
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
 80006ac:	461a      	mov	r2, r3
 80006ae:	4603      	mov	r3, r0
 80006b0:	73fb      	strb	r3, [r7, #15]
 80006b2:	4613      	mov	r3, r2
 80006b4:	73bb      	strb	r3, [r7, #14]
	unsigned char status;

	nrf24l01_clear_csn();
 80006b6:	f000 f923 	bl	8000900 <nrf24l01_clear_csn>

	status = instruction;
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	75fb      	strb	r3, [r7, #23]
	nrf24l01_spi_send_read(&status, 1, true);
 80006be:	f107 0317 	add.w	r3, r7, #23
 80006c2:	2201      	movs	r2, #1
 80006c4:	2101      	movs	r1, #1
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f80e 	bl	80006e8 <nrf24l01_spi_send_read>
	nrf24l01_spi_send_read(data, len, copydata);
 80006cc:	7bbb      	ldrb	r3, [r7, #14]
 80006ce:	461a      	mov	r2, r3
 80006d0:	6879      	ldr	r1, [r7, #4]
 80006d2:	68b8      	ldr	r0, [r7, #8]
 80006d4:	f000 f808 	bl	80006e8 <nrf24l01_spi_send_read>

	nrf24l01_set_csn();
 80006d8:	f000 f924 	bl	8000924 <nrf24l01_set_csn>

	return status;
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <nrf24l01_spi_send_read>:

//low-level spi send function for library use
//the user should not call this function directly, but rather use one of the 8 SPI data instructions
void nrf24l01_spi_send_read(unsigned char * data, unsigned int len, bool copydata)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af02      	add	r7, sp, #8
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	4613      	mov	r3, r2
 80006f4:	71fb      	strb	r3, [r7, #7]
	unsigned int count;
	unsigned char tempbyte;

	for(count = 0; count < len; count++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	e021      	b.n	8000740 <nrf24l01_spi_send_read+0x58>
	{
		if(copydata != false)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00c      	beq.n	800071c <nrf24l01_spi_send_read+0x34>
			HAL_SPI_TransmitReceive(&hspi2, &data[count], &data[count], 1U, 100U);
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	18d1      	adds	r1, r2, r3
 8000708:	68fa      	ldr	r2, [r7, #12]
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	441a      	add	r2, r3
 800070e:	2364      	movs	r3, #100	; 0x64
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2301      	movs	r3, #1
 8000714:	480e      	ldr	r0, [pc, #56]	; (8000750 <nrf24l01_spi_send_read+0x68>)
 8000716:	f001 f956 	bl	80019c6 <HAL_SPI_TransmitReceive>
 800071a:	e00e      	b.n	800073a <nrf24l01_spi_send_read+0x52>
		else
		{
			uint8_t dummy;
			tempbyte = data[count];
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	74fb      	strb	r3, [r7, #19]
			HAL_SPI_TransmitReceive(&hspi2, &tempbyte, &dummy, 1U, 100U);
 8000726:	f107 0212 	add.w	r2, r7, #18
 800072a:	f107 0113 	add.w	r1, r7, #19
 800072e:	2364      	movs	r3, #100	; 0x64
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2301      	movs	r3, #1
 8000734:	4806      	ldr	r0, [pc, #24]	; (8000750 <nrf24l01_spi_send_read+0x68>)
 8000736:	f001 f946 	bl	80019c6 <HAL_SPI_TransmitReceive>
	for(count = 0; count < len; count++)
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	3301      	adds	r3, #1
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697a      	ldr	r2, [r7, #20]
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	429a      	cmp	r2, r3
 8000746:	d3d9      	bcc.n	80006fc <nrf24l01_spi_send_read+0x14>
		}
	}
}
 8000748:	bf00      	nop
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000002c 	.word	0x2000002c

08000754 <nrf24l01_initialize_debug>:
//unsigned char payload_width is the payload width for pipe 0.  All other pipes
//  are left in their default (disabled) state.
//bool enable_auto_ack controls the auto ack feature on pipe 0.  If true, auto-ack will
//  be enabled.  If false, auto-ack is disabled.
void nrf24l01_initialize_debug(bool rx, unsigned char p0_payload_width, bool enable_auto_ack)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b096      	sub	sp, #88	; 0x58
 8000758:	af12      	add	r7, sp, #72	; 0x48
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
 800075e:	460b      	mov	r3, r1
 8000760:	71bb      	strb	r3, [r7, #6]
 8000762:	4613      	mov	r3, r2
 8000764:	717b      	strb	r3, [r7, #5]
	unsigned char config;
	unsigned char en_aa;

	config = nrf24l01_CONFIG_DEFAULT_VAL | nrf24l01_CONFIG_PWR_UP;
 8000766:	230a      	movs	r3, #10
 8000768:	73fb      	strb	r3, [r7, #15]

	if(enable_auto_ack != false)
 800076a:	797b      	ldrb	r3, [r7, #5]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <nrf24l01_initialize_debug+0x22>
		en_aa = nrf24l01_EN_AA_ENAA_P0;
 8000770:	2301      	movs	r3, #1
 8000772:	73bb      	strb	r3, [r7, #14]
 8000774:	e001      	b.n	800077a <nrf24l01_initialize_debug+0x26>
	else
		en_aa = nrf24l01_EN_AA_ENAA_NONE;
 8000776:	2300      	movs	r3, #0
 8000778:	73bb      	strb	r3, [r7, #14]

	if(rx == true)
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d103      	bne.n	8000788 <nrf24l01_initialize_debug+0x34>
		config = config | nrf24l01_CONFIG_PRIM_RX;
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	73fb      	strb	r3, [r7, #15]

	nrf24l01_initialize(config,
 8000788:	7bba      	ldrb	r2, [r7, #14]
 800078a:	7bf8      	ldrb	r0, [r7, #15]
 800078c:	2300      	movs	r3, #0
 800078e:	9310      	str	r3, [sp, #64]	; 0x40
 8000790:	2300      	movs	r3, #0
 8000792:	930f      	str	r3, [sp, #60]	; 0x3c
 8000794:	2300      	movs	r3, #0
 8000796:	930e      	str	r3, [sp, #56]	; 0x38
 8000798:	2300      	movs	r3, #0
 800079a:	930d      	str	r3, [sp, #52]	; 0x34
 800079c:	2300      	movs	r3, #0
 800079e:	930c      	str	r3, [sp, #48]	; 0x30
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80007a4:	2300      	movs	r3, #0
 80007a6:	930a      	str	r3, [sp, #40]	; 0x28
 80007a8:	23c6      	movs	r3, #198	; 0xc6
 80007aa:	9309      	str	r3, [sp, #36]	; 0x24
 80007ac:	23c5      	movs	r3, #197	; 0xc5
 80007ae:	9308      	str	r3, [sp, #32]
 80007b0:	23c4      	movs	r3, #196	; 0xc4
 80007b2:	9307      	str	r3, [sp, #28]
 80007b4:	23c3      	movs	r3, #195	; 0xc3
 80007b6:	9306      	str	r3, [sp, #24]
 80007b8:	2300      	movs	r3, #0
 80007ba:	9305      	str	r3, [sp, #20]
 80007bc:	2300      	movs	r3, #0
 80007be:	9304      	str	r3, [sp, #16]
 80007c0:	230f      	movs	r3, #15
 80007c2:	9303      	str	r3, [sp, #12]
 80007c4:	2302      	movs	r3, #2
 80007c6:	9302      	str	r3, [sp, #8]
 80007c8:	2303      	movs	r3, #3
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	2303      	movs	r3, #3
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2303      	movs	r3, #3
 80007d2:	2101      	movs	r1, #1
 80007d4:	f7ff fdca 	bl	800036c <nrf24l01_initialize>
						nrf24l01_RX_PW_P1_DEFAULT_VAL,
						nrf24l01_RX_PW_P2_DEFAULT_VAL,
						nrf24l01_RX_PW_P3_DEFAULT_VAL,
						nrf24l01_RX_PW_P4_DEFAULT_VAL,
						nrf24l01_RX_PW_P5_DEFAULT_VAL);
}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <nrf24l01_write_tx_payload>:
//	according to the payload length specified by the receiving nrf24l01).
//if bool transmit is true, the nrf24l01 immediately transmits the data in the payload.
//	if false, the user must use the nrf24l01_transmit() function to send the payload.
//returns the value of the STATUS register
unsigned char nrf24l01_write_tx_payload(unsigned char * data, unsigned int len, bool transmit)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	4613      	mov	r3, r2
 80007ec:	71fb      	strb	r3, [r7, #7]
	unsigned char status;

	status = nrf24l01_execute_command(nrf24l01_W_TX_PAYLOAD, data, len, false);
 80007ee:	2300      	movs	r3, #0
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	68f9      	ldr	r1, [r7, #12]
 80007f4:	20a0      	movs	r0, #160	; 0xa0
 80007f6:	f7ff ff54 	bl	80006a2 <nrf24l01_execute_command>
 80007fa:	4603      	mov	r3, r0
 80007fc:	75fb      	strb	r3, [r7, #23]

	if(transmit == true)
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	2b01      	cmp	r3, #1
 8000802:	d101      	bne.n	8000808 <nrf24l01_write_tx_payload+0x28>
		nrf24l01_transmit();
 8000804:	f000 f842 	bl	800088c <nrf24l01_transmit>

	return status;
 8000808:	7dfb      	ldrb	r3, [r7, #23]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <nrf24l01_flush_tx>:

//executes the FLUSH_TX SPI operation
//this funciton empties the contents of the TX FIFO
//returns the value of the STATUS register
unsigned char nrf24l01_flush_tx()
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
	return nrf24l01_execute_command(nrf24l01_FLUSH_TX, NULL, 0, true);
 8000816:	2301      	movs	r3, #1
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	20e1      	movs	r0, #225	; 0xe1
 800081e:	f7ff ff40 	bl	80006a2 <nrf24l01_execute_command>
 8000822:	4603      	mov	r3, r0
}
 8000824:	4618      	mov	r0, r3
 8000826:	bd80      	pop	{r7, pc}

08000828 <nrf24l01_nop>:

//executes the FLUSH_TX SPI operation
//this funciton does nothing
//returns the value of the STATUS register
unsigned char nrf24l01_nop()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	return nrf24l01_execute_command(nrf24l01_NOP, NULL, 0, true);
 800082c:	2301      	movs	r3, #1
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	20ff      	movs	r0, #255	; 0xff
 8000834:	f7ff ff35 	bl	80006a2 <nrf24l01_execute_command>
 8000838:	4603      	mov	r3, r0
}
 800083a:	4618      	mov	r0, r3
 800083c:	bd80      	pop	{r7, pc}

0800083e <nrf24l01_get_status>:
	return data;
}

//return the value of the status register
unsigned char nrf24l01_get_status()
{
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0
	return nrf24l01_nop();
 8000842:	f7ff fff1 	bl	8000828 <nrf24l01_nop>
 8000846:	4603      	mov	r3, r0
}
 8000848:	4618      	mov	r0, r3
 800084a:	bd80      	pop	{r7, pc}

0800084c <nrf24l01_irq_pin_active>:
	return (bool)(data & nrf24l01_FIFO_STATUS_RX_EMPTY);
}

//returns true if IRQ pin is low, false otherwise
bool nrf24l01_irq_pin_active()
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
	bool irq = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 8000852:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000856:	4807      	ldr	r0, [pc, #28]	; (8000874 <nrf24l01_irq_pin_active+0x28>)
 8000858:	f000 fc3a 	bl	80010d0 <HAL_GPIO_ReadPin>
 800085c:	4603      	mov	r3, r0
 800085e:	71fb      	strb	r3, [r7, #7]
	return !irq;
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	2b00      	cmp	r3, #0
 8000864:	bf0c      	ite	eq
 8000866:	2301      	moveq	r3, #1
 8000868:	2300      	movne	r3, #0
 800086a:	b2db      	uxtb	r3, r3
}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40010c00 	.word	0x40010c00

08000878 <nrf24l01_irq_tx_ds_active>:
	return (nrf24l01_get_status() & nrf24l01_STATUS_RX_DR);
}

//returns true if TX_DS interrupt is active, false otherwise
bool nrf24l01_irq_tx_ds_active()
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	return (nrf24l01_get_status() & nrf24l01_STATUS_TX_DS);
 800087c:	f7ff ffdf 	bl	800083e <nrf24l01_get_status>
 8000880:	4603      	mov	r3, r0
 8000882:	f003 0320 	and.w	r3, r3, #32
 8000886:	b2db      	uxtb	r3, r3
}
 8000888:	4618      	mov	r0, r3
 800088a:	bd80      	pop	{r7, pc}

0800088c <nrf24l01_transmit>:
	}
}

//transmits the current tx payload
void nrf24l01_transmit()
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
	nrf24l01_set_ce();
 8000892:	f000 f823 	bl	80008dc <nrf24l01_set_ce>

	for (uint8_t i = 0; i<180;i++)
 8000896:	2300      	movs	r3, #0
 8000898:	71fb      	strb	r3, [r7, #7]
 800089a:	e003      	b.n	80008a4 <nrf24l01_transmit+0x18>
	{
		asm("nop");
 800089c:	bf00      	nop
	for (uint8_t i = 0; i<180;i++)
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	3301      	adds	r3, #1
 80008a2:	71fb      	strb	r3, [r7, #7]
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2bb3      	cmp	r3, #179	; 0xb3
 80008a8:	d9f8      	bls.n	800089c <nrf24l01_transmit+0x10>
	}

	nrf24l01_clear_ce();
 80008aa:	f000 f805 	bl	80008b8 <nrf24l01_clear_ce>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <nrf24l01_clear_ce>:
	return status;
}

//clears the pin on the host microcontroller that is attached to the 24l01's CE pin
void nrf24l01_clear_ce()
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <nrf24l01_clear_ce+0x1c>)
 80008c4:	f000 fc1b 	bl	80010fe <HAL_GPIO_WritePin>
	ce_active = true;
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <nrf24l01_clear_ce+0x20>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40010c00 	.word	0x40010c00
 80008d8:	20000029 	.word	0x20000029

080008dc <nrf24l01_set_ce>:

//sets the pin on the host microcontroller that is attached to the 24l01's CE pin
void nrf24l01_set_ce()
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e6:	4804      	ldr	r0, [pc, #16]	; (80008f8 <nrf24l01_set_ce+0x1c>)
 80008e8:	f000 fc09 	bl	80010fe <HAL_GPIO_WritePin>
	ce_active = false;
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <nrf24l01_set_ce+0x20>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40010c00 	.word	0x40010c00
 80008fc:	20000029 	.word	0x20000029

08000900 <nrf24l01_clear_csn>:

//sets the pin on the host microcontroller that is attached to the 24l01's CSN pin
void nrf24l01_clear_csn()
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800090a:	4804      	ldr	r0, [pc, #16]	; (800091c <nrf24l01_clear_csn+0x1c>)
 800090c:	f000 fbf7 	bl	80010fe <HAL_GPIO_WritePin>
	csn_active = true;
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <nrf24l01_clear_csn+0x20>)
 8000912:	2201      	movs	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40010c00 	.word	0x40010c00
 8000920:	20000028 	.word	0x20000028

08000924 <nrf24l01_set_csn>:

//clears the pin on the host microcontroller that is attached to the 24l01's CSN pin
void nrf24l01_set_csn()
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092e:	4804      	ldr	r0, [pc, #16]	; (8000940 <nrf24l01_set_csn+0x1c>)
 8000930:	f000 fbe5 	bl	80010fe <HAL_GPIO_WritePin>
	csn_active = false;
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <nrf24l01_set_csn+0x20>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40010c00 	.word	0x40010c00
 8000944:	20000028 	.word	0x20000028

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_MspInit+0x5c>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <HAL_MspInit+0x5c>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6193      	str	r3, [r2, #24]
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_MspInit+0x5c>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_MspInit+0x5c>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_MspInit+0x5c>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	61d3      	str	r3, [r2, #28]
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_MspInit+0x5c>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_MspInit+0x60>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <HAL_MspInit+0x60>)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010000 	.word	0x40010000

080009ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <HAL_SPI_MspInit+0x8c>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d131      	bne.n	8000a30 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <HAL_SPI_MspInit+0x90>)
 80009ce:	69db      	ldr	r3, [r3, #28]
 80009d0:	4a1a      	ldr	r2, [pc, #104]	; (8000a3c <HAL_SPI_MspInit+0x90>)
 80009d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d6:	61d3      	str	r3, [r2, #28]
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <HAL_SPI_MspInit+0x90>)
 80009da:	69db      	ldr	r3, [r3, #28]
 80009dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <HAL_SPI_MspInit+0x90>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <HAL_SPI_MspInit+0x90>)
 80009ea:	f043 0308 	orr.w	r3, r3, #8
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <HAL_SPI_MspInit+0x90>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0308 	and.w	r3, r3, #8
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80009fc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000a00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480b      	ldr	r0, [pc, #44]	; (8000a40 <HAL_SPI_MspInit+0x94>)
 8000a12:	f000 fa03 	bl	8000e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <HAL_SPI_MspInit+0x94>)
 8000a2c:	f000 f9f6 	bl	8000e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a30:	bf00      	nop
 8000a32:	3720      	adds	r7, #32
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40003800 	.word	0x40003800
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40010c00 	.word	0x40010c00

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <HardFault_Handler+0x4>

08000a56 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <MemManage_Handler+0x4>

08000a5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <BusFault_Handler+0x4>

08000a62 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <UsageFault_Handler+0x4>

08000a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a90:	f000 f8a2 	bl	8000bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <SystemInit+0x5c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <SystemInit+0x5c>)
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <SystemInit+0x5c>)
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	4911      	ldr	r1, [pc, #68]	; (8000af4 <SystemInit+0x5c>)
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <SystemInit+0x60>)
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <SystemInit+0x5c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <SystemInit+0x5c>)
 8000aba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ac2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <SystemInit+0x5c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <SystemInit+0x5c>)
 8000aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ace:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <SystemInit+0x5c>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <SystemInit+0x5c>)
 8000ad6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000ada:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <SystemInit+0x5c>)
 8000ade:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ae2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <SystemInit+0x64>)
 8000ae6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aea:	609a      	str	r2, [r3, #8]
#endif 
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	40021000 	.word	0x40021000
 8000af8:	f8ff0000 	.word	0xf8ff0000
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b02:	e003      	b.n	8000b0c <LoopCopyDataInit>

08000b04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b0a:	3104      	adds	r1, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b0c:	480a      	ldr	r0, [pc, #40]	; (8000b38 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b14:	d3f6      	bcc.n	8000b04 <CopyDataInit>
  ldr r2, =_sbss
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b18:	e002      	b.n	8000b20 <LoopFillZerobss>

08000b1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b1c:	f842 3b04 	str.w	r3, [r2], #4

08000b20 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b24:	d3f9      	bcc.n	8000b1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b26:	f7ff ffb7 	bl	8000a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f001 f977 	bl	8001e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b2e:	f7ff fb0d 	bl	800014c <main>
  bx lr
 8000b32:	4770      	bx	lr
  ldr r3, =_sidata
 8000b34:	08001eb8 	.word	0x08001eb8
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000b40:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000b44:	20000088 	.word	0x20000088

08000b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC1_2_IRQHandler>
	...

08000b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_Init+0x28>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <HAL_Init+0x28>)
 8000b56:	f043 0310 	orr.w	r3, r3, #16
 8000b5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 f929 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f000 f808 	bl	8000b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b68:	f7ff feee 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40022000 	.word	0x40022000

08000b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_InitTick+0x54>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_InitTick+0x58>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f933 	bl	8000e02 <HAL_SYSTICK_Config>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00e      	b.n	8000bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d80a      	bhi.n	8000bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bac:	2200      	movs	r2, #0
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f000 f909 	bl	8000dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb8:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <HAL_InitTick+0x5c>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e000      	b.n	8000bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000004 	.word	0x20000004

08000bd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <HAL_IncTick+0x1c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_IncTick+0x20>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a03      	ldr	r2, [pc, #12]	; (8000bf8 <HAL_IncTick+0x20>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000084 	.word	0x20000084

08000bfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b02      	ldr	r3, [pc, #8]	; (8000c0c <HAL_GetTick+0x10>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	20000084 	.word	0x20000084

08000c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c18:	f7ff fff0 	bl	8000bfc <HAL_GetTick>
 8000c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c28:	d005      	beq.n	8000c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_Delay+0x40>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4413      	add	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c36:	bf00      	nop
 8000c38:	f7ff ffe0 	bl	8000bfc <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d8f7      	bhi.n	8000c38 <HAL_Delay+0x28>
  {
  }
}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000008 	.word	0x20000008

08000c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c86:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	60d3      	str	r3, [r2, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	f003 0307 	and.w	r3, r3, #7
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f7ff ff90 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff49 	bl	8000c54 <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ddc:	f7ff ff5e 	bl	8000c9c <__NVIC_GetPriorityGrouping>
 8000de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff ff90 	bl	8000d0c <NVIC_EncodePriority>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5f 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ffb0 	bl	8000d70 <SysTick_Config>
 8000e10:	4603      	mov	r3, r0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b08b      	sub	sp, #44	; 0x2c
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2e:	e127      	b.n	8001080 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e30:	2201      	movs	r2, #1
 8000e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	69fa      	ldr	r2, [r7, #28]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f040 8116 	bne.w	800107a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b12      	cmp	r3, #18
 8000e54:	d034      	beq.n	8000ec0 <HAL_GPIO_Init+0xa4>
 8000e56:	2b12      	cmp	r3, #18
 8000e58:	d80d      	bhi.n	8000e76 <HAL_GPIO_Init+0x5a>
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d02b      	beq.n	8000eb6 <HAL_GPIO_Init+0x9a>
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d804      	bhi.n	8000e6c <HAL_GPIO_Init+0x50>
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d031      	beq.n	8000eca <HAL_GPIO_Init+0xae>
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d01c      	beq.n	8000ea4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e6a:	e048      	b.n	8000efe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d043      	beq.n	8000ef8 <HAL_GPIO_Init+0xdc>
 8000e70:	2b11      	cmp	r3, #17
 8000e72:	d01b      	beq.n	8000eac <HAL_GPIO_Init+0x90>
          break;
 8000e74:	e043      	b.n	8000efe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e76:	4a89      	ldr	r2, [pc, #548]	; (800109c <HAL_GPIO_Init+0x280>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d026      	beq.n	8000eca <HAL_GPIO_Init+0xae>
 8000e7c:	4a87      	ldr	r2, [pc, #540]	; (800109c <HAL_GPIO_Init+0x280>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d806      	bhi.n	8000e90 <HAL_GPIO_Init+0x74>
 8000e82:	4a87      	ldr	r2, [pc, #540]	; (80010a0 <HAL_GPIO_Init+0x284>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d020      	beq.n	8000eca <HAL_GPIO_Init+0xae>
 8000e88:	4a86      	ldr	r2, [pc, #536]	; (80010a4 <HAL_GPIO_Init+0x288>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d01d      	beq.n	8000eca <HAL_GPIO_Init+0xae>
          break;
 8000e8e:	e036      	b.n	8000efe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e90:	4a85      	ldr	r2, [pc, #532]	; (80010a8 <HAL_GPIO_Init+0x28c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d019      	beq.n	8000eca <HAL_GPIO_Init+0xae>
 8000e96:	4a85      	ldr	r2, [pc, #532]	; (80010ac <HAL_GPIO_Init+0x290>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d016      	beq.n	8000eca <HAL_GPIO_Init+0xae>
 8000e9c:	4a84      	ldr	r2, [pc, #528]	; (80010b0 <HAL_GPIO_Init+0x294>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d013      	beq.n	8000eca <HAL_GPIO_Init+0xae>
          break;
 8000ea2:	e02c      	b.n	8000efe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	623b      	str	r3, [r7, #32]
          break;
 8000eaa:	e028      	b.n	8000efe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	623b      	str	r3, [r7, #32]
          break;
 8000eb4:	e023      	b.n	8000efe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	3308      	adds	r3, #8
 8000ebc:	623b      	str	r3, [r7, #32]
          break;
 8000ebe:	e01e      	b.n	8000efe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	330c      	adds	r3, #12
 8000ec6:	623b      	str	r3, [r7, #32]
          break;
 8000ec8:	e019      	b.n	8000efe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d102      	bne.n	8000ed8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	623b      	str	r3, [r7, #32]
          break;
 8000ed6:	e012      	b.n	8000efe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d105      	bne.n	8000eec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee0:	2308      	movs	r3, #8
 8000ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69fa      	ldr	r2, [r7, #28]
 8000ee8:	611a      	str	r2, [r3, #16]
          break;
 8000eea:	e008      	b.n	8000efe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000eec:	2308      	movs	r3, #8
 8000eee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69fa      	ldr	r2, [r7, #28]
 8000ef4:	615a      	str	r2, [r3, #20]
          break;
 8000ef6:	e002      	b.n	8000efe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	623b      	str	r3, [r7, #32]
          break;
 8000efc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	2bff      	cmp	r3, #255	; 0xff
 8000f02:	d801      	bhi.n	8000f08 <HAL_GPIO_Init+0xec>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	e001      	b.n	8000f0c <HAL_GPIO_Init+0xf0>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	2bff      	cmp	r3, #255	; 0xff
 8000f12:	d802      	bhi.n	8000f1a <HAL_GPIO_Init+0xfe>
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	e002      	b.n	8000f20 <HAL_GPIO_Init+0x104>
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	3b08      	subs	r3, #8
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	210f      	movs	r1, #15
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	401a      	ands	r2, r3
 8000f32:	6a39      	ldr	r1, [r7, #32]
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f000 8096 	beq.w	800107a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f4e:	4b59      	ldr	r3, [pc, #356]	; (80010b4 <HAL_GPIO_Init+0x298>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	4a58      	ldr	r2, [pc, #352]	; (80010b4 <HAL_GPIO_Init+0x298>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6193      	str	r3, [r2, #24]
 8000f5a:	4b56      	ldr	r3, [pc, #344]	; (80010b4 <HAL_GPIO_Init+0x298>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f66:	4a54      	ldr	r2, [pc, #336]	; (80010b8 <HAL_GPIO_Init+0x29c>)
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f72:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	4013      	ands	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4b      	ldr	r2, [pc, #300]	; (80010bc <HAL_GPIO_Init+0x2a0>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d013      	beq.n	8000fba <HAL_GPIO_Init+0x19e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4a      	ldr	r2, [pc, #296]	; (80010c0 <HAL_GPIO_Init+0x2a4>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d00d      	beq.n	8000fb6 <HAL_GPIO_Init+0x19a>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a49      	ldr	r2, [pc, #292]	; (80010c4 <HAL_GPIO_Init+0x2a8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d007      	beq.n	8000fb2 <HAL_GPIO_Init+0x196>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a48      	ldr	r2, [pc, #288]	; (80010c8 <HAL_GPIO_Init+0x2ac>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_GPIO_Init+0x192>
 8000faa:	2303      	movs	r3, #3
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x1a0>
 8000fae:	2304      	movs	r3, #4
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x1a0>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x1a0>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x1a0>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fbe:	f002 0203 	and.w	r2, r2, #3
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fcc:	493a      	ldr	r1, [pc, #232]	; (80010b8 <HAL_GPIO_Init+0x29c>)
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d006      	beq.n	8000ff4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fe6:	4b39      	ldr	r3, [pc, #228]	; (80010cc <HAL_GPIO_Init+0x2b0>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4938      	ldr	r1, [pc, #224]	; (80010cc <HAL_GPIO_Init+0x2b0>)
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	600b      	str	r3, [r1, #0]
 8000ff2:	e006      	b.n	8001002 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ff4:	4b35      	ldr	r3, [pc, #212]	; (80010cc <HAL_GPIO_Init+0x2b0>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	4933      	ldr	r1, [pc, #204]	; (80010cc <HAL_GPIO_Init+0x2b0>)
 8000ffe:	4013      	ands	r3, r2
 8001000:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d006      	beq.n	800101c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800100e:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <HAL_GPIO_Init+0x2b0>)
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	492e      	ldr	r1, [pc, #184]	; (80010cc <HAL_GPIO_Init+0x2b0>)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	604b      	str	r3, [r1, #4]
 800101a:	e006      	b.n	800102a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800101c:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <HAL_GPIO_Init+0x2b0>)
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	43db      	mvns	r3, r3
 8001024:	4929      	ldr	r1, [pc, #164]	; (80010cc <HAL_GPIO_Init+0x2b0>)
 8001026:	4013      	ands	r3, r2
 8001028:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001036:	4b25      	ldr	r3, [pc, #148]	; (80010cc <HAL_GPIO_Init+0x2b0>)
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	4924      	ldr	r1, [pc, #144]	; (80010cc <HAL_GPIO_Init+0x2b0>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	608b      	str	r3, [r1, #8]
 8001042:	e006      	b.n	8001052 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <HAL_GPIO_Init+0x2b0>)
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	43db      	mvns	r3, r3
 800104c:	491f      	ldr	r1, [pc, #124]	; (80010cc <HAL_GPIO_Init+0x2b0>)
 800104e:	4013      	ands	r3, r2
 8001050:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d006      	beq.n	800106c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800105e:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <HAL_GPIO_Init+0x2b0>)
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	491a      	ldr	r1, [pc, #104]	; (80010cc <HAL_GPIO_Init+0x2b0>)
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	60cb      	str	r3, [r1, #12]
 800106a:	e006      	b.n	800107a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_GPIO_Init+0x2b0>)
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	43db      	mvns	r3, r3
 8001074:	4915      	ldr	r1, [pc, #84]	; (80010cc <HAL_GPIO_Init+0x2b0>)
 8001076:	4013      	ands	r3, r2
 8001078:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	3301      	adds	r3, #1
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	fa22 f303 	lsr.w	r3, r2, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	f47f aed0 	bne.w	8000e30 <HAL_GPIO_Init+0x14>
  }
}
 8001090:	bf00      	nop
 8001092:	372c      	adds	r7, #44	; 0x2c
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	10210000 	.word	0x10210000
 80010a0:	10110000 	.word	0x10110000
 80010a4:	10120000 	.word	0x10120000
 80010a8:	10310000 	.word	0x10310000
 80010ac:	10320000 	.word	0x10320000
 80010b0:	10220000 	.word	0x10220000
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010000 	.word	0x40010000
 80010bc:	40010800 	.word	0x40010800
 80010c0:	40010c00 	.word	0x40010c00
 80010c4:	40011000 	.word	0x40011000
 80010c8:	40011400 	.word	0x40011400
 80010cc:	40010400 	.word	0x40010400

080010d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	887b      	ldrh	r3, [r7, #2]
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010e8:	2301      	movs	r3, #1
 80010ea:	73fb      	strb	r3, [r7, #15]
 80010ec:	e001      	b.n	80010f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	460b      	mov	r3, r1
 8001108:	807b      	strh	r3, [r7, #2]
 800110a:	4613      	mov	r3, r2
 800110c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800110e:	787b      	ldrb	r3, [r7, #1]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001114:	887a      	ldrh	r2, [r7, #2]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800111a:	e003      	b.n	8001124 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800111c:	887b      	ldrh	r3, [r7, #2]
 800111e:	041a      	lsls	r2, r3, #16
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	611a      	str	r2, [r3, #16]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
	...

08001130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e26c      	b.n	800161c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8087 	beq.w	800125e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001150:	4b92      	ldr	r3, [pc, #584]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 030c 	and.w	r3, r3, #12
 8001158:	2b04      	cmp	r3, #4
 800115a:	d00c      	beq.n	8001176 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800115c:	4b8f      	ldr	r3, [pc, #572]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 030c 	and.w	r3, r3, #12
 8001164:	2b08      	cmp	r3, #8
 8001166:	d112      	bne.n	800118e <HAL_RCC_OscConfig+0x5e>
 8001168:	4b8c      	ldr	r3, [pc, #560]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001174:	d10b      	bne.n	800118e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001176:	4b89      	ldr	r3, [pc, #548]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d06c      	beq.n	800125c <HAL_RCC_OscConfig+0x12c>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d168      	bne.n	800125c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e246      	b.n	800161c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001196:	d106      	bne.n	80011a6 <HAL_RCC_OscConfig+0x76>
 8001198:	4b80      	ldr	r3, [pc, #512]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a7f      	ldr	r2, [pc, #508]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 800119e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	e02e      	b.n	8001204 <HAL_RCC_OscConfig+0xd4>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d10c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x98>
 80011ae:	4b7b      	ldr	r3, [pc, #492]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a7a      	ldr	r2, [pc, #488]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 80011b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	4b78      	ldr	r3, [pc, #480]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a77      	ldr	r2, [pc, #476]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 80011c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	e01d      	b.n	8001204 <HAL_RCC_OscConfig+0xd4>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d0:	d10c      	bne.n	80011ec <HAL_RCC_OscConfig+0xbc>
 80011d2:	4b72      	ldr	r3, [pc, #456]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a71      	ldr	r2, [pc, #452]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 80011d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	4b6f      	ldr	r3, [pc, #444]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a6e      	ldr	r2, [pc, #440]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 80011e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e00b      	b.n	8001204 <HAL_RCC_OscConfig+0xd4>
 80011ec:	4b6b      	ldr	r3, [pc, #428]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a6a      	ldr	r2, [pc, #424]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 80011f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b68      	ldr	r3, [pc, #416]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a67      	ldr	r2, [pc, #412]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 80011fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001202:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d013      	beq.n	8001234 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120c:	f7ff fcf6 	bl	8000bfc <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001214:	f7ff fcf2 	bl	8000bfc <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b64      	cmp	r3, #100	; 0x64
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e1fa      	b.n	800161c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001226:	4b5d      	ldr	r3, [pc, #372]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f0      	beq.n	8001214 <HAL_RCC_OscConfig+0xe4>
 8001232:	e014      	b.n	800125e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001234:	f7ff fce2 	bl	8000bfc <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800123c:	f7ff fcde 	bl	8000bfc <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b64      	cmp	r3, #100	; 0x64
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e1e6      	b.n	800161c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124e:	4b53      	ldr	r3, [pc, #332]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f0      	bne.n	800123c <HAL_RCC_OscConfig+0x10c>
 800125a:	e000      	b.n	800125e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d063      	beq.n	8001332 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800126a:	4b4c      	ldr	r3, [pc, #304]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00b      	beq.n	800128e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001276:	4b49      	ldr	r3, [pc, #292]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 030c 	and.w	r3, r3, #12
 800127e:	2b08      	cmp	r3, #8
 8001280:	d11c      	bne.n	80012bc <HAL_RCC_OscConfig+0x18c>
 8001282:	4b46      	ldr	r3, [pc, #280]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d116      	bne.n	80012bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128e:	4b43      	ldr	r3, [pc, #268]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d005      	beq.n	80012a6 <HAL_RCC_OscConfig+0x176>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d001      	beq.n	80012a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e1ba      	b.n	800161c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a6:	4b3d      	ldr	r3, [pc, #244]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4939      	ldr	r1, [pc, #228]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ba:	e03a      	b.n	8001332 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d020      	beq.n	8001306 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c4:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ca:	f7ff fc97 	bl	8000bfc <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d2:	f7ff fc93 	bl	8000bfc <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e19b      	b.n	800161c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e4:	4b2d      	ldr	r3, [pc, #180]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0f0      	beq.n	80012d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f0:	4b2a      	ldr	r3, [pc, #168]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	4927      	ldr	r1, [pc, #156]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 8001300:	4313      	orrs	r3, r2
 8001302:	600b      	str	r3, [r1, #0]
 8001304:	e015      	b.n	8001332 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001306:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <HAL_RCC_OscConfig+0x270>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fc76 	bl	8000bfc <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001314:	f7ff fc72 	bl	8000bfc <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e17a      	b.n	800161c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d03a      	beq.n	80013b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d019      	beq.n	800137a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <HAL_RCC_OscConfig+0x274>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134c:	f7ff fc56 	bl	8000bfc <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001354:	f7ff fc52 	bl	8000bfc <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e15a      	b.n	800161c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_RCC_OscConfig+0x26c>)
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001372:	2001      	movs	r0, #1
 8001374:	f000 faa8 	bl	80018c8 <RCC_Delay>
 8001378:	e01c      	b.n	80013b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <HAL_RCC_OscConfig+0x274>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001380:	f7ff fc3c 	bl	8000bfc <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001386:	e00f      	b.n	80013a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001388:	f7ff fc38 	bl	8000bfc <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d908      	bls.n	80013a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e140      	b.n	800161c <HAL_RCC_OscConfig+0x4ec>
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000
 80013a0:	42420000 	.word	0x42420000
 80013a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a8:	4b9e      	ldr	r3, [pc, #632]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1e9      	bne.n	8001388 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80a6 	beq.w	800150e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c6:	4b97      	ldr	r3, [pc, #604]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10d      	bne.n	80013ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4b94      	ldr	r3, [pc, #592]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4a93      	ldr	r2, [pc, #588]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	61d3      	str	r3, [r2, #28]
 80013de:	4b91      	ldr	r3, [pc, #580]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ea:	2301      	movs	r3, #1
 80013ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ee:	4b8e      	ldr	r3, [pc, #568]	; (8001628 <HAL_RCC_OscConfig+0x4f8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d118      	bne.n	800142c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013fa:	4b8b      	ldr	r3, [pc, #556]	; (8001628 <HAL_RCC_OscConfig+0x4f8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a8a      	ldr	r2, [pc, #552]	; (8001628 <HAL_RCC_OscConfig+0x4f8>)
 8001400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001406:	f7ff fbf9 	bl	8000bfc <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140e:	f7ff fbf5 	bl	8000bfc <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b64      	cmp	r3, #100	; 0x64
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e0fd      	b.n	800161c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001420:	4b81      	ldr	r3, [pc, #516]	; (8001628 <HAL_RCC_OscConfig+0x4f8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d106      	bne.n	8001442 <HAL_RCC_OscConfig+0x312>
 8001434:	4b7b      	ldr	r3, [pc, #492]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	4a7a      	ldr	r2, [pc, #488]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6213      	str	r3, [r2, #32]
 8001440:	e02d      	b.n	800149e <HAL_RCC_OscConfig+0x36e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10c      	bne.n	8001464 <HAL_RCC_OscConfig+0x334>
 800144a:	4b76      	ldr	r3, [pc, #472]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	4a75      	ldr	r2, [pc, #468]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 8001450:	f023 0301 	bic.w	r3, r3, #1
 8001454:	6213      	str	r3, [r2, #32]
 8001456:	4b73      	ldr	r3, [pc, #460]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 8001458:	6a1b      	ldr	r3, [r3, #32]
 800145a:	4a72      	ldr	r2, [pc, #456]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 800145c:	f023 0304 	bic.w	r3, r3, #4
 8001460:	6213      	str	r3, [r2, #32]
 8001462:	e01c      	b.n	800149e <HAL_RCC_OscConfig+0x36e>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	2b05      	cmp	r3, #5
 800146a:	d10c      	bne.n	8001486 <HAL_RCC_OscConfig+0x356>
 800146c:	4b6d      	ldr	r3, [pc, #436]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	4a6c      	ldr	r2, [pc, #432]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 8001472:	f043 0304 	orr.w	r3, r3, #4
 8001476:	6213      	str	r3, [r2, #32]
 8001478:	4b6a      	ldr	r3, [pc, #424]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	4a69      	ldr	r2, [pc, #420]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6213      	str	r3, [r2, #32]
 8001484:	e00b      	b.n	800149e <HAL_RCC_OscConfig+0x36e>
 8001486:	4b67      	ldr	r3, [pc, #412]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4a66      	ldr	r2, [pc, #408]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 800148c:	f023 0301 	bic.w	r3, r3, #1
 8001490:	6213      	str	r3, [r2, #32]
 8001492:	4b64      	ldr	r3, [pc, #400]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4a63      	ldr	r2, [pc, #396]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 8001498:	f023 0304 	bic.w	r3, r3, #4
 800149c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d015      	beq.n	80014d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a6:	f7ff fba9 	bl	8000bfc <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ac:	e00a      	b.n	80014c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ae:	f7ff fba5 	bl	8000bfc <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014bc:	4293      	cmp	r3, r2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e0ab      	b.n	800161c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c4:	4b57      	ldr	r3, [pc, #348]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0ee      	beq.n	80014ae <HAL_RCC_OscConfig+0x37e>
 80014d0:	e014      	b.n	80014fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fb93 	bl	8000bfc <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d8:	e00a      	b.n	80014f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014da:	f7ff fb8f 	bl	8000bfc <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e095      	b.n	800161c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f0:	4b4c      	ldr	r3, [pc, #304]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1ee      	bne.n	80014da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d105      	bne.n	800150e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001502:	4b48      	ldr	r3, [pc, #288]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	4a47      	ldr	r2, [pc, #284]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 8001508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800150c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 8081 	beq.w	800161a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001518:	4b42      	ldr	r3, [pc, #264]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 030c 	and.w	r3, r3, #12
 8001520:	2b08      	cmp	r3, #8
 8001522:	d061      	beq.n	80015e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d146      	bne.n	80015ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152c:	4b3f      	ldr	r3, [pc, #252]	; (800162c <HAL_RCC_OscConfig+0x4fc>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff fb63 	bl	8000bfc <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153a:	f7ff fb5f 	bl	8000bfc <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e067      	b.n	800161c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154c:	4b35      	ldr	r3, [pc, #212]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f0      	bne.n	800153a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001560:	d108      	bne.n	8001574 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001562:	4b30      	ldr	r3, [pc, #192]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	492d      	ldr	r1, [pc, #180]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001574:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a19      	ldr	r1, [r3, #32]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	430b      	orrs	r3, r1
 8001586:	4927      	ldr	r1, [pc, #156]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800158c:	4b27      	ldr	r3, [pc, #156]	; (800162c <HAL_RCC_OscConfig+0x4fc>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001592:	f7ff fb33 	bl	8000bfc <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800159a:	f7ff fb2f 	bl	8000bfc <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e037      	b.n	800161c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015ac:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x46a>
 80015b8:	e02f      	b.n	800161a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_RCC_OscConfig+0x4fc>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fb1c 	bl	8000bfc <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c8:	f7ff fb18 	bl	8000bfc <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e020      	b.n	800161c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x498>
 80015e6:	e018      	b.n	800161a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e013      	b.n	800161c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_RCC_OscConfig+0x4f4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	429a      	cmp	r2, r3
 8001606:	d106      	bne.n	8001616 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001612:	429a      	cmp	r2, r3
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	40007000 	.word	0x40007000
 800162c:	42420060 	.word	0x42420060

08001630 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0d0      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001644:	4b6a      	ldr	r3, [pc, #424]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d910      	bls.n	8001674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	4b67      	ldr	r3, [pc, #412]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 0207 	bic.w	r2, r3, #7
 800165a:	4965      	ldr	r1, [pc, #404]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001662:	4b63      	ldr	r3, [pc, #396]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0b8      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d020      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800168c:	4b59      	ldr	r3, [pc, #356]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4a58      	ldr	r2, [pc, #352]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001696:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a4:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4a52      	ldr	r2, [pc, #328]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b0:	4b50      	ldr	r3, [pc, #320]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	494d      	ldr	r1, [pc, #308]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d040      	beq.n	8001750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d115      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e07f      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ee:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e073      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fe:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e06b      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170e:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f023 0203 	bic.w	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4936      	ldr	r1, [pc, #216]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001720:	f7ff fa6c 	bl	8000bfc <HAL_GetTick>
 8001724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	e00a      	b.n	800173e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001728:	f7ff fa68 	bl	8000bfc <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e053      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 020c 	and.w	r2, r3, #12
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	429a      	cmp	r2, r3
 800174e:	d1eb      	bne.n	8001728 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d210      	bcs.n	8001780 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 0207 	bic.w	r2, r3, #7
 8001766:	4922      	ldr	r1, [pc, #136]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e032      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4916      	ldr	r1, [pc, #88]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	4313      	orrs	r3, r2
 800179c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d009      	beq.n	80017be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	490e      	ldr	r1, [pc, #56]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017be:	f000 f821 	bl	8001804 <HAL_RCC_GetSysClockFreq>
 80017c2:	4601      	mov	r1, r0
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 80017d0:	5cd3      	ldrb	r3, [r2, r3]
 80017d2:	fa21 f303 	lsr.w	r3, r1, r3
 80017d6:	4a09      	ldr	r2, [pc, #36]	; (80017fc <HAL_RCC_ClockConfig+0x1cc>)
 80017d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_RCC_ClockConfig+0x1d0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff f9ca 	bl	8000b78 <HAL_InitTick>

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40022000 	.word	0x40022000
 80017f4:	40021000 	.word	0x40021000
 80017f8:	08001ea0 	.word	0x08001ea0
 80017fc:	20000000 	.word	0x20000000
 8001800:	20000004 	.word	0x20000004

08001804 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001804:	b490      	push	{r4, r7}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800180a:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800180c:	1d3c      	adds	r4, r7, #4
 800180e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001810:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001814:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800182e:	4b23      	ldr	r3, [pc, #140]	; (80018bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b04      	cmp	r3, #4
 800183c:	d002      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x40>
 800183e:	2b08      	cmp	r3, #8
 8001840:	d003      	beq.n	800184a <HAL_RCC_GetSysClockFreq+0x46>
 8001842:	e02d      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001844:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001846:	623b      	str	r3, [r7, #32]
      break;
 8001848:	e02d      	b.n	80018a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	0c9b      	lsrs	r3, r3, #18
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001856:	4413      	add	r3, r2
 8001858:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800185c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d013      	beq.n	8001890 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001868:	4b14      	ldr	r3, [pc, #80]	; (80018bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	0c5b      	lsrs	r3, r3, #17
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001876:	4413      	add	r3, r2
 8001878:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800187c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001882:	fb02 f203 	mul.w	r2, r2, r3
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	fbb2 f3f3 	udiv	r3, r2, r3
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
 800188e:	e004      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	4a0c      	ldr	r2, [pc, #48]	; (80018c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001894:	fb02 f303 	mul.w	r3, r2, r3
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	623b      	str	r3, [r7, #32]
      break;
 800189e:	e002      	b.n	80018a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018a0:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018a2:	623b      	str	r3, [r7, #32]
      break;
 80018a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018a6:	6a3b      	ldr	r3, [r7, #32]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3728      	adds	r7, #40	; 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc90      	pop	{r4, r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	08001e8c 	.word	0x08001e8c
 80018b8:	08001e9c 	.word	0x08001e9c
 80018bc:	40021000 	.word	0x40021000
 80018c0:	007a1200 	.word	0x007a1200
 80018c4:	003d0900 	.word	0x003d0900

080018c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <RCC_Delay+0x34>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <RCC_Delay+0x38>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	0a5b      	lsrs	r3, r3, #9
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	fb02 f303 	mul.w	r3, r2, r3
 80018e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018e4:	bf00      	nop
  }
  while (Delay --);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1e5a      	subs	r2, r3, #1
 80018ea:	60fa      	str	r2, [r7, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f9      	bne.n	80018e4 <RCC_Delay+0x1c>
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000000 	.word	0x20000000
 8001900:	10624dd3 	.word	0x10624dd3

08001904 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e053      	b.n	80019be <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d106      	bne.n	8001936 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff f83b 	bl	80009ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2202      	movs	r2, #2
 800193a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800194c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	ea42 0103 	orr.w	r1, r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	0c1a      	lsrs	r2, r3, #16
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f002 0204 	and.w	r2, r2, #4
 800199c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69da      	ldr	r2, [r3, #28]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b08c      	sub	sp, #48	; 0x30
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80019d4:	2301      	movs	r3, #1
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <HAL_SPI_TransmitReceive+0x26>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e18a      	b.n	8001d02 <HAL_SPI_TransmitReceive+0x33c>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019f4:	f7ff f902 	bl	8000bfc <HAL_GetTick>
 80019f8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001a0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d00f      	beq.n	8001a36 <HAL_SPI_TransmitReceive+0x70>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a1c:	d107      	bne.n	8001a2e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d103      	bne.n	8001a2e <HAL_SPI_TransmitReceive+0x68>
 8001a26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d003      	beq.n	8001a36 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a34:	e15b      	b.n	8001cee <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_SPI_TransmitReceive+0x82>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <HAL_SPI_TransmitReceive+0x82>
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d103      	bne.n	8001a50 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a4e:	e14e      	b.n	8001cee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d003      	beq.n	8001a64 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2205      	movs	r2, #5
 8001a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	887a      	ldrh	r2, [r7, #2]
 8001a74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	887a      	ldrh	r2, [r7, #2]
 8001a7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	887a      	ldrh	r2, [r7, #2]
 8001a86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa4:	2b40      	cmp	r3, #64	; 0x40
 8001aa6:	d007      	beq.n	8001ab8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ab6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ac0:	d178      	bne.n	8001bb4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <HAL_SPI_TransmitReceive+0x10a>
 8001aca:	8b7b      	ldrh	r3, [r7, #26]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d166      	bne.n	8001b9e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	881a      	ldrh	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	1c9a      	adds	r2, r3, #2
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001af4:	e053      	b.n	8001b9e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d11b      	bne.n	8001b3c <HAL_SPI_TransmitReceive+0x176>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d016      	beq.n	8001b3c <HAL_SPI_TransmitReceive+0x176>
 8001b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d113      	bne.n	8001b3c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	881a      	ldrh	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	1c9a      	adds	r2, r3, #2
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d119      	bne.n	8001b7e <HAL_SPI_TransmitReceive+0x1b8>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d014      	beq.n	8001b7e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5e:	b292      	uxth	r2, r2
 8001b60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b66:	1c9a      	adds	r2, r3, #2
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001b7e:	f7ff f83d 	bl	8000bfc <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d807      	bhi.n	8001b9e <HAL_SPI_TransmitReceive+0x1d8>
 8001b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b94:	d003      	beq.n	8001b9e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001b9c:	e0a7      	b.n	8001cee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1a6      	bne.n	8001af6 <HAL_SPI_TransmitReceive+0x130>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1a1      	bne.n	8001af6 <HAL_SPI_TransmitReceive+0x130>
 8001bb2:	e07c      	b.n	8001cae <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <HAL_SPI_TransmitReceive+0x1fc>
 8001bbc:	8b7b      	ldrh	r3, [r7, #26]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d16b      	bne.n	8001c9a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	330c      	adds	r3, #12
 8001bcc:	7812      	ldrb	r2, [r2, #0]
 8001bce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001be8:	e057      	b.n	8001c9a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d11c      	bne.n	8001c32 <HAL_SPI_TransmitReceive+0x26c>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d017      	beq.n	8001c32 <HAL_SPI_TransmitReceive+0x26c>
 8001c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d114      	bne.n	8001c32 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	330c      	adds	r3, #12
 8001c12:	7812      	ldrb	r2, [r2, #0]
 8001c14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d119      	bne.n	8001c74 <HAL_SPI_TransmitReceive+0x2ae>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d014      	beq.n	8001c74 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c70:	2301      	movs	r3, #1
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001c74:	f7fe ffc2 	bl	8000bfc <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d803      	bhi.n	8001c8c <HAL_SPI_TransmitReceive+0x2c6>
 8001c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8a:	d102      	bne.n	8001c92 <HAL_SPI_TransmitReceive+0x2cc>
 8001c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d103      	bne.n	8001c9a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001c98:	e029      	b.n	8001cee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1a2      	bne.n	8001bea <HAL_SPI_TransmitReceive+0x224>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d19d      	bne.n	8001bea <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f893 	bl	8001dde <SPI_EndRxTxTransaction>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d006      	beq.n	8001ccc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001cca:	e010      	b.n	8001cee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10b      	bne.n	8001cec <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	e000      	b.n	8001cee <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001cec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001cfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3730      	adds	r7, #48	; 0x30
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b084      	sub	sp, #16
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	603b      	str	r3, [r7, #0]
 8001d16:	4613      	mov	r3, r2
 8001d18:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d1a:	e04c      	b.n	8001db6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d22:	d048      	beq.n	8001db6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001d24:	f7fe ff6a 	bl	8000bfc <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d902      	bls.n	8001d3a <SPI_WaitFlagStateUntilTimeout+0x30>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d13d      	bne.n	8001db6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d52:	d111      	bne.n	8001d78 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d5c:	d004      	beq.n	8001d68 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d66:	d107      	bne.n	8001d78 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d80:	d10f      	bne.n	8001da2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001da0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e00f      	b.n	8001dd6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	bf0c      	ite	eq
 8001dc6:	2301      	moveq	r3, #1
 8001dc8:	2300      	movne	r3, #0
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d1a3      	bne.n	8001d1c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af02      	add	r7, sp, #8
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2200      	movs	r2, #0
 8001df2:	2180      	movs	r1, #128	; 0x80
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f7ff ff88 	bl	8001d0a <SPI_WaitFlagStateUntilTimeout>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e04:	f043 0220 	orr.w	r2, r3, #32
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <__libc_init_array>:
 8001e1c:	b570      	push	{r4, r5, r6, lr}
 8001e1e:	2500      	movs	r5, #0
 8001e20:	4e0c      	ldr	r6, [pc, #48]	; (8001e54 <__libc_init_array+0x38>)
 8001e22:	4c0d      	ldr	r4, [pc, #52]	; (8001e58 <__libc_init_array+0x3c>)
 8001e24:	1ba4      	subs	r4, r4, r6
 8001e26:	10a4      	asrs	r4, r4, #2
 8001e28:	42a5      	cmp	r5, r4
 8001e2a:	d109      	bne.n	8001e40 <__libc_init_array+0x24>
 8001e2c:	f000 f822 	bl	8001e74 <_init>
 8001e30:	2500      	movs	r5, #0
 8001e32:	4e0a      	ldr	r6, [pc, #40]	; (8001e5c <__libc_init_array+0x40>)
 8001e34:	4c0a      	ldr	r4, [pc, #40]	; (8001e60 <__libc_init_array+0x44>)
 8001e36:	1ba4      	subs	r4, r4, r6
 8001e38:	10a4      	asrs	r4, r4, #2
 8001e3a:	42a5      	cmp	r5, r4
 8001e3c:	d105      	bne.n	8001e4a <__libc_init_array+0x2e>
 8001e3e:	bd70      	pop	{r4, r5, r6, pc}
 8001e40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e44:	4798      	blx	r3
 8001e46:	3501      	adds	r5, #1
 8001e48:	e7ee      	b.n	8001e28 <__libc_init_array+0xc>
 8001e4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e4e:	4798      	blx	r3
 8001e50:	3501      	adds	r5, #1
 8001e52:	e7f2      	b.n	8001e3a <__libc_init_array+0x1e>
 8001e54:	08001eb0 	.word	0x08001eb0
 8001e58:	08001eb0 	.word	0x08001eb0
 8001e5c:	08001eb0 	.word	0x08001eb0
 8001e60:	08001eb4 	.word	0x08001eb4

08001e64 <memset>:
 8001e64:	4603      	mov	r3, r0
 8001e66:	4402      	add	r2, r0
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d100      	bne.n	8001e6e <memset+0xa>
 8001e6c:	4770      	bx	lr
 8001e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8001e72:	e7f9      	b.n	8001e68 <memset+0x4>

08001e74 <_init>:
 8001e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e76:	bf00      	nop
 8001e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e7a:	bc08      	pop	{r3}
 8001e7c:	469e      	mov	lr, r3
 8001e7e:	4770      	bx	lr

08001e80 <_fini>:
 8001e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e82:	bf00      	nop
 8001e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e86:	bc08      	pop	{r3}
 8001e88:	469e      	mov	lr, r3
 8001e8a:	4770      	bx	lr
